<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面经整理</title>
      <link href="2022/03/09/mian-jing-zheng-li/"/>
      <url>2022/03/09/mian-jing-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot启动流程"><a href="#springboot启动流程" class="headerlink" title="springboot启动流程"></a>springboot启动流程</h1><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h2><p>其实就是问问你消息队列都有哪些使用场景，然后你项目里具体是什么场景，说说你在这个场景里用消息队列是什么？</p><p>面试官问你这个问题，<strong>期望的一个回答</strong>是说，你们公司有个什么<strong>业务场景</strong>，这个业务场景有个什么技术挑战，如果不用 MQ 可能会很麻烦，但是你现在用了 MQ 之后带给了你很多的好处。</p><p>先说一下消息队列常见的使用场景吧，其实场景有很多，但是比较核心的有 3 个：<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-1.png" alt="mq-1"></p><p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-2.png" alt="mq-2"></p><p><strong>总结</strong>：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><p><strong>面试技巧</strong>：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-3.png" alt="mq-3"></p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。</p><p>如果<strong>使用 MQ</strong>，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-4.png" alt="mq-4"></p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p><p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-5.png" alt="mq-5"></p><p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-6.png" alt="mq-6"></p><p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h3 id="消息队列有什么优缺点"><a href="#消息队列有什么优缺点" class="headerlink" title="消息队列有什么优缺点"></a>消息队列有什么优缺点</h3><p>优点上面已经说了，就是<strong>在特殊场景下有其对应的好处</strong>，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><p>缺点有以下几个：</p><ul><li><p>系统可用性降低</p><p>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，ABCD 四个系统还好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整？MQ 一挂，整套系统崩溃，你不就完了？<strong>如何保证消息队列的高可用</strong>。</p></li><li><p>系统复杂度提高</p><p>硬生生加个 MQ 进来，你怎么<strong>保证消息没有重复消费</strong>？怎么<strong>处理消息丢失的情况</strong>？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p></li><li><p>一致性问题</p><p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。</p></li></ul><h2 id="如何保证消息队列的高可用？"><a href="#如何保证消息队列的高可用？" class="headerlink" title="如何保证消息队列的高可用？"></a>如何保证消息队列的高可用？</h2><h3 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h3><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p><p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的，没人生产用单机模式。</p><h4 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h4><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每台机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-7.png" alt="mq-7"></p><p>这种方式确实很麻烦，也不怎么好，<strong>没做到所谓的分布式</strong>，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有<strong>数据拉取的开销</strong>，后者导致<strong>单实例性能瓶颈</strong>。</p><p>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p><p>所以这个事儿就比较尴尬了，这就<strong>没有什么所谓的高可用性</strong>，<strong>这方案主要是提高吞吐量的</strong>，就是说让集群中多个节点来服务某个 queue 的读写操作。</p><h4 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h4><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论是元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-8.png" alt="mq-8"></p><p>那么<strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><h3 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h3><p>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p><p>这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</p><p>实际上 RabbitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，因为无论怎么玩儿，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放这个 queue 的完整数据。</p><p>Kafka 0.8 以前，是没有 HA 机制的，就是任何一个 broker 宕机了，那个 broker 上的 partition 就废了，没法写也没法读，没有什么高可用性可言。</p><p>比如说，我们假设创建了一个 topic，指定其 partition 数量是 3 个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个 topic 的 1/3 的数据就丢了，因此这个是做不到高可用的。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/kafka-before.png" alt="kafka-before"></p><p>Kafka 0.8 以后，提供了 HA 机制，就是 replica（复制品） 副本机制。每个 partition 的数据都会同步到其它机器上，形成自己的多个 replica 副本。所有 replica 会选举一个 leader 出来，那么生产和消费都跟这个 leader 打交道，然后其他 replica 就是 follower。写的时候，leader 会负责把数据同步到所有 follower 上去，读的时候就直接读 leader 上的数据即可。只能读写 leader？很简单，<strong>要是你可以随意读写每个 follower，那么就要 care 数据一致性的问题</strong>，系统复杂度太高，很容易出问题。Kafka 会均匀地将一个 partition 的所有 replica 分布在不同的机器上，这样才可以提高容错性。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/kafka-after.png" alt="kafka-after"></p><p>这么搞，就有所谓的<strong>高可用性</strong>了，因为如果某个 broker 宕机了，没事儿，那个 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面有某个 partition 的 leader，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，大家继续读写那个新的 leader 即可。这就有所谓的高可用性了。</p><p><strong>写数据</strong>的时候，生产者就写 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以适当调整这个行为）</p><p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p><h3 id="如何保证消息不被重复消费？"><a href="#如何保证消息不被重复消费？" class="headerlink" title="如何保证消息不被重复消费？"></a>如何保证消息不被重复消费？</h3><p>回答这个问题，首先你别听到重复消息这个事儿，就一无所知吧，你<strong>先大概说一说可能会有哪些重复消费的问题</strong>。</p><p>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开发来保证的。挑一个 Kafka 来举个例子，说说怎么重复消费吧。</p><p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，<strong>每隔一段时间</strong>（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p><p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p><p>举个栗子。</p><p>有这么个场景。数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152/153/154。消费者从 Kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 <code>offset=153</code> 的这条数据，刚准备去提交 offset 到 Zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1/2 的 offset 并没有提交，Kafka 也就不知道你已经消费了 <code>offset=153</code> 这条数据。那么重启之后，消费者会找 Kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1/2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。</p><p>注意：新版的 Kafka 已经将 offset 的存储从 Zookeeper 转移至 Kafka brokers，并使用内部位移主题 <code>__consumer_offsets</code> 进行存储。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-10.png" alt="mq-10"></p><p>如果消费者干的事儿是拿一条数据就往数据库里写一条，会导致说，你可能就把数据 1/2 在数据库里插入了 2 次，那么数据就错啦。</p><p>其实重复消费不可怕，可怕的是你没考虑到重复消费之后，<strong>怎么保证幂等性</strong>。</p><p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p><p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p><p>所以第二个问题来了，怎么保证消息队列消费的幂等性？</p><p>其实还是得结合业务来思考，我这里给几个思路：</p><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-11.png" alt="mq-11"></p><p>当然，如何保证 MQ 的消费是幂等性的，在实际应用中需要结合具体的业务来看。</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp demo练习</title>
      <link href="2022/03/03/nlp-demo-lian-xi/"/>
      <url>2022/03/03/nlp-demo-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h1><p>TF-IDF可以用来提取文章中的关键词，TF（Term Frequency，词频）有两种计算方法：</p><ul><li>文章中单词出现次数/文章的总词数</li><li>文章中单词出现次数/该文出现次数最多的词出现的次数</li></ul><p>词频作为文章关键词提取的特征很容易理解，那什么是IDF（Inverse Document Frequency）呢？在自然语言表达中许多语气词，代词等：“是”，“的”，“这个”，而这些词作为文章关键词肯定是不合适的，因此我们需要使用IDF调低它们的权重</p>]]></content>
      
      
      <categories>
          
          <category> nlp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="2022/02/28/pa-chong-ru-men/"/>
      <url>2022/02/28/pa-chong-ru-men/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mofanpy.com/tutorials/data-manipulation/scraping/">莫烦教程原文链接</a></p><h1 id="用python登陆网页"><a href="#用python登陆网页" class="headerlink" title="用python登陆网页"></a>用python登陆网页</h1><p>使用<code>urllib.request.urlopen</code>库登陆网页，读取网页源码，并打印在终端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token comment" spellcheck="true"># if has Chinese, apply decide()</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>    <span class="token string">"https://mofanpy.com/static/scraping/basic-structure.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Scraping tutorial 1 | 莫烦Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/static/img/description/tab_icon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>爬虫测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      这是一个在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>莫烦Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/tutorials/scraping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爬虫教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 中的简单测试.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用正则化表达式匹配来获取有用的信息，如现在希望获取网页title标签里的信息：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;title>(.+?)&lt;/title>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPage title is: "</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Page title is:  Scraping tutorial 1 | 莫烦Python</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要获取的信息包含多行，即包含’\n’字符，需要加上<code>re.DOTALL</code>属性，因为正则表达式中的dot(.)不能匹配换行符。</p><pre class="line-numbers language-python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;p>(.*?)&lt;/p>"</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPage Paragraph is: "</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Page Paragraph is:   这是一个在 &lt;a href="/">莫烦Python&lt;/a> &lt;a href="/tutorials/data-manipulation/scraping/">爬虫教程&lt;/a> 中的简单测试. </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后来找一找该网页中所有的链接信息吧！</p><pre class="line-numbers language-python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'href="(.*?)"'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"All links: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># All links:  ['https://mofanpy.com/static/img/description/tab_icon.png', 'https://mofanpy.com/', 'https://mofanpy.com/tutorials/scraping']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup解析网页"><a href="#BeautifulSoup解析网页" class="headerlink" title="BeautifulSoup解析网页"></a>BeautifulSoup解析网页</h1><p>虽然使用正则表达式regex很灵活，也是python自带的功能。但是有时提取的信息并不纯粹，如提起p标签内容时会发现里面包括链接信息。</p><p>使用BeautifulSoup便可以处理这些问题。</p><p>Beautiful <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">英文官网</a>，<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">中文官网</a></p><p>安装：</p><ul><li><code>pip3 install beautifulsoup4</code></li><li><code>pip3 install lxml</code></li></ul><p>使用BeautifulSoup可以轻松获取标签信息：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenhtml <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/static/scraping/basic-structure.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>h1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;h1>爬虫测试1&lt;/h1></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果网页中有多个同样的 tag, 比如链接 <code>&lt;a&gt;</code>, 我们可以使用 <code>find_all()</code> 来找到所有的选项. 因为我们真正的 link 不是在 <code>&lt;a&gt;</code> 中间 <code>&lt;/a&gt;</code>, 而是在 <code>&lt;a href=&quot;link&quot;&gt;</code> 里面, 也可以看做是 <code>&lt;a&gt;</code> 的一个属性. 我们能用像 Python 字典的形式, 用 key 来读取 <code>l[&quot;href&quot;]</code>.</p><pre class="line-numbers language-python"><code class="language-python">all_href <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取所有a标签中的链接</span>all_href <span class="token operator">=</span> <span class="token punctuation">[</span>l<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> all_href<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> all_href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;a href="https://mofanpy.com/">莫烦Python&lt;/a>, &lt;a href="https://mofanpy.com/tutorials/scraping">爬虫教程&lt;/a>]</span> <span class="token comment" spellcheck="true">#['https://mofanpy.com/', 'https://mofanpy.com/tutorials/scraping']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup解析网页CSS"><a href="#BeautifulSoup解析网页CSS" class="headerlink" title="BeautifulSoup解析网页CSS"></a>BeautifulSoup解析网页CSS</h1><p>这一节将使用css的class选择内容。</p><p>网页源码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>爬虫练习 列表 class | 莫烦 Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.jan</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.feb</span> </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.month</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>列表 爬虫练习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>莫烦 Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tutorials/data-manipulation/scraping/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爬虫教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 里无敌简单的网页, 所有的 code        让你一目了然, 清晰无比.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月一号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月二号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月三号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feb month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>五月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们希望找<code>jan</code>下面的这些<code>&lt;li&gt;</code>，BeautifulSoup可以通过<code>class=&quot;jan&quot;</code>找到它们。<code>soup.findAll(&quot;li&quot;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</code>会做一次筛选，只会选择月份相关的li标签。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token comment" spellcheck="true"># if has Chinese, apply decode()</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/static/scraping/list.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>months <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"month"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> month <span class="token keyword">in</span> months<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>month<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""一月二月三月四月五月[&lt;li class="month">一月&lt;/li>, &lt;li class="feb month">二月&lt;/li>, &lt;li class="month">三月&lt;/li>, &lt;li class="month">四月&lt;/li>, &lt;li class="month">五月&lt;/li>]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到一月份的三个li:</p><pre class="line-numbers language-python"><code class="language-python">jan <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"jan"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>d_jan <span class="token operator">=</span> jan<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token keyword">for</span> d <span class="token keyword">in</span> d_jan<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""一月一号一月二号一月三号"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup结合正则表达式"><a href="#BeautifulSoup结合正则表达式" class="headerlink" title="BeautifulSoup结合正则表达式"></a>BeautifulSoup结合正则表达式</h1><p>本节采用bs结合regex获取源码中更有难度的信息。</p><p>网页中的图片都藏在这样一个tag中：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/static/img/course_cover/tf.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以, 我们可以用 <code>soup</code> 将这些 <code>&lt;img&gt;</code> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同. 或者每一个图片有的可能是 jpg 有的是 png, 如果我们只想挑选 jpg 形式的图片, 我们就可以用这样一个正则 <code>r&#39;.*?\.jpg&#39;</code> 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>img_links <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"src"</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'.*?\.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> link <span class="token keyword">in</span> img_links<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""https://static.mofanpy.com/static/img/icon/keras_icon.jpghttps://static.mofanpy.com/static/img/description/404-Page.jpg"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小练习：爬取百度百科"><a href="#小练习：爬取百度百科" class="headerlink" title="小练习：爬取百度百科"></a>小练习：爬取百度百科</h1><p>爬虫的原理是在爬取网页源码后，遍历找到网页中的外部链接，接着爬取该链接的源码，进而删选有用的信息。就像一堆虫子一样爬遍植物的所有分支。</p><p>我们以百度百科-网络爬虫词条作为网络爬虫的入口。打印该页面源码我们会发现一些链接，指向百度百科另一些词条，如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E8%9C%98%E8%9B%9B/8135707<span class="token punctuation">"</span></span> <span class="token attr-name">data-lemmaid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8135707<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>蜘蛛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E8%A0%95%E8%99%AB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>蠕虫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E9%80%9A%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通用搜索引擎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过观察, 我们发现, 链接有些共通之处. 它们都是 <code>/item/</code> 开头, 夹杂着一些 <code>%E9</code> 这样的东西. 但是仔细搜索一下, 发现还有一些以 <code>/item/</code> 开头的, 却不是词条. 比如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/史记·2016?fr<span class="token punctuation">=</span>navbar<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>史记·2016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此我们需要对这些链接做一些筛选，之前提到的用 BeautifulSoup 和 正则表达式来筛选应该用得上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">import</span> re<span class="token keyword">import</span> randombase_url <span class="token operator">=</span> <span class="token string">"https://baike.baidu.com"</span>his <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 随便找一个url完成下一层的爬取</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> base_url <span class="token operator">+</span> his<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'    url: '</span><span class="token punctuation">,</span> his<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find valid urls</span>    sub_urls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"_blank"</span><span class="token punctuation">,</span> <span class="token string">"href"</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/item/(%.{2})+$"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sub_urls<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        his<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>sub_urls<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># no valid sub link found</span>        his<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0 网络爬虫     url:  /item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/51627111 矩阵     url:  /item/%E7%9F%A9%E9%98%B52 特征向量     url:  /item/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F3 图论     url:  /item/%E5%9B%BE%E8%AE%BA4 特征向量     url:  /item/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F5 范数     url:  /item/%E8%8C%83%E6%95%B06 算子     url:  /item/%E7%AE%97%E5%AD%907 拉普拉斯算子     url:  /item/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%908 坐标系     url:  /item/%E5%9D%90%E6%A0%87%E7%B3%BB9 坐标转换     url:  /item/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A210 右手系     url:  /item/%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB11 三维空间     url:  /item/%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B412 宇宙飞船     url:  /item/%E5%AE%87%E5%AE%99%E9%A3%9E%E8%88%B913 自动检测系统     url:  /item/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F14 宇宙飞船     url:  /item/%E5%AE%87%E5%AE%99%E9%A3%9E%E8%88%B915 阿波罗飞船     url:  /item/%E2%80%9C%E9%98%BF%E6%B3%A2%E7%BD%97%E2%80%9D%E5%8F%B7%E9%A3%9E%E8%88%B916 登陆月球     url:  /item/%E7%99%BB%E6%9C%8817 东方红三号卫星     url:  /item/%E4%B8%9C%E6%96%B9%E7%BA%A2%E4%B8%89%E5%8F%B7%E5%8D%AB%E6%98%9F18 通信卫星     url:  /item/%E9%80%9A%E4%BF%A1%E5%8D%AB%E6%98%9F19 国际通信卫星     url:  /item/%E5%9B%BD%E9%99%85%E9%80%9A%E4%BF%A1%E5%8D%AB%E6%98%"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多功能的Requests"><a href="#多功能的Requests" class="headerlink" title="多功能的Requests"></a>多功能的Requests</h1><p>我们通常使用 Python 的自带模块 urllib, 来提交网页请求. 这个模块能满足我们大部分的需求, 但是为了满足你日益膨胀的其他需求, 比如向网页发送信息, 上传图片等等, 我们还有一个伟大的 Python 外部模块 requests, 来有效的处理这些问题.</p><p>安装环境：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式python</title>
      <link href="2022/02/28/zheng-ze-biao-da-shi-python/"/>
      <url>2022/02/28/zheng-ze-biao-da-shi-python/</url>
      
        <content type="html"><![CDATA[<h1 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h1><p>以下为python的普通字符串匹配：</p><pre class="line-numbers language-python"><code class="language-python">pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>pattern2 <span class="token operator">=</span> <span class="token string">"bird"</span>string <span class="token operator">=</span> <span class="token string">"dog runs to cat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern1 <span class="token keyword">in</span> string<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern2 <span class="token keyword">in</span> string<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的例子，我们使用regex库实现匹配功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                <span class="token comment" spellcheck="true"># regex包</span>pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>pattern2 <span class="token operator">=</span> <span class="token string">"bird"</span>string <span class="token operator">=</span> <span class="token string">"dog runs to cat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(12, 15), match='cat'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符正则化"><a href="#字符正则化" class="headerlink" title="字符正则化"></a>字符正则化</h1><ul><li><p>中括号选择形式</p><p>正则匹配串的形式为 <code>r&quot;regexStr&quot;</code>，即<font color='red'>字符串前加r</font>。</p><p>正则化完成单字符的多模式匹配。<code>r&quot;r[au]n&quot;</code>，可匹配ran或者run：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># multiple patterns("run" or "ran")</span>ptn <span class="token operator">=</span> r<span class="token string">"r[au]n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>ptn<span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>中括号范围形式</p><p>当希望匹配更多情况时，上面的方式未免太麻烦了。其实中括号匹配还提供了字符范围的表示方法，<code>r&quot;r[A-Z]n&quot;</code>，这样就可以把括号内的字符替换为A到Z的任意字符啦！[0-9a-z]既可以匹配数字也可以匹配字母</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[A-Z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[a-z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat, and cat ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9]n"</span><span class="token punctuation">,</span> <span class="token string">"dog r2ns to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r2n'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9a-z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>\表示转译，因此要匹配反斜杠需要使用<code>\\</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \\ : match \</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"runs\\"</span><span class="token punctuation">,</span> <span class="token string">"runs\ to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 5), match='runs\\'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>.</code>可以匹配除\n以外的任意字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># . : match anything (except \n)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r.n"</span><span class="token punctuation">,</span> <span class="token string">"r[ns to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r[n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="预定义字符集"><a href="#预定义字符集" class="headerlink" title="预定义字符集"></a>预定义字符集</h1><ul><li><p>数字，通配符：<code>\d</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \d : decimal digit</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>非数字字符，通配符：<code>\D</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \D : any non-decimal character</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匹配空白键，<code>\s</code>可以匹配tab、空行等:[\t \n \r \f \v]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \s : any white space [\t \n \r \f \v] </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\sn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r\nn'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匹配分空白键的字符，<code>\S</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \S : opposite to \s, any non-white character</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Sn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color='red'>所有字母、数字和’_’</font>，<code>\w</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \w : [a-zA-Z0-9]</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>\W</code>与<code>\w</code>相反：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \W : opposite to \w</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r\nn'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h1><ul><li> <code>\b</code>表示空白字符，但只能放在头和尾。\b代表单词之间看不见的转移字符，如here is a word，这句中有好几个\b，每个单词前后都有一个\b。因此\b适合用在匹配整个单词的时候，如果只是单词中的一部分则匹配不了：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\bruns\b"</span><span class="token punctuation">,</span> <span class="token string">"dogs runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(5, 9), match='runs'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\br\buns"</span><span class="token punctuation">,</span> <span class="token string">"dogs r unsto cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\bruns"</span><span class="token punctuation">,</span> <span class="token string">"dogs runsto cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(5, 9), match='runs'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>\B</code>就是反过来，代表非单词间：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\Bruns\B"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\Bo\B"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(1, 2), match='o'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>^</code>匹配字符串头:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ^ : match line beginning</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^dog"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='dog'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>^</code>和<code>flags=re.MULTILINE</code>完成多行头匹配</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># multi-line</span>string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""dog runs to cat.I run to dog."""</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(18, 19), match='I'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>$</code>匹配字符串尾：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># $ : match line ending</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"cat$"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(12, 15), match='cat'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h1><ul><li><p><code>*</code>：0次或者无限次</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># * : occur 0 or more times</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 1), match='a'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"abbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 5), match='abbbb'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>+</code>：1次或者无限次</p></li><li><p><code>&#123;m&#125;</code>:匹配前一个字符m次，也可以匹配字符串</p></li><li><p><code>&#123;n,m&#125;</code> ： 出现n到m次。注意里面不能有空格!</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># {n,m} : occure n to m times</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"abbbbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 8), match='abbbbbbb'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"a(bc){2,5}d"</span><span class="token punctuation">,</span> <span class="token string">"abcbcbcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 8), match='abcbcbcd'></span><span class="token comment" spellcheck="true"># 匹配字符串bc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>?</code>0次或者1次，(str)?，比如面对一些简称时可能有字符串的一段也可能没有：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ? : may or may not occur</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 6), match='Monday'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='Mon'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="逻辑、分组"><a href="#逻辑、分组" class="headerlink" title="逻辑、分组"></a>逻辑、分组</h1><ul><li><p>group组可以把匹配字符串的部分信息进行分组：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># group</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(\d+), Date: (.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Date: Feb/12/2021"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 021523, Date: Feb/12/2021</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 021523</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># Feb/12/2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当组数量非常大时，使用<code>?P&lt;groupName&gt;</code>对组进行命名是非常有必要的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># use ?P&lt;groupName> named group</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(?P&lt;id>\d+), Date: (?P&lt;date>.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Date: Feb/12/2021"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 021523, Date: Feb/12/2021</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 021523</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># Feb/12/2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>|</code> ： 表示逻辑或</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"(ran|run)"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['run', 'ran']</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"r(a|u)n"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># ['u', 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h1><ul><li><p>使用findall寻找所有匹配</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"r[au]n"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># ['run', 'ran']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>替换<code>re.sub() replace</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"r[au]ns"</span><span class="token punctuation">,</span> <span class="token string">"catches"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># dog catches to cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color='red'>分裂</font>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># re.split()</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">"[,;\.]"</span><span class="token punctuation">,</span> <span class="token string">"a;b,c.d;e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd', 'e']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color='red'>编译</font>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compile</span>compile_re <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"r[au]n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>compile_re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"dog ran to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='ran'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="2022/02/23/git-cao-zuo/"/>
      <url>2022/02/23/git-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="创建并初始化："><a href="#创建并初始化：" class="headerlink" title="创建并初始化："></a>创建并初始化：</h3><p><code>mkdir dir</code>—<code>cd dir</code>—<code>git init</code></p><p>会在目录下生成隐藏文件夹.git</p><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><ul><li>形式：<ul><li>用户名：tom</li><li>Email：<a href="mailto:&#x67;&#111;&#111;&#100;&#x4d;&#x6f;&#114;&#110;&#105;&#110;&#103;&#x40;&#102;&#x66;&#102;&#x2e;&#x63;&#111;&#109;">&#x67;&#111;&#111;&#100;&#x4d;&#x6f;&#114;&#110;&#105;&#110;&#103;&#x40;&#102;&#x66;&#102;&#x2e;&#x63;&#111;&#109;</a></li></ul></li><li>作用：区分不用开发人员身份</li><li>辨析：这里设置的签名和登陆远程库（代码托管中心）的账号、密码没有任何关系。</li><li>命令<ul><li>项目级别/仓库级别：仅在当前本地库范围内有效<ul><li><code>git config user.name tom_pro</code></li><li><code>git config user.email goodMorning_pro@fff.com</code></li></ul></li><li>系统用户级别：登陆当前操作系统的用户范围(参数 – global)<ul><li><code>git config --global user.name tom</code></li><li><code>git config --global user.email good@fff.com</code></li></ul></li><li>级别优先级：项目级别优先于系统用户级别。不允许二者都没有。</li></ul></li><li><code>cat .git/config</code>查看项目用户信息。</li><li><code>cat ~/.gitconfig</code>查看全局用户信息。</li></ul><h2 id="使用与管理"><a href="#使用与管理" class="headerlink" title="使用与管理"></a>使用与管理</h2><h3 id="添加提交及查看状态操作"><a href="#添加提交及查看状态操作" class="headerlink" title="添加提交及查看状态操作"></a>添加提交及查看状态操作</h3><p>将工作区“新建/修改”添加到缓存区<code>git add fileName</code></p><p>查看工作区、缓存区状态<code>git status</code></p><p>删除缓存文件<code>git rm --cached fileName</code></p><p>提交到本地仓库<code>git commit -m &#39;修改说明&#39; [fileName]</code></p><h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><p>查看提交记录：</p><ul><li>显示详情：<code>git log</code></li><li>显示一行：<code>git log --pretty=oneline</code></li><li><code>git log --oneline</code></li><li><code>git reflog</code></li></ul><p>基于索引值前进/后退 版本（<strong>推荐</strong>）：</p><ul><li><p><code>git reset --hard fd83eb9.....</code></p></li><li><p>索引值只要一部分，便可唯一确定版本</p></li></ul><p>前进后退版本的其他方式：</p><ul><li><code>git reset --hard HEAD^^^^</code></li><li>几个异或符号就是往前退几个版本</li><li><code>git reset --hard HEAD~3</code></li><li>波浪线后面接的数字表示后退的次数</li></ul><p>hard、soft、mixed参数对比：</p><ul><li>–soft参数<ul><li>仅仅在本地库移动HEAD指针</li></ul></li><li>–mixed参数<ul><li>在本地库移动HEAD指针</li><li>重制缓存区</li></ul></li><li>–hard参数<ul><li>在本地库移动HEAD指针</li><li>重制缓存区</li><li>重制工作区</li></ul></li></ul><p>git reset –hard HEAD等于清空缓存区add的操作。</p><h3 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h3><p>把工作区和缓存区的文件内容进行比较：<code>git diff fileName</code></p><p>工作区和本地库进行比较：<code>git diff HEAD fileName</code></p><p>工作区和本地历史记录进行比较：<code>git diff historyId fileName</code></p><p>不带文件名，比较多个文件：<code>git diff HEAD</code></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="分支概述"><a href="#分支概述" class="headerlink" title="分支概述"></a>分支概述</h3><ul><li>分支可以同时并行推进多个功能的开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除，重新开始即可。</li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li>创建分支：<code>git branch [分支名]</code></li><li>查看分支：<code>git branch -v</code></li><li>切换分支：<code>git checkout [分支名]</code></li><li>合并分支<ul><li>第一步：切换到接受修改的分支上（被合并，增加新内容）</li><li><code>git checkout [被合并分支名]</code></li><li>第二步：执行<code>git merge [合并进来的分支]</code></li></ul></li><li>解决合并冲突<ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：git add[文件名]</li><li>第四步：git commit -m ‘日志信息’  (注意：此时commit一定不能带具体文件名)</li></ul></li></ul><h2 id="Git一点原理"><a href="#Git一点原理" class="headerlink" title="Git一点原理"></a>Git一点原理</h2><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>git版本号使用SHA1算法，是一种hash算法。</p><ul><li>不管输入数据的数据量是多大，输入同一个hash算法，得到的加密结果长度固定。</li><li>hash算法确定，输入数据确定，输出数据能够保持不变。</li><li>hash算法确定，输入数据稍有变化，输出通常变化很大。</li><li>hash算法不可逆。</li></ul><h3 id="Git数据管理机制"><a href="#Git数据管理机制" class="headerlink" title="Git数据管理机制"></a>Git数据管理机制</h3><p><img src="../images/git%E6%93%8D%E4%BD%9C/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE2Nzc3ODUx,size_16,color_FFFFFF,t_70-20220223181330212.png" alt="img"></p><p>Git是把数据看作是对小型文件系统的一组快照。 每次提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="远程仓库修改的拉取"><a href="#远程仓库修改的拉取" class="headerlink" title="远程仓库修改的拉取"></a>远程仓库修改的拉取</h3><ul><li>pull = fetch + merge</li><li>git fetch origin master</li><li>git merge origin/master</li></ul><h3 id="协同开发时冲突的解决"><a href="#协同开发时冲突的解决" class="headerlink" title="协同开发时冲突的解决"></a>协同开发时冲突的解决</h3><ul><li>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取。</li><li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”即可。</li></ul><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><strong>fork + pull request</strong></p><ul><li>外部团队的人点击项目的Fork按钮</li><li>本地修改，推送到远程Fork仓库</li><li>点击 “Pull requests”-&gt;“New pull request” -&gt; “Create pull request”</li><li>项目拥有者审核后点击“Merge pull request”合并代码</li><li>将远程库修改拉取到本地</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="2021/12/20/springboot-xue-xi-bi-ji/"/>
      <url>2021/12/20/springboot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h1><h2 id="1、第一个SpringBoot程序"><a href="#1、第一个SpringBoot程序" class="headerlink" title="1、第一个SpringBoot程序"></a>1、第一个SpringBoot程序</h2><h3 id="1-1-环境需求"><a href="#1-1-环境需求" class="headerlink" title="1.1 环境需求"></a>1.1 环境需求</h3><ul><li>jdk1.8</li><li>Maven 3.6.3</li><li>springboot最新版</li><li>IDEA</li></ul><h3 id="1-2-HelloWorld"><a href="#1-2-HelloWorld" class="headerlink" title="1.2 HelloWorld"></a>1.2 HelloWorld</h3><p>使用Spring Initializr创建名为在helloworld的含SpringWeb的项目，在HelloworldApplication文件的同一级目录下创建controller package，在package里新建HelloController类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello, world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@RestController返回实体对象</li><li>@Controller返回页面，在@Controller类里面如果有方法需要返回实体，需加上@ResponseBody</li></ul><p>启动项目，访问localhost:8080/api/hello。</p><h2 id="2-配置文件yaml"><a href="#2-配置文件yaml" class="headerlink" title="2. 配置文件yaml"></a>2. 配置文件yaml</h2><h3 id="2-1-yaml的格式"><a href="#2-1-yaml的格式" class="headerlink" title="2.1 yaml的格式"></a>2.1 yaml的格式</h3><p>yaml和properties配置文件的功能一致，但properties只能以键值对的形式编写，yaml格式更加简单，推荐使用yaml(对空格的要求十分高！)。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true"># 对象</span><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> techaoba  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/03/28  <span class="token comment" spellcheck="true"># 行内写法</span>  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span> <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 数组</span>  <span class="token key atrule">lists</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> code    <span class="token punctuation">-</span> music    <span class="token punctuation">-</span> gril  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 边境牧羊犬    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-yaml给实体类赋值"><a href="#2-2-yaml给实体类赋值" class="headerlink" title="2.2 yaml给实体类赋值"></a>2.2 yaml给实体类赋值</h3><p>person类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-json"><code class="language-json">Person(name=techaoba<span class="token punctuation">,</span> age=<span class="token number">16</span><span class="token punctuation">,</span> happy=<span class="token boolean">false</span><span class="token punctuation">,</span> birth=Tue Mar <span class="token number">28</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2000</span><span class="token punctuation">,</span> maps=<span class="token punctuation">{</span>k1=v1<span class="token punctuation">,</span> k2=v2<span class="token punctuation">}</span><span class="token punctuation">,</span> lists=<span class="token punctuation">[</span>code<span class="token punctuation">,</span> music<span class="token punctuation">,</span> gril<span class="token punctuation">]</span><span class="token punctuation">,</span> dog=Dog(name=边境牧羊犬<span class="token punctuation">,</span> age=<span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-JSR303校验"><a href="#3-JSR303校验" class="headerlink" title="3. JSR303校验"></a>3. JSR303校验</h2><p>pom中加入校验依赖包：</p><pre class="line-numbers language-pom"><code class="language-pom"><dependency>  <groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-validation</artifactId></dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给学生的name加入@Email校验功能：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">// 数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-error"><code class="language-error">Property: person.nameValue: aobaOrigin: class path resource [application.yaml] - 2:9Reason: 邮箱格式错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DFEC5506-76D2-43CA-970D-CFAEF09423D4-0942010.png" alt="简单介绍"></p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ0MDY0Mg==,size_16,color_FFFFFF,t_70-20211231171447115.png" alt="补充"></p><p>其他例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UmsAdminParam</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定长度</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度是6-18位"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能是空的</span>    <span class="token annotation punctuation">@NotEmpty</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户头像"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String icon<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"邮箱"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户昵称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String nickName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-多环境配置及配置文件位置"><a href="#4-多环境配置及配置文件位置" class="headerlink" title="4. 多环境配置及配置文件位置"></a>4. 多环境配置及配置文件位置</h2><h3 id="4-1-配置文件位置优先级"><a href="#4-1-配置文件位置优先级" class="headerlink" title="4.1 配置文件位置优先级"></a>4.1 配置文件位置优先级</h3><p>配置文件的默认位置有四个，优先级由高到低如下：</p><ul><li>file: ./config</li><li>file: ./</li><li>classpath: /config/</li><li>classpath: /</li></ul><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211231174255610.png" alt="配置文件优先级"></p><h3 id="4-2-多环境配置文件"><a href="#4-2-多环境配置文件" class="headerlink" title="4.2 多环境配置文件"></a>4.2 多环境配置文件</h3><p>项目当中会有测试环境和生产环境等，可以使用配置文件进行多环境的切换。</p><p>前缀都写application-，spring.profiles.active只用写减号-后的后缀。如下选择test环境便是8082端口：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># application-dev.yaml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>  <span class="token comment" spellcheck="true"># application-test.yaml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>  <span class="token comment" spellcheck="true"># application.yaml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-静态资源"><a href="#5-静态资源" class="headerlink" title="5. 静态资源"></a>5. 静态资源</h2><h3 id="5-1-静态资源位置优先级"><a href="#5-1-静态资源位置优先级" class="headerlink" title="5.1 静态资源位置优先级"></a>5.1 静态资源位置优先级</h3><p>静态资源的位置有三个，优先级由高到低如下：</p><ul><li>classpath: /resources/</li><li>classpath: /static/</li><li>classpath: /public/      </li></ul><p>public里面放一些公共的资源，比如js文件；</p><p>static放静态资源，比如图片；</p><p>resources可放一些上传的文件等；</p><p>静态资源都可以通过<code>localhost:8080/资源名</code>来访问。</p><h3 id="5-2-thymeleaf模板引擎"><a href="#5-2-thymeleaf模板引擎" class="headerlink" title="5.2 thymeleaf模板引擎"></a>5.2 thymeleaf模板引擎</h3><p>首页默认为静态资源中的index.html，通过<code>localhost:8080</code>即可访问。</p><h4 id="5-2-1-thymeleaf配置和Controller页面跳转"><a href="#5-2-1-thymeleaf配置和Controller页面跳转" class="headerlink" title="5.2.1 thymeleaf配置和Controller页面跳转"></a>5.2.1 thymeleaf配置和Controller页面跳转</h4><p>模板引擎的作用就是把动态页面（即存在动态值）和传入的数据进行组装再渲染到页面上。</p><p>导入thymeleaf依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Thymeleaf --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>thymeleaf通过controller跳转访问templates目录下的test.html：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在templates目录下的所有页面，只能通过controller来跳转</span><span class="token comment" spellcheck="true">// 需要模板引擎的支持，如thymeleaf</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2-thymeleaf动态页面"><a href="#5-2-2-thymeleaf动态页面" class="headerlink" title="5.2.2 thymeleaf动态页面"></a>5.2.2 thymeleaf动态页面</h4><p>test静态页面：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 所有的html元素都可以被thymeleaf替换接管： th:元素名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller通过Model进行传值：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello, ECNU!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-thymeleaf语法"><a href="#5-2-3-thymeleaf语法" class="headerlink" title="5.2.3 thymeleaf语法"></a>5.2.3 thymeleaf语法</h4><ul><li><p>变量表达式：<code>$&#123;...&#125;</code></p></li><li><p>选择变量表达式：<code>*&#123;...&#125;</code></p></li><li><p>消息表达式：<code>#&#123;...&#125;</code></p></li><li><p>URL链接表达式：<code>@&#123;...&#125;</code></p></li><li><p>片段表达式：<code>~&#123;...&#125;</code></p></li></ul><p>其他例子：</p><p><code>th:utext=&quot;$&#123;msg&#125;&quot;</code>: 会进行转译，<code>th:text=&quot;$&#123;msg&#125;&quot;</code>：不会转译。</p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211231203141937.png" alt="th:text和th:utext的区别"></p><p><code>th:each</code> 遍历</p><p>Model中加入数组：</p><pre class="line-numbers language-java"><code class="language-java">model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"cities"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两种等价遍历写法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city:${cities}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city:${cities}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[ ${city} ]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-扩展SpringMVC"><a href="#6-扩展SpringMVC" class="headerlink" title="6. 扩展SpringMVC"></a>6. 扩展SpringMVC</h2><p>自定义视图解析器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扩展 springmvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ViewResolver 实现了视图解析器接口的类，我们就可以把它看做视图解析器</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ViewResolver <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义了一个自己的视图解析器MyViewResolver</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加视图跳转(/aoba会跳转到test页面)：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 视图跳转</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/aoba"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-员工管理系统（静态数据）"><a href="#7-员工管理系统（静态数据）" class="headerlink" title="7. 员工管理系统（静态数据）"></a>7. 员工管理系统（静态数据）</h2><h3 id="7-1-准备员工和部门静态数据和dao接口"><a href="#7-1-准备员工和部门静态数据和dao接口" class="headerlink" title="7.1 准备员工和部门静态数据和dao接口"></a>7.1 准备员工和部门静态数据和dao接口</h3><h3 id="7-2-BootStrap找系统静态资源模板导入resources"><a href="#7-2-BootStrap找系统静态资源模板导入resources" class="headerlink" title="7.2 BootStrap找系统静态资源模板导入resources"></a>7.2 BootStrap找系统静态资源模板导入resources</h3><h3 id="7-3-国际化"><a href="#7-3-国际化" class="headerlink" title="7.3 国际化"></a>7.3 国际化</h3><p>在resources中新建i18n（Internationalization）文件夹。</p><p>i18n中新建login.properties、login_en_US.properties、login_zh_CN.properties</p><p>IDEA提供了可视化内容编辑。login_en_US.properties内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">Sign in</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">Password</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">Remember me</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">Please sign in</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">Username</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>login.properties &amp;login_zh_CN.properties内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">登陆</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住我</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在application.properties中配置i18n的位置：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置i18n的位置</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在国际化需要变换内容的地方使用<code>th:text=&quot;#&#123;login.tip&#125;&quot;</code>语法。</p><p>使用按钮传入语言参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自定义国际化组件并在MyMvcConfig里使用@Bean注入。</p><p>MyLocaleResolver类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 解析请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求中的语言参数</span>    String language <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果没有就使用默认的</span>    <span class="token comment" spellcheck="true">// 如果请求的链接携带了国际化的参数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// zh_CN</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> language<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 国家，地区</span>      locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>splits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> splits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> locale<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyMvcConfig类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义的国际化组件就生效了</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-登陆功能"><a href="#7-4-登陆功能" class="headerlink" title="7.4 登陆功能"></a>7.4 登陆功能</h3><p>index.html:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 表单的跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/login}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 如果msg的值为空，则不显示消息,#strings为工具类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过表单的name值取值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller实现跳转:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                      Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"dashboard"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-登陆拦截器"><a href="#7-5-登陆拦截器" class="headerlink" title="7.5 登陆拦截器"></a>7.5 登陆拦截器</h3><p>在Controller中加入HttpSession，如果通过登陆跳转到主页可以拿到session信息，否则通过拦截器拦截服务请求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                    HttpSession session<span class="token punctuation">,</span>                    Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/main.html"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义登陆拦截器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandleInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 登陆成功后有用户的session；</span>    Object loginUser <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 没有登陆</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写WebMvcConfigurer的addInterceptors方法，放行登陆页面和静态资源文件的请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandleInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/user/login"</span>                <span class="token punctuation">,</span> <span class="token string">"/css/**"</span><span class="token punctuation">,</span> <span class="token string">"/js/**"</span><span class="token punctuation">,</span> <span class="token string">"/img/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-展示员工列表"><a href="#7-6-展示员工列表" class="headerlink" title="7.6 展示员工列表"></a>7.6 展示员工列表</h3><p>提取公共页面</p><ul><li><code>th:fragment=&quot;sidebar&quot;</code></li><li><code>th:replace=&quot;~&#123;commons/commons::sidebar&#125;&quot;</code></li><li>如果要传递参数，可以直接使用()传参，接收判断即可</li></ul><p>员工信息展示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp:${emps}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getLastName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getEmail()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>0?<span class="token punctuation">'</span>女<span class="token punctuation">'</span>:<span class="token punctuation">'</span>男<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getDepartment().getDepartmentName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(emp.getBirth(),<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toUpdate/}+${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/delemp/}+${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>```### 7.7 添加员工list.html中的添加按钮，跳转到添加页面，Get请求：```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加员工<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>```add.html的表单，传递员工信息并路由到/emp，Post请求``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123@qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>男      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>女      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getDepartmentName()}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2022-12-01 21:19<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>```Controller代码：``` java@GetMapping("/emp")public String toAddpage(Model model) {  // 查出所有部门的信息  Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Department</span><span class="token punctuation">></span></span> departments = departmentDao.getDepartments();  model.addAttribute("departments", departments);  return "emp/add";}@PostMapping("/emp")public String addEmp(Employee employee) {  // 添加  System.out.println(employee);  employeeDao.save(employee);  return "redirect:/emps";}```### 7.8 修改员工注意所有数据的日期格式需要统一（前后端也要统一），如在配置文件中加入以下配置：``` properties# 时间日期格式化spring.mvc.format.date=yyyy-MM-dd HH:mm```编辑按钮：``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/emp/<span class="token punctuation">'</span>+${emp.getId()}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>update.html表单，put请求需要过滤器处理，我不会，所以用post：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/updateEmp}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getLastName()}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getEmail()}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234567456@qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>1}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>男      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>0}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>女      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getDepartment().getId()<span class="token punctuation">=</span><span class="token punctuation">=</span>dept.getId()}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getDepartmentName()}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(employee.getBirth(),<span class="token punctuation">'</span>yyyy-MM-dd HH:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000/11/11<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>```Controller代码：```java// 去员工的修改页面@GetMapping("/emp/{id}")public String toUpdateEmp(@PathVariable("id") Integer id, Model model) {  // 查出原来的数据  Employee employee = employeeDao.getEmployeeById(id);  model.addAttribute("employee", employee);  // 查出所有部门的信息  Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Department</span><span class="token punctuation">></span></span> departments = departmentDao.getDepartments();  model.addAttribute("departments", departments);  return "emp/update";}@PostMapping("/updateEmp")public String updateEmp(Employee employee) {  employeeDao.update(employee);  return "redirect:/emps";}```### 7.9 删除员工删除按钮：``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/delemp/<span class="token punctuation">'</span>+${emp.getId()}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除员工</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delemp/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  employeeDao<span class="token punctuation">.</span><span class="token function">deleteEmployee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/emps"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-10-404页面"><a href="#7-10-404页面" class="headerlink" title="7.10 404页面"></a>7.10 404页面</h3><p>在静态资源中新建error文件夹，放入404.html文件。找不到资源，报404错误时便会跳转到该页面。同样也可以放入500.html等。</p><h3 id="7-11-注销"><a href="#7-11-注销" class="headerlink" title="7.11 注销"></a>7.11 注销</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LoginController中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>  session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/index.html"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-整合JDBC使用"><a href="#8-整合JDBC使用" class="headerlink" title="8. 整合JDBC使用"></a>8. 整合JDBC使用</h2><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220101223802789.png" alt="勾选JDBC相关依赖"></p><p>pom会自动导入两个依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- JDBC --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- MySQL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token comment" spellcheck="true">#    driver-class-name: com.mysql.jdbc.Driver</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JDCBController实现CRUD：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 查询数据库的所有信息</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM user"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maps<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 添加用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">addList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO user(`id`, `name`, `pwd`) values (8, 'bibilili', 'privilege')"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"save-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 修改用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"UPDATE user SET `name` = ?, pwd = ? WHERE id = "</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ECNU"</span><span class="token punctuation">;</span>    objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zzzz"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"update-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查询用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM user WHERE id = ?"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"delete-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-切换Druid数据源"><a href="#9-切换Druid数据源" class="headerlink" title="9. 切换Druid数据源"></a>9. 切换Druid数据源</h2><p>pom依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token comment" spellcheck="true">#    driver-class-name: com.mysql.jdbc.Driver</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment" spellcheck="true"># SpringBoot默认是不注入这些的，需要自己绑定</span>    <span class="token comment" spellcheck="true"># druid数据源专有配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span>    <span class="token comment" spellcheck="true">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span>    <span class="token comment" spellcheck="true">#则导入log4j 依赖就行</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionoProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写Druid配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后台监控功能</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServletRegistrationBean<span class="token operator">&lt;</span>StatViewServlet<span class="token operator">></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台需要登陆，账号密码配置</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加配置</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 登陆key，是固定的loginUsername和loginPassword</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 允许谁可以访问</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 禁止谁能防伪访问</span>    <span class="token comment" spellcheck="true">//        initParameters.put("techaoba", "192.168.xx.xx");</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置初始化参数</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 过滤器</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以设置过滤请求</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这些东西不进行过滤</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问localhost:8080/druid输入账号密码即可进入druid监控后台：</p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220102195046961.png" alt="druid后台"></p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220102194806830.png" alt="调用一次查询接口"></p><h2 id="10-整合MyBatis"><a href="#10-整合MyBatis" class="headerlink" title="10. 整合MyBatis"></a>10. 整合MyBatis</h2><p>整合包：mybatis-spring-boot-start</p><p>pom:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- mybatis依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true"># 整合mybatis</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.techaoba.pojo  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写UserMapper接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @Mapper表示这是一个mybatis的mapper类</span><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resources/mybatis/mapper下编写UserMapper.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM `user`  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM `user` WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO user(`id`, `name`, `pwd`) values (#{id}, #{name}, #{pwd})  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    UPDATE user SET `name` = ?, pwd = ? WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    DELETE FROM user WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller中便可调用接口中的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUserList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-SpringSecurity（安全）"><a href="#11-SpringSecurity（安全）" class="headerlink" title="11. SpringSecurity（安全）"></a>11. SpringSecurity（安全）</h2><p>在web开发中，安全第一位！</p><p>安全应该在设计之初。</p><p>权限分为：</p><ul><li>功能权限</li><li>访问权限</li><li>菜单权限</li></ul><p>之前使用拦截器和过滤器控制权限，需要大量原生代码～冗余。</p><h3 id="11-1-简介"><a href="#11-1-简介" class="headerlink" title="11.1 简介"></a>11.1 简介</h3><p>Spring Security时针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，它可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-sercurity模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>webSecurity ConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是“认证”和“授权”（访问控制）。</p><p>“认证”（Authentication）</p><p>“授权”（Authorization）</p><p>这个概念是通用的，并不是只在Spring Security中存在。</p><h3 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h3><p>pom:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>认证和授权配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 授权</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首页所有人可以访问，但是里面的功能页只有对应有权限的人才能访问</span>    <span class="token comment" spellcheck="true">// 请求授权的规则</span>    <span class="token comment" spellcheck="true">// 链式编程</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有权限默认会到登陆页面</span>    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 认证</span>  <span class="token comment" spellcheck="true">// 密码编码：PasswordEncoder</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在内存中虚拟一个数据，为不同用户设置不同身份</span>    auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"techaoba"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Component注解的范围最广，所有类都可以注解，但是@Configuration注解一般注解在这样的类上：这个类里面有@Value注解的成员变量和@Bean注解的方法，就是一个配置类。</p><ul><li>@configuration和@component相同点是都是注解在类上的注解。</li><li>Spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用 @Repository、@Service 和 @Controller 对分层中的类进行注释，而用 @Component 对那些比较中立的类进行注释。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP专题</title>
      <link href="2021/11/30/kmp-zhuan-ti/"/>
      <url>2021/11/30/kmp-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-KMP基本原理"><a href="#1、-KMP基本原理" class="headerlink" title="1、 KMP基本原理"></a>1、 KMP基本原理</h2><h3 id="1-1-匹配过程"><a href="#1-1-匹配过程" class="headerlink" title="1.1 匹配过程"></a>1.1 匹配过程</h3><p>KMP是一种时间复杂度达到O(M+N)的字符匹配算法，难点在于前缀数组prefix table的计算。步骤如下：</p><ul><li>计算匹配字符串每个前缀子串的<strong>最长相同前后缀长度</strong>。</li><li>在上一步计算的长度数组前加入-1，再整体后移一位得到prefix table。</li><li>进行字符串匹配，匹配失败把匹配串P的对应prefix位置拉到匹配失败的位置继续匹配，直到P匹配完毕。</li></ul><h3 id="1-2-prefix-table计算技巧"><a href="#1-2-prefix-table计算技巧" class="headerlink" title="1.2 prefix table计算技巧"></a>1.2 prefix table计算技巧</h3><p>现在再来看一个匹配串例子：</p><p>我们可以发现prefix table可以使用dp进行计算。对于匹配串P在第i+1次计算prefix值时判断字符P[i+1]和P[prefix[i] + 1]是否相等：</p><ul><li>相等 -&gt; prefix[i + 1] = prefix[i] + 1</li></ul><h3 id="1-3-代码"><a href="#1-3-代码" class="headerlink" title="1.3 代码"></a>1.3 代码</h3>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> KMP算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="2021/09/10/linux-chang-yong-ming-ling/"/>
      <url>2021/09/10/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><p>创建用户 <code>sudo useradd -m username</code> # 会自动创建用户的家目录</p><p>设定用户密码<code>sudo passwd xiaoming</code>  </p><p>解决新建用户无法使用tab键无法补全代码的问题：</p><p><code>vi /etc/passwd</code>；然后在相应用户后的/bin/sh改为/bin/bash，如</p><p><strong>/home/username:/bin/bash</strong>。</p><p>给予用于root权限:</p><ul><li>修改文件：<code>vim /etc/sudoers</code></li><li>添加权限：<code>root ALL=(ALL) ALL      username ALL=(ALL) ALL </code></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="解压操作"><a href="#解压操作" class="headerlink" title="解压操作"></a>解压操作</h3><p><strong>tar -xvf **.tar //解压tar包</strong></p><p><strong>tar -xzvf **.tar.gz // 解压tar.gz</strong></p><p><strong>tar -xjvf **.tar.bz2 //解压 tar.bz2</strong></p><p><strong>tar -xZvf **.tar.Z // 解压tar.Z</strong></p><p><strong>unrar **.rar //解压rar</strong></p><p><strong>unzip **.zip //解压zip</strong></p><p><strong>gunzip **.gz //解压gz</strong></p><p>tar命令参数bai解释：<br>-z参数：表示解压的是dutar.gz文件（如果是tar.bz2就是-j）<br>-x参数：表示是执行解压缩操作而不是打包操作<br>-v参数：表示列出解压时的详细消息<br>-f参数：指定要解压的文件名</p><h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><p>打包成tar.gz格式压缩包</p><pre><code># tar -zcvf renwolesshel.tar.gz /renwolesshel</code></pre><p>打包成tar.bz2格式压缩包</p><pre><code># tar -jcvf renwolesshel.tar.bz2 /renwolesshel</code></pre><p>压缩成zip格式</p><pre><code># zip -q -r renwolesshel.zip renwolesshel/</code></pre><h3 id="删除操作-rm"><a href="#删除操作-rm" class="headerlink" title="删除操作 rm"></a>删除操作 rm</h3><p>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思</p><blockquote><p>删除文件夹实例：<br>rm -rf /var/log/httpd/access<br>将会删除/var/log/httpd/access目录以及其下所有文件、文件夹</p></blockquote><blockquote><p>删除文件使用实例：<br>rm -f /var/log/httpd/access.log<br>将会强制删除/var/log/httpd/access.log这个文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB学习笔记</title>
      <link href="2021/09/10/mongodb-xue-xi-bi-ji/"/>
      <url>2021/09/10/mongodb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB学习笔记"><a href="#MongoDB学习笔记" class="headerlink" title="MongoDB学习笔记"></a>MongoDB学习笔记</h1><h2 id="1-Linux环境配置MongoDB"><a href="#1-Linux环境配置MongoDB" class="headerlink" title="1. Linux环境配置MongoDB"></a>1. Linux环境配置MongoDB</h2><h3 id="1-1-下载和安装"><a href="#1-1-下载和安装" class="headerlink" title="1.1 下载和安装"></a>1.1 下载和安装</h3><p>在<a href="https://www.mongodb.com/try/download/community">MongoDB官网下载</a>tgz文件，注意Version的格式x.y.z中y应选择偶数（稳定版）。上传文件至服务器。</p><p>解压文件<code>tar -zxvf mongodb-linux-x86_64-ubuntu1804-5.0.2.tgz</code></p><p>移动文件夹<code>mv mongodb-linux-x86_64-ubuntu1804-5.0.2 /usr/local/mongodb</code></p><p>新建几个目录，分别用来存储数据和日志、配置</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /usr/local/mongodb/datamkdir -p /usr/local/mongodb/logmkdir -p /usr/local/mongodb/conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建并修改配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/local/mongodb/conf/mongod.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：</p><pre><code>systemLog:  #MongoDB发送所有日志输出的目标指定为文件  destination: file  path: &quot;/usr/local/mongodb/log/mongod.log&quot;  logAppend: truestorage:  #mongod实例存储其数据的目录  dbPath: &quot;/usr/local/mongodb/data&quot;  journal:    #启用或禁用持久性日志以确保数据文件保持有效和可恢复。     enabled: trueprocessManagement:    #启用在后台运行mongos或mongod进程的守护进程模式。    fork: truenet:   #服务实例绑定的IP，默认是localhost    bindIp: 0.0.0.0   port: 27017</code></pre><h3 id="1-2-启动MongoDB服务"><a href="#1-2-启动MongoDB服务" class="headerlink" title="1.2 启动MongoDB服务"></a>1.2 启动MongoDB服务</h3><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/local/mongodb/bin/mongod -f conf/mongod.conf# 启动失败试试这条bin/mongod -f conf/mongod.conf --repair<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果启动后不是 successfully ，则是启动失败了。原因基本上就是配置文件有问题</p><p>使用navicat连接MongoDB：</p><p>若连接不上则关闭服务器的防火墙</p><pre><code># 安装防火墙(bushi)# apt install firewalld firewall-config# 查看防火墙状态systemctl status firewalld# 临时关闭防火墙systemctl stop firewalld# 开机禁止启动防火墙systemctl disable firewalld</code></pre><h3 id="1-3-关闭MongoDB服务"><a href="#1-3-关闭MongoDB服务" class="headerlink" title="1.3 关闭MongoDB服务"></a>1.3 关闭MongoDB服务</h3><pre class="line-numbers language-shell"><code class="language-shell">mongo --port 27017 # 切换到admin库 use admin # 关闭服务 db.shutdownServer()##### 或者直接killps -ef|grep mongokill -s 9 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-数据修复"><a href="#1-4-数据修复" class="headerlink" title="1.4 数据修复"></a>1.4 数据修复</h3><p>一旦数据损坏，则需要进行如下操作</p><h4 id="删除lock文件"><a href="#删除lock文件" class="headerlink" title="删除lock文件"></a>删除lock文件</h4><pre><code>rm -f  /usr/local/mongodb/data/*.lock</code></pre><h4 id="修复数据"><a href="#修复数据" class="headerlink" title="修复数据"></a>修复数据</h4><pre><code>/usr/local/mongdb/bin/mongod --repair --dbpath=/usr/local/mongodb/data</code></pre><h2 id="2-数据库的创建和删除"><a href="#2-数据库的创建和删除" class="headerlink" title="2. 数据库的创建和删除"></a>2. 数据库的创建和删除</h2><p>命令行进入mongodb,远程服务器键入<code>mongo</code></p><p>查看当前数据库信息：</p><p><code>show dbs</code> -&gt;admin   0.000GB  config  0.000GB  local   0.000GB（默认三个）</p><p>新建数据库:</p><p><code>use articledb</code> -&gt; 直接使用use创建新数据库</p><p>查看正在使用的数据库:</p><p><code>db</code></p><p>MongoDB 删除数据库：</p><pre><code>db.dropDatabase()</code></pre><p>提示：主要用来删除已经持久化的数据库</p><h2 id="3-集合的创建和删除"><a href="#3-集合的创建和删除" class="headerlink" title="3. 集合的创建和删除"></a>3. 集合的创建和删除</h2><p>集合，类似关系型数据库中的表。 可以显示的创建，也可以隐式的创建</p><h4 id="显式创建"><a href="#显式创建" class="headerlink" title="显式创建"></a>显式创建</h4><pre><code>db.createCollection(&quot;myCollection&quot;) </code></pre><h4 id="隐式创建"><a href="#隐式创建" class="headerlink" title="隐式创建"></a>隐式创建</h4><p>当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合,通常我们使用隐式创建文档即可</p><h5 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h5><pre><code>show collections 或show tables</code></pre><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><pre><code>db.集合名称.drop()</code></pre><p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p><h2 id="4-文档基本CRUD"><a href="#4-文档基本CRUD" class="headerlink" title="4. 文档基本CRUD"></a>4. 文档基本CRUD</h2><p>文档（document）的数据结构和 JSON 基本一样。 所有存储在集合中的数据都是 BSON 格式。和mysql一样可以单条插入也可以多条插入。</p><p><strong>单条插入</strong></p><p>使用insert() 或 save() 方法向集合中插入文档</p><pre><code>db.collection.insert(     &lt;document or array of documents&gt;,     &#123;         writeConcern: &lt;document&gt;,         ordered: &lt;boolean&gt;     &#125;)</code></pre><p>示例【隐式创建】：</p><pre><code>db.comment.insert(&#123;    &quot;articleid&quot;: &quot;100000&quot;,    &quot;content&quot;: &quot;今天天气真好，阳光明 媚&quot;,    &quot;userid&quot;: &quot;1001&quot;,    &quot;nickname&quot;: &quot;Rose&quot;,    &quot;createdatetime&quot;: new Date(),    &quot;likenum&quot;: NumberInt(10),    &quot;state&quot;: null&#125;)</code></pre><p>查询刚才插入的数据：</p><p><code>db.comment.find()</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hugging face的Transformer使用笔记</title>
      <link href="2021/09/07/hugging-face-de-transformer-shi-yong-bi-ji/"/>
      <url>2021/09/07/hugging-face-de-transformer-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="huggingface的Transformer学习笔记"><a href="#huggingface的Transformer学习笔记" class="headerlink" title="huggingface的Transformer学习笔记"></a>huggingface的Transformer学习笔记</h1><h2 id="1-快速入门之pipeline"><a href="#1-快速入门之pipeline" class="headerlink" title="1. 快速入门之pipeline"></a>1. 快速入门之pipeline</h2><p>首先需要在conda环境中安装最新版的transformers包<code>pip install -U transformers</code>。</p><h3 id="1-1-快速情感分析"><a href="#1-1-快速情感分析" class="headerlink" title="1.1 快速情感分析"></a>1.1 快速情感分析</h3><p>现在我们开始使用transformers中的pipeline完成情感分析任务吧！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipelineclassifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">)</span>results <span class="token operator">=</span> classifier<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"We are very sad to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"label: {result['label']}, with score: {round(result['score'], 4)}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># No model was supplied, defaulted to distilbert-base-uncased-finetuned-sst-2-english</span><span class="token comment" spellcheck="true"># label: NEGATIVE, with score: 0.9985</span><span class="token comment" spellcheck="true"># label: NEGATIVE, with score: 0.5309</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，huggingface的API使用起来还是非常方便的。在pipeline中指定任务类型是”sentiment-analysis”，在分类器中输入分类的句子便可以得到分类结果。</p><p>但这种方式会通过网络缓存情感分析任务的默认模型，在下一次使用的时候依然可能需要重新缓存，非常不方便。</p><h3 id="1-2-调用本地模型"><a href="#1-2-调用本地模型" class="headerlink" title="1.2 调用本地模型"></a>1.2 调用本地模型</h3><p>可以在<a href="https://huggingface.co/models">huggingface模型仓库</a>中选择合适的模型进行相关的任务。比如情感分析的默认模型distilbert-base-uncased-finetuned-sst-2-english，或者bert-base-multilingual-uncased-sentiment模型也可用于情感分析任务。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意lfs一定要安装，安装后才能使用git下载大文件</span>$ <span class="token function">git</span> lfs <span class="token function">install</span>$ <span class="token function">git</span> clone https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english<span class="token comment" spellcheck="true"># 或者安装bert-base-multilingual-uncased-sentiment模型</span>$ <span class="token function">git</span> clone https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里在本地使用git下载了模型。下面是调用本地模型的写法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token punctuation">,</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassification<span class="token comment" spellcheck="true"># 模型的地址</span>model_dir <span class="token operator">=</span> <span class="token string">"../BERT_DIR/bert-base-multilingual-uncased-sentiment"</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model_dir<span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span>results <span class="token operator">=</span> classifier<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"label: {result['label']}, with score: {round(result['score'], 4)}"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># label: 5 stars, with score: 0.7496</span><span class="token comment" spellcheck="true"># label: 5 stars, with score: 0.2365</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现两个模型虽然都是用于情感分类，但是output所呈现的格式有所不同。</p><p>上一个分类的label为POSITIVE和NEGATIVE，score是对应的置信度。而第二个分为了五个级别，星级越高表示越乐观。</p><p>huggingface中除了用于情感分类任务的模型外还有其他有趣的模型，比如Zero-Shot Classification模型对于用于自定义的labels进行分类预测，这里下载模型<code>git clone https://huggingface.co/typeform/distilbert-base-uncased-mnli</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token punctuation">,</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassificationmodel_dir <span class="token operator">=</span> <span class="token string">"../BERT_DIR/distilbert-base-uncased-mnli"</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"zero-shot-classification"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">"Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app."</span><span class="token punctuation">,</span>           candidate_labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"mobile"</span><span class="token punctuation">,</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token string">"billing"</span><span class="token punctuation">,</span> <span class="token string">"account access"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'sequence': 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.', </span><span class="token comment" spellcheck="true"># 'labels': ['mobile', 'billing', 'account access', 'website'], </span><span class="token comment" spellcheck="true"># 'scores': [0.6334261298179626, 0.13391011953353882, 0.12124086916446686, 0.1114228144288063]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>huggingface中对于一种预训练任务有多种模型，模型大小也在一定程度上决定了模型的性能。</p><h3 id="1-3-Tokenizer的使用"><a href="#1-3-Tokenizer的使用" class="headerlink" title="1.3 Tokenizer的使用"></a>1.3 Tokenizer的使用</h3><p>Tokenizer实际上是单词token和序号之间的映射字典。</p><pre class="line-numbers language-python"><code class="language-python">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'input_ids': [101, 1284, 1132, 1304, 2816, 1106, 1437, 1128, 1103, 25267, 3340, 119, 102],</span><span class="token comment" spellcheck="true"># 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],</span><span class="token comment" spellcheck="true"># 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际使用中会出现一次输入一个batch数据的情况。这时候我们希望batch中句子的长度保持一致（使用padding）；同时希望能尽量少的padding，达到batch中的最大长度以及不超过bert模型所能够支持的最大长度512。</p><pre class="line-numbers language-python"><code class="language-python">pt_batch <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    max_length<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>    return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> pt_batch<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{key}: {value.numpy().tolist()}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_ids: [[101, 1284, 1132, 1304, 2816, 1106, 1437, 1128, 1103, 25267, 3340, 119, 102], [101, 1284, 2810, 1128, 1274, 112, 189, 4819, 1122, 119, 102, 0, 0]]</span><span class="token comment" spellcheck="true"># token_type_ids: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</span><span class="token comment" spellcheck="true"># attention_mask: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-model的使用"><a href="#1-4-model的使用" class="headerlink" title="1.4 model的使用"></a>1.4 model的使用</h3><p>在对句子进行tokenizer预处理以后，则可以把值传给model了。</p><pre class="line-numbers language-python"><code class="language-python">pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>pt_outputs <span class="token operator">=</span> pt_model<span class="token punctuation">(</span><span class="token operator">**</span>pt_batch<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_outputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SequenceClassifierOutput(loss=None, logits=tensor([[-2.6407, -2.7451, -0.8407,  2.0394,  3.2070],</span><span class="token comment" spellcheck="true">#         [ 0.0064, -0.1258, -0.0503, -0.1655,  0.1329]],</span><span class="token comment" spellcheck="true">#        grad_fn=&lt;AddmmBackward>), hidden_states=None, attentions=None)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意现在还是logits数据，我们需要最后的激活函数，如SoftMax：</p><pre class="line-numbers language-python"><code class="language-python">pt_predictions <span class="token operator">=</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>pt_outputs<span class="token punctuation">.</span>logits<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_predictions<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[0.0022, 0.0019, 0.0131, 0.2332, 0.7496],</span><span class="token comment" spellcheck="true">#         [0.2084, 0.1826, 0.1969, 0.1755, 0.2365]], grad_fn=&lt;SoftmaxBackward>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现0.7496和0.2365即之前score的数值。</p><p>如果在模型输入的同时输入目标标签，输出会包含一个loss值：</p><pre class="line-numbers language-python"><code class="language-python">pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>pt_outputs <span class="token operator">=</span> pt_model<span class="token punctuation">(</span><span class="token operator">**</span>pt_batch<span class="token punctuation">,</span> labels<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_outputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SequenceClassifierOutput(loss=tensor(0.8650, grad_fn=&lt;NllLossBackward>), logits=tensor([[-2.6407, -2.7451, -0.8407,  2.0394,  3.2070],</span><span class="token comment" spellcheck="true">#         [ 0.0064, -0.1258, -0.0503, -0.1655,  0.1329]],</span><span class="token comment" spellcheck="true">#        grad_fn=&lt;AddmmBackward>), hidden_states=None, attentions=None)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦模型微调好，可以使用一下方式保存模型：</p><pre class="line-numbers language-python"><code class="language-python">tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>save_directory<span class="token punctuation">)</span>model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>save_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-术语"><a href="#2-术语" class="headerlink" title="2. 术语"></a>2. 术语</h2><h3 id="2-1-模型输入"><a href="#2-1-模型输入" class="headerlink" title="2.1 模型输入"></a>2.1 模型输入</h3><p>通常情况下模型只需要ids作为输入参数。ids是token的序号，换句话说是序列的数字表征。每个模型的tokenizer工作不同但是底层的机制是一模一样的，下面是BERT模型的tokenizer，可以用来分词：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertTokenizertokenizer <span class="token operator">=</span> BertTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"../BERT_DIR/bert-base-cased"</span><span class="token punctuation">)</span>sequence <span class="token operator">=</span> <span class="token string">"A Titan RTX has 24GB of VRAM"</span>tokenized_sequence <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokenized_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['A', 'Titan', 'R', '##T', '##X', 'has', '24', '##GB', 'of', 'V', '##RA', '##M']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tokenizer负责将序列划分为词汇表中可用的token。划分为的token要么为单词，要么为子词。比如VRAM将被划分为”V”, “RA”和”M”，但为了区分单词和子词，子词前加了双#前缀。这些token之后会以模型的规则转化为IDs。</p><p>而实际上这两步可以化作一步，直接喂入句子序列完成序列和ids的转化。</p><p><code>inputs = tokenizer(sequence)</code></p><pre class="line-numbers language-python"><code class="language-python">inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span>encoded_sequence <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [101, 138, 18696, 155, 1942, 3190, 1144, 1572, 13745, 1104, 159, 9664, 2107, 102]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在编码序列中自动加入了special token，如101表示分类器[CLS]，102表示分隔符[SEP]。</p><p>现在对encode序列进行解码：</p><pre class="line-numbers language-python"><code class="language-python">decoded_sequence <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_sequence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoded_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [CLS] A Titan RTX has 24GB of VRAM [SEP]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Attention-mask"><a href="#2-2-Attention-mask" class="headerlink" title="2.2 Attention mask"></a>2.2 Attention mask</h3><p>注意力掩码是在序列进行批处理时的一个可选参数。该参数表明了模型中哪些参数将会参与运算。现在考虑一下两个序列：</p><pre class="line-numbers language-python"><code class="language-python">sequence_a <span class="token operator">=</span> <span class="token string">"This is a short sequence."</span>sequence_b <span class="token operator">=</span> <span class="token string">"This is a rather long sequence. It is at least longer than the sequence A."</span>encoded_sequence_a <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span>encoded_sequence_b <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>encoded_sequence_a<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>encoded_sequence_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8 19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现两个序列的长度不一致，因此它们并不能放在同一个tensor当中。第一个序列需要扩充到与第二和序列长度为止，或者反过来对第二个序列进行截取。</p><p>在tokenizer中设置padding为True即可对序列进行填充：</p><pre class="line-numbers language-python"><code class="language-python">encoded_sequence_padding <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token punctuation">[</span>sequence_a<span class="token punctuation">,</span> sequence_b<span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_sequence_padding<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> encoded_sequence_padding<span class="token punctuation">[</span><span class="token string">"attention_mask"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[101, 1188, 1110, 170, 1603, 4954, 119, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], </span><span class="token comment" spellcheck="true"># [101, 1188, 1110, 170, 1897, 1263, 4954, 119, 1135, 1110, 1120, 1655, 2039, 1190, 1103, 4954, 138, 119, 102]]</span><span class="token comment" spellcheck="true"># [[1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], </span><span class="token comment" spellcheck="true"># [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Token-Type-IDs"><a href="#2-3-Token-Type-IDs" class="headerlink" title="2.3 Token Type IDs"></a>2.3 Token Type IDs</h3><p>有些模型会在一对句子上做分类任务，或者做问答任务时把文本和问题拼凑在一起。这时需要两个序列都会加入一个“input_ids”当中，而此时需要special token，CLS和SEP对句子进行划分。把两个序列作两个参数喂入tokenizer中（而不是list的方式）如下：</p><pre class="line-numbers language-python"><code class="language-python">sequence_a <span class="token operator">=</span> <span class="token string">"HuggingFace is based in NYC"</span>sequence_b <span class="token operator">=</span> <span class="token string">"Where is HuggingFace based?"</span>encoded_dict <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_a<span class="token punctuation">,</span> sequence_b<span class="token punctuation">)</span>decoded <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [CLS] HuggingFace is based in NYC [SEP] Where is HuggingFace based? [SEP]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样模型便知道序列的开始和结束位置。然而，有些模型（如bert）依然会使用token_type_ids来对两个不同的序列进行mask。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> huggingface </tag>
            
            <tag> Transformer </tag>
            
            <tag> 算法API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建实验室远程机器学习环境</title>
      <link href="2021/08/24/da-jian-shi-yan-shi-yuan-cheng-ji-qi-xue-xi-huan-jing/"/>
      <url>2021/08/24/da-jian-shi-yan-shi-yuan-cheng-ji-qi-xue-xi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建实验室远程机器学习环境"><a href="#搭建实验室远程机器学习环境" class="headerlink" title="搭建实验室远程机器学习环境"></a>搭建实验室远程机器学习环境</h1><h2 id="1-使用VPN加入实验室局域网"><a href="#1-使用VPN加入实验室局域网" class="headerlink" title="1. 使用VPN加入实验室局域网"></a>1. 使用VPN加入实验室局域网</h2><p>如果本身连接的网络就是学校的网络，可以省略这一步。</p><h2 id="2-使用FTP和SHELL工具"><a href="#2-使用FTP和SHELL工具" class="headerlink" title="2. 使用FTP和SHELL工具"></a>2. 使用FTP和SHELL工具</h2><h3 id="2-1-下载链接"><a href="#2-1-下载链接" class="headerlink" title="2.1 下载链接"></a>2.1 下载链接</h3><p>如果是windows用户可以使用官方免费的XFTP和XSHELL工具。</p><p><a href="https://www.netsarang.com/zh/free-for-home-school/">XTFP免费下载链接</a></p><p><a href="https://imgtu.com/i/hF6Ywj"><img src="https://z3.ax1x.com/2021/08/24/hF6Ywj.jpg" alt="远程工具"></a></p><p>填写姓名和邮箱选择两者，点击下载就会收到工具下载链接的邮件。</p><h3 id="2-2-XFTP使用方法"><a href="#2-2-XFTP使用方法" class="headerlink" title="2.2 XFTP使用方法"></a>2.2 XFTP使用方法</h3><p><a href="https://imgtu.com/i/hFRT2t"><img src="https://z3.ax1x.com/2021/08/24/hFRT2t.png" alt="XFTP链接配置"></a></p><p><strong>FTP工具主要用于FTP文件传输协议的工作，操作方便快捷，可以使用节点的文件拖拉即可实现文件在本地和远程服务器之间的上传下载。</strong></p><p><a href="https://imgtu.com/i/hFWLS1"><img src="https://z3.ax1x.com/2021/08/24/hFWLS1.png" alt="XFTP界面"></a></p><h3 id="2-3-XSHELL使用方法"><a href="#2-3-XSHELL使用方法" class="headerlink" title="2.3 XSHELL使用方法"></a>2.3 XSHELL使用方法</h3><p><a href="https://imgtu.com/i/hFoOld"><img src="https://z3.ax1x.com/2021/08/24/hFoOld.png" alt="XSHELL终端界面"></a></p><p>XSHELL就是一个远程终端，在自己电脑终端上也可以执行 <code>ssh username@ip</code> 完成远程终端操作。而是用XSHELL相对来说更好管理ssh资源。</p><h2 id="3-Anaconda环境的配置"><a href="#3-Anaconda环境的配置" class="headerlink" title="3. Anaconda环境的配置"></a>3. Anaconda环境的配置</h2><p>安装好XSHELL工具后连接自己的账号。</p><p>在<a href="https://www.anaconda.com/products/individual#Downloads">Anaconda官网下载</a>相应的安装包，下载适合服务器的版本，如Linux x86，在自己环境中Anaconda。</p><p>Anaconda环境的搭建：</p><ul><li>conda create -n myCondaEnv python=x.x         # 创建conda环境</li><li>conda info -e     # 查看所有conda环境</li><li>conda activate condaEnv      # 切换conda环境</li><li>conda list     # 查看conda环境中安转的包信息</li><li>conda install xxx=3.1.x || pip install  xxx==3.1.x      # 安装工具包以及对应版本</li><li>conda deactivate    # 退出conda环境</li><li>conda remove -n condaEnv –all      # 删除conda环境</li></ul><h2 id="4-PyCharm远程环境的搭建"><a href="#4-PyCharm远程环境的搭建" class="headerlink" title="4. PyCharm远程环境的搭建"></a>4. PyCharm远程环境的搭建</h2><p>诸如PyCharm，Idea，Clion的JetBrain全家桶都可以使用学生邮箱申请免费使用的，一次申请就是一年，因为可以免费使用直接就下载<strong>Ultimate</strong>或者<strong>Professional</strong>版本。</p><h3 id="4-1-配置PyCharm工程路径"><a href="#4-1-配置PyCharm工程路径" class="headerlink" title="4.1 配置PyCharm工程路径"></a>4.1 配置PyCharm工程路径</h3><p>选择Tools -&gt; Deployment -&gt; Configuration</p><p><a href="https://imgtu.com/i/hnb3Ue"><img src="https://z3.ax1x.com/2021/08/26/hnb3Ue.jpg" alt="路径配置1"></a></p><p>Connection连接配置</p><p><a href="https://imgtu.com/i/hnLr1s"><img src="https://z3.ax1x.com/2021/08/26/hnLr1s.jpg" alt="路径配置2"></a></p><p>Mappings映射配置</p><p><a href="https://imgtu.com/i/hnORKI"><img src="https://z3.ax1x.com/2021/08/26/hnORKI.jpg" alt="路径配置3"></a></p><h3 id="4-2-配置Python解析器"><a href="#4-2-配置Python解析器" class="headerlink" title="4.2 配置Python解析器"></a>4.2 配置Python解析器</h3><p>在File-&gt;Setting中找到Python Interpreter.</p><p><a href="https://imgtu.com/i/hnXhl9"><img src="https://z3.ax1x.com/2021/08/26/hnXhl9.jpg" alt="Python解析器"></a></p><p>SSH Interpreter 配置</p><p><a href="https://imgtu.com/i/hnv5a6"><img src="https://z3.ax1x.com/2021/08/26/hnv5a6.jpg" alt="SSH Interpreter配置1"></a></p><p><a href="https://imgtu.com/i/hnxhlQ"><img src="https://z3.ax1x.com/2021/08/26/hnxhlQ.jpg" alt="SSH Interpreter配置2"></a></p><p>配置完后，本地添加的代码会自动同步到服务器上，可以直接在服务器上执行项目代码啦～～</p><h2 id="5-PyCharm远程debug"><a href="#5-PyCharm远程debug" class="headerlink" title="5. PyCharm远程debug"></a>5. PyCharm远程debug</h2><p>在Pycharm中配置run的参数。选择Run-&gt;Edit Configuration</p><p><a href="https://imgtu.com/i/hG1uRA"><img src="https://z3.ax1x.com/2021/08/29/hG1uRA.jpg" alt="配置run参数1"></a></p><p><a href="https://imgtu.com/i/hG3r6I"><img src="https://z3.ax1x.com/2021/08/29/hG3r6I.jpg" alt="配置run参数2"></a></p><p>在程序中打断电，debug。查看各参数的状态值。</p><p><a href="https://imgtu.com/i/hG3Wtg"><img src="https://z3.ax1x.com/2021/08/29/hG3Wtg.jpg" alt="debug"></a></p><h2 id="6-tmux的使用"><a href="#6-tmux的使用" class="headerlink" title="6. tmux的使用"></a>6. tmux的使用</h2><p>打开一个远程窗口跑模型。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p><p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。<strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p><p>使用命令：</p><p><code>tmux</code>  # 新建tmux会话（编号）</p><p><code>tmux new -s &lt;session-name&gt;</code>   # 新建会话并起名字（推荐）</p><p><code>tmux ls</code>    # 查看当前所有的 tmux 会话</p><p><code>tmux attach -t 0</code>   #   使用会话编号连入会话</p><p><code>tmux attach -t &lt;session-name&gt;</code>  # 使用会话名称连入会话</p><p><code>tmux kill-session -t 0</code>   # 使用会话编号杀死会话</p><p><code>tmux kill-session -t &lt;session-name&gt;</code>   # 使用会话名称杀死会话</p>]]></content>
      
      
      <categories>
          
          <category> 服务器环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器环境 </tag>
            
            <tag> 机器学习环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习</title>
      <link href="2021/08/20/pytorch-xue-xi/"/>
      <url>2021/08/20/pytorch-xue-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mofanpy.com/tutorials/machine-learning/torch/">莫烦教程原文链接</a></p><h1 id="Numpy-amp-Torch"><a href="#Numpy-amp-Torch" class="headerlink" title="Numpy &amp; Torch"></a>Numpy &amp; Torch</h1><p>Torch可以将tensor放在GPU中加速运算，就像Numpy会把array放在CPU中加速运算。不过两者之间可以很好的兼容，以下上二者之间的转化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp_data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>torch_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np_data<span class="token punctuation">)</span>tensor2array <span class="token operator">=</span> torch_data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nnumpy array:'</span><span class="token punctuation">,</span> np_data<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># numpy array: [[0 1 2] \n [3 4 5]]</span>    <span class="token string">'\ntorch tensor:'</span><span class="token punctuation">,</span> torch_data<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># torch tensor: tensor([[0, 1, 2], [3, 4, 5]])</span>    <span class="token string">'\ntensor to array:'</span><span class="token punctuation">,</span> tensor2array<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># tensor to array: [[0 1 2] \n [3 4 5]]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而其实两者中的很多运算操作都如出一辙：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># abs 绝对值计算</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换成32位浮点 tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nabs'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># [1 2 1 2]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># tensor([1., 2., 1., 2.])</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sin   三角函数 sin</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nsin'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># [-0.84147098 -0.90929743  0.84147098  0.90929743]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># tensor([-0.8415, -0.9093,  0.8415,  0.9093])</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># mean  均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nmean'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 0.0</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># tensor(0.)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵乘法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># matrix multiplication 矩阵点乘</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换成32位浮点 tensor</span><span class="token comment" spellcheck="true"># correct method</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nmatrix multiplication (matmul)'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># [[7, 10], [15, 22]]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># torch:  tensor([[ 7., 10.], [15., 22.]])</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h1><p><code>from torch.autograd import Variable</code></p><p>Variable是一个可以参与模型计算反向传递过程的参数类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable     <span class="token comment" spellcheck="true"># torch 中 Variable模块</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把tensor张量放入Variable参与梯度计算,requires_grad是参不参与误差反向传播, 要不要计算梯度</span>variable <span class="token operator">=</span> Variable<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]], requires_grad=True)</span>t_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tensor <span class="token operator">*</span> tensor<span class="token punctuation">)</span>v_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>variable <span class="token operator">*</span> variable<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t_out<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># tensor(7.5000)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v_out<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># tensor(7.5000, grad_fn=&lt;MeanBackward0>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到目前为止, 我们看不出什么不同, <strong>但是时刻记住, Variable 计算时, 它在背景幕布后面一步步默默地搭建着一个庞大的系统, 叫做计算图, computational graph. 这个图是用来干嘛的? 原来是将所有的计算步骤 (节点) 都连接起来, 最后进行误差反向传递的时候, 一次性将所有 variable 里面的修改幅度 (梯度) 都计算出来, 而 tensor 就没有这个能力啦.</strong></p><p><code>v_out = torch.mean(variable*variable)</code> 就是在计算图中添加的一个计算步骤, 计算误差反向传递的时候有他一份功劳, 我们就来举个例子:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># v_out = 1/4 * sum(variable*variable) 这是计算图中的 v_out 计算步骤</span><span class="token comment" spellcheck="true"># 针对于 v_out 的梯度就是, d(v_out)/d(variable) = 1/4*2*variable = variable/2</span>v_out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[0.5000, 1.0000],</span><span class="token comment" spellcheck="true">#         [1.5000, 2.0000]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取 Variable 里面的数据</strong></p><p>直接<code>print(variable)</code>只会输出 Variable 形式的数据, 在很多时候是用不了的(比如想要用 plt 画图), 所以我们要转换一下, 将它变成 tensor 形式.</p><p>variable -&gt; Variable形式</p><p>variable.data -&gt; tensor形式</p><p>variable.data.numpy() -&gt; numpy形式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Variable形式</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]], requires_grad=True)</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tensor 形式</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># numpy 形式</span><span class="token comment" spellcheck="true"># [[1. 2.]</span><span class="token comment" spellcheck="true">#  [3. 4.]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Torch的激活函数"><a href="#Torch的激活函数" class="headerlink" title="Torch的激活函数"></a>Torch的激活函数</h1><p>relu, sigmoid, tanh, softplus</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F     <span class="token comment" spellcheck="true"># 激活函数都在这</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>x <span class="token operator">=</span> Variable<span class="token punctuation">(</span>x<span class="token punctuation">)</span>x_np <span class="token operator">=</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 换成 numpy array，出图时使用</span><span class="token comment" spellcheck="true"># 激活函数</span>y_relu <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_sigmoid <span class="token operator">=</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_tanh <span class="token operator">=</span> F<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_softplus <span class="token operator">=</span> F<span class="token punctuation">.</span>softplus<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_relu<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_sigmoid<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_tanh<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'tanh'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_softplus<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'softplus'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fXvxsK"><img src="https://z3.ax1x.com/2021/08/20/fXvxsK.jpg" alt="激活函数"></a></p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F     <span class="token comment" spellcheck="true"># 激励函数都在这</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x data (tensor), shape = (100, 1)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画图</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy())</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 继承torch的Module</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 继承 __init__ 功能</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 隐藏层线性输出</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出层线性输出</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span>n_feature<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_hidden<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> n_output<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(net)</span><span class="token triple-quoted-string string">"""Net(  (hidden): Linear(in_features=1, out_features=10, bias=True)  (predict): Linear(in_features=10, out_features=1, bias=True))"""</span><span class="token comment" spellcheck="true"># optimizer 是训练工具</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># SGD随机梯度下降</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># 预测值和真实值的误差计算公式（均方差）</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 画图</span>net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prediction <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 预测值</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>y<span class="token punctuation">,</span> prediction<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 误差</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 清空上一步的残余更新参数值</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 误差反向传播，计算参数更新值</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 将参数更新值施加到net的parameters上</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">2000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},loss:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># plot and show learning process</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Loss=%.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fvY9Vx"><img src="https://z3.ax1x.com/2021/08/21/fvY9Vx.jpg" alt="回归例子"></a></p><h1 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 假数据</span>n_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 100个数据，每个数据两个坐标</span>x0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 类型0 x data（tensor），shape=（100, 2）。正态分布，标准差std=1</span>y0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 类型0 y data（tensor），shape=（100,）</span>x1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 类型1 x data（tensor），shape=（100, 2）。正态分布，标准差std=1</span>y1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 类型1 y data（tensor），shape=（100,）</span><span class="token comment" spellcheck="true"># 注意x, y数据形式一定要像下面一样  torch.cat((a, b), dim) 按照dim维度把a和b拼接起来</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># FloatTensor = 32-bit floating</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># LongTensor = 64-bit integer</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy())</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=y.data.numpy(), s=100, lw=0, cmap='RdYlGn')</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment" spellcheck="true"># 输入（x，y），输出[0, 1]表示标签1，输出[1, 0]表示标签0，即二分类</span>net <span class="token operator">=</span> Net<span class="token punctuation">(</span>n_feature<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_hidden<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> n_output<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 交互模式</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>out<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        pred_y <span class="token operator">=</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        target_y <span class="token operator">=</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>pred_y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdYlGn'</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> target_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true"># 预测中有多少和真实值一样</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Accuracy=%.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 停止画图</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220225194859916.png" alt="image-20220225194859916"></p><h1 id="使用nn-Sequential快速搭建神经网络"><a href="#使用nn-Sequential快速搭建神经网络" class="headerlink" title="使用nn.Sequential快速搭建神经网络"></a>使用nn.Sequential快速搭建神经网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltn_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>x0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">)</span>net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>out<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        pred_y <span class="token operator">=</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        target_y <span class="token operator">=</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>pred_y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdYlGn'</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> target_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true"># 预测中有多少和真实值一样</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Accuracy=%.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 停止画图</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="保存和提取网络"><a href="#保存和提取网络" class="headerlink" title="保存和提取网络"></a>保存和提取网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># fake data</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># x data(tensor), shape=(100, 1)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># noisy y data(tensor), shape=(100, 1)</span><span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># save net1</span>    net1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prediction <span class="token operator">=</span> net1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>y<span class="token punctuation">,</span> prediction<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot result</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2 ways to save the net</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> <span class="token string">'net.pkl'</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># save the entire net</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'net_params.pkl'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># save only the parameters</span><span class="token keyword">def</span> <span class="token function">restore_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'net.pkl'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot net2 result</span>    prediction <span class="token operator">=</span> net2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">restore_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net3 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    net3<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'net_params.pkl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot net3 result</span>    prediction <span class="token operator">=</span> net3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save net1 net2_params</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># restore entire net(may slow)</span>restore_net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># restore only the net parameters</span>restore_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220225194951449.png" alt="image-20220225194951449"></p><h1 id="批训练"><a href="#批训练" class="headerlink" title="批训练"></a>批训练</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> DataBATCH_SIZE <span class="token operator">=</span> <span class="token number">5</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 1 2 3 4...</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 10 9 8 7...</span>torch_dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    dataset<span class="token operator">=</span>torch_dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>batch_x<span class="token punctuation">,</span> batch_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># train your data...</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| Step: '</span><span class="token punctuation">,</span> step<span class="token punctuation">,</span> <span class="token string">'| batch x: '</span><span class="token punctuation">,</span>                  batch_x<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'| batch y: '</span><span class="token punctuation">,</span> batch_y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    show_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""Epoch:  0 | Step:  0 | batch x:  [ 6. 10.  5.  8.  3.] | batch y:  [5. 1. 6. 3. 8.]Epoch:  0 | Step:  1 | batch x:  [1. 4. 7. 9. 2.] | batch y:  [10.  7.  4.  2.  9.]Epoch:  1 | Step:  0 | batch x:  [2. 8. 4. 9. 3.] | batch y:  [9. 3. 7. 2. 8.]Epoch:  1 | Step:  1 | batch x:  [ 5. 10.  1.  7.  6.] | batch y:  [ 6.  1. 10.  4.  5.]Epoch:  2 | Step:  0 | batch x:  [10.  5.  4.  1.  3.] | batch y:  [ 1.  6.  7. 10.  8.]Epoch:  2 | Step:  1 | batch x:  [9. 6. 8. 7. 2.] | batch y:  [2. 5. 3. 4. 9.]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Optimizer优化器"><a href="#Optimizer优化器" class="headerlink" title="Optimizer优化器"></a>Optimizer优化器</h1><p>可视化’SGD’, ‘Momentum’, ‘RMSProp’, ‘Adam’四种优化器随步数的优化效果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># hyper parameters</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>EPOCH <span class="token operator">=</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># fake dataset</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># torch.Size([1000, 1])</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot dataset</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># DataLoader</span>torch_dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    dataset<span class="token operator">=</span>torch_dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>net_SGD         <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_Momentum    <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_RMSprop     <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_Adam        <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>nets <span class="token operator">=</span> <span class="token punctuation">[</span>net_SGD<span class="token punctuation">,</span> net_Momentum<span class="token punctuation">,</span> net_RMSprop<span class="token punctuation">,</span> net_Adam<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># different optimizers</span>opt_SGD         <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net_SGD<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>opt_Momentum    <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net_Momentum<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>opt_RMSprop     <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>net_RMSprop<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>opt_Adam         <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_Adam<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizers <span class="token operator">=</span> <span class="token punctuation">[</span>opt_SGD<span class="token punctuation">,</span> opt_Momentum<span class="token punctuation">,</span> opt_RMSprop<span class="token punctuation">,</span> opt_Adam<span class="token punctuation">]</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>losses_his <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 记录training时不同神经网络的loss</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 对每个优化器，优化属于它的神经网络</span>        <span class="token keyword">for</span> net<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> l_his <span class="token keyword">in</span> zip<span class="token punctuation">(</span>nets<span class="token punctuation">,</span> optimizers<span class="token punctuation">,</span> losses_his<span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> net<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># get output for every net</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># compute loss for every net</span>            opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># clear gradients for next train</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># backpropagation, compute gradients</span>            opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># apply gradients</span>            l_his<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SGD'</span><span class="token punctuation">,</span> <span class="token string">'Momentum'</span><span class="token punctuation">,</span> <span class="token string">'RMSProp'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> l_his <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>losses_his<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>l_his<span class="token punctuation">,</span> label<span class="token operator">=</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Steps'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220226134502901.png" alt="image-20220226134502901"></p><h1 id="CNN网络"><a href="#CNN网络" class="headerlink" title="CNN网络"></a>CNN网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torchvision          <span class="token comment" spellcheck="true"># 数据库模块</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># reproducible</span><span class="token comment" spellcheck="true"># Hyper Parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">5</span>                   <span class="token comment" spellcheck="true"># 训练整批数据多少次</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">50</span>LR <span class="token operator">=</span> <span class="token number">0.001</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>       <span class="token comment" spellcheck="true"># 如果已经下载了mnist就改为False</span>MNIST_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span><span class="token comment" spellcheck="true"># Mnist 手写数字 训练数据</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 保存或者提取的路径</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># this is training data</span>    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 把PIL.Image or numpy.ndarray转换成</span>                                                    <span class="token comment" spellcheck="true"># torch.FloatTensor(C x H x W),训练的时候normalize成[0, 1]区间</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 没下载就下载，下载了就不用再下载了</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot one example</span><span class="token comment" spellcheck="true"># print(train_data.data.size())           # torch.Size([60000, 28, 28])</span><span class="token comment" spellcheck="true"># print(train_data.targets.size())        # torch.Size([60000])</span><span class="token comment" spellcheck="true"># plt.imshow(train_data.data[0].numpy(), cmap='gray')</span><span class="token comment" spellcheck="true"># plt.title('%i' % train_data.targets[0])</span><span class="token comment" spellcheck="true"># plt.show()</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>     <span class="token comment" spellcheck="true"># input shape(1, 28, 28)</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>                in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># input height(图片的厚度，RGB为3，此处为灰度)</span>                out_channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 使用卷积核的数量，16表示用16个卷积核分别对图片进行卷积，输出16通道的数据</span>                kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># 卷积核的尺寸为5x5，结合out_channels可知filter维数是5x5x16</span>                stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true"># 每次卷级跳动的步长</span>                padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true"># 边缘填充的像素个数，当stride=1时，想要con2d出来的图片长宽没有变化</span>                                            <span class="token comment" spellcheck="true"># ，padding=(kernel_size - 1) / 2</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token comment" spellcheck="true"># -> (16, 28, 28)</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token comment" spellcheck="true"># activation</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 在 2x2空间里向下采样  ->(16, 14, 14)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>         <span class="token comment" spellcheck="true"># input shape(16, 14, 14)</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># output shape(32, 14, 14)</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true"># output shape(32, 7, 7)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># -> (batch, 32, 7, 7)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># -> (batch, 32 * 7 * 7)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> outputcnn <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>cnn<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cnn<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""CNN(  (conv1): Sequential(    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))    (1): ReLU()    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)  )  (conv2): Sequential(    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))    (1): ReLU()    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)  )  (out): Linear(in_features=1568, out_features=10, bias=True))"""</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0, 1)</span>    test_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>test_data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">.</span>    test_y <span class="token operator">=</span> test_data<span class="token punctuation">.</span>targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span>    test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>cnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># training and testing</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x<span class="token punctuation">,</span> b_y <span class="token operator">=</span> b_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> b_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># cnn output</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># cross entropy loss</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                test_output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>                pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>                accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> test_y<span class="token punctuation">)</span> <span class="token operator">/</span> test_y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'| test accuracy: %.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print 10 predictions from test data</span>    test_output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>test_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pred_y<span class="token punctuation">,</span> <span class="token string">'prediction number'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'real number'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220226155530433.png" alt="image-20220226155530433"></p><h1 id="RNN网络"><a href="#RNN网络" class="headerlink" title="RNN网络"></a>RNN网络</h1><h2 id="RNN做分类问题"><a href="#RNN做分类问题" class="headerlink" title="RNN做分类问题"></a>RNN做分类问题</h2><p>torch.nn.LSTM()中的参数：</p><ul><li>input_size: 输入数据的特征维数，通常是embedding_dim(词向量维度)</li><li>hidden_size：LSTM中隐层的维度</li><li>num_layers：循环神经网络的层数</li><li>batch_first：一定设置为True，保证输入数据shape=(batch_size, seq_length, embedding_dim)不会出错。否则需要将batch_size和seq_length这两个维度进行调换</li><li>bidirectional：默认是False，代表不用双向LSTM</li></ul><p>输入数据包括：</p><ul><li>input就是shape=(seq_length, batch_size, input_size)的张量</li><li>h_0是shape=(num_layers*num_directions,batch_size,hidden_size)的张量，它包含了在当前这个batch_size中每个句子的初始隐藏状态。其中num_layers就是LSTM的层数。如果bidirectional=True,num_directions=2,否则就是１，表示只有一个方向。</li><li>c_0和h_0的形状相同，它包含的是在当前这个batch_size中的每个句子的初始细胞状态。h_0,c_0如果不提供，那么默认是0。</li></ul><p>输出数据包括：</p><ul><li>output的shape=(seq_length,batch_size,num_directions*hidden_size),<br>它包含的是LSTM的最后一时间步的输出特征(h_t),ｔ是batch_size中每个句子的长度。</li><li>h_n.shape==(num_directions * num_layers,batch,hidden_size)</li><li>c_n.shape==h_n.shape</li><li>h_n包含的是句子的最后一个单词（也就是最后一个时间步）的隐藏状态，c_n包含的是句子的最后一个单词的细胞状态，所以它们都与句子的长度seq_length无关</li><li>output[-1]与h_n是相等的，因为output[-1]包含的正是batch_size个句子中每一个句子的最后一个单词的隐藏状态，注意LSTM中的隐藏状态其实就是输出，cell state细胞状态才是LSTM中一直隐藏的，记录着信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> dsets<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Datatorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># reproducible</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda:0'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hyper parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">5</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">64</span>TIME_STEP <span class="token operator">=</span> <span class="token number">28</span>                  <span class="token comment" spellcheck="true"># rnn 时间步数 / 图片高度         (height)</span>INPUT_SIZE <span class="token operator">=</span> <span class="token number">28</span>                 <span class="token comment" spellcheck="true"># rnn 每步输入值 / 图片每行像素    (width)</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>          <span class="token comment" spellcheck="true"># 如果已经下载mnist设置为False</span>DOWNLOAD_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span><span class="token comment" spellcheck="true"># Mnist 手写数字</span>train_data <span class="token operator">=</span> dsets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>DOWNLOAD_DIR<span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true"># This is training data</span>    transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 把PIL.Image or numpy.ndarray转换成</span>                                        <span class="token comment" spellcheck="true"># torch.FloatTensor(C x H x W),训练的时候normalize成[0, 1]区间</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> dsets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span>DOWNLOAD_DIR<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>            input_size<span class="token operator">=</span>INPUT_SIZE<span class="token punctuation">,</span>            hidden_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># rnn hidden unit</span>            num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># number of rnn layer</span>            batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># input &amp; output will has batch size as first dimension. </span>                                    <span class="token comment" spellcheck="true"># e.g. (batch, time_step, input_size()</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x shape (batch, time_step, input_size)</span>        <span class="token comment" spellcheck="true"># r_out shape (batch, time_step, output_size)</span>        <span class="token comment" spellcheck="true"># h_c shape (n_layers, batch, hidden_size)</span>        r_out<span class="token punctuation">,</span> <span class="token punctuation">(</span>h_n<span class="token punctuation">,</span> h_c<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># choose r_out at the last time step</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>r_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># (batch, time step, input)</span>        <span class="token keyword">return</span> outrnn <span class="token operator">=</span> RNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">)</span>rnn<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""RNN(  (rnn): LSTM(28, 64, batch_first=True)  (out): Linear(in_features=64, out_features=10, bias=True))"""</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    test_x <span class="token operator">=</span> test_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>       <span class="token comment" spellcheck="true"># shape(2000, 28, 28) value in rag=nge(0, 1)</span>    test_y <span class="token operator">=</span> test_data<span class="token punctuation">.</span>targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span>    test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># training ans testing</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x <span class="token operator">=</span> b_x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># reshape x to (batch, time_step, input_size)</span>            b_y <span class="token operator">=</span> b_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                test_output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>                pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>                accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> test_y<span class="token punctuation">)</span> <span class="token operator">/</span> test_y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token string">'| test accuracy: %.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print 10 predictions from test data</span>        test_output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>test_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pred_y<span class="token punctuation">,</span> <span class="token string">'prediction number'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>test_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'real number'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""......Epoch:  4 | train loss: 0.0176 | test accuracy: 0.97Epoch:  4 | train loss: 0.0116 | test accuracy: 0.98Epoch:  4 | train loss: 0.0938 | test accuracy: 0.97Epoch:  4 | train loss: 0.0401 | test accuracy: 0.97[7 2 1 0 4 1 4 9 5 9] prediction number[7 2 1 0 4 1 4 9 5 9] real number"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="RNN做回归问题"><a href="#RNN做回归问题" class="headerlink" title="RNN做回归问题"></a>RNN做回归问题</h2><p>任务：希望使用sin蓝色曲线拟合（预测）cos红色曲线。</p><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302104347936.png" alt="image-20220302104347936"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hyper parameters</span>TIME_STEP <span class="token operator">=</span> <span class="token number">14</span>              <span class="token comment" spellcheck="true"># rnn time step / 输入序列的数量</span>INPUT_SIZE <span class="token operator">=</span> <span class="token number">1</span>              <span class="token comment" spellcheck="true"># rnn input size / 输入序列的长度</span>LR <span class="token operator">=</span> <span class="token number">0.02</span>EPOCHS <span class="token operator">=</span> <span class="token number">1000</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># show data</span><span class="token comment" spellcheck="true"># steps = np.linspace(0, 2 * np.pi, 100, dtype=np.float)  # float for converting torch FloatTensor</span><span class="token comment" spellcheck="true"># x_np = np.sin(steps)</span><span class="token comment" spellcheck="true"># y_np = np.cos(steps)</span><span class="token comment" spellcheck="true"># plt.plot(steps, x_np, 'b-', label='input(sin)')</span><span class="token comment" spellcheck="true"># plt.plot(steps, y_np, 'r-', label='target(cos)')</span><span class="token comment" spellcheck="true"># plt.legend(loc='best')</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">RNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>            input_size<span class="token operator">=</span>INPUT_SIZE<span class="token punctuation">,</span>            hidden_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># rnn hidden unit</span>            num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># 有几层RNN layers</span>            batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x -> (batch_size, time_step, input_size)</span>        <span class="token comment" spellcheck="true"># h_state -> (n_layers, batch_size, hidden_size)</span>        <span class="token comment" spellcheck="true"># r_out -> (batch_size, time_step, hidden_size)</span>        r_out<span class="token punctuation">,</span> h_state <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span>        outs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> time_step <span class="token keyword">in</span> range<span class="token punctuation">(</span>r_out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>r_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> time_step<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>outs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h_staternn <span class="token operator">=</span> RNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>h_state <span class="token operator">=</span> None          <span class="token comment" spellcheck="true"># initial h_state as None</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCHS<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">,</span> end <span class="token operator">=</span> epoch <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi       <span class="token comment" spellcheck="true"># time steps</span>    <span class="token comment" spellcheck="true"># use sin predicts cos</span>    steps <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> TIME_STEP<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    x_np <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>    y_np <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x_np<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># shape (batch, time_step, input_size)</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>y_np<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    prediction<span class="token punctuation">,</span> h_state <span class="token operator">=</span> rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># !! next step is important !!</span>    h_state <span class="token operator">=</span> h_state<span class="token punctuation">.</span>data    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">49</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>steps<span class="token punctuation">,</span> y_np<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>steps<span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302124812724.png" alt="image-20220302124812724"></p><h1 id="AutoEncoder自编码"><a href="#AutoEncoder自编码" class="headerlink" title="AutoEncoder自编码"></a>AutoEncoder自编码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token keyword">from</span>  matplotlib <span class="token keyword">import</span>  cm<span class="token comment" spellcheck="true"># Hyper Parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">10</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">64</span>LR <span class="token operator">=</span> <span class="token number">0.005</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>MNIST_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span>N_TEST_IMG <span class="token operator">=</span> <span class="token number">5</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # plot one example</span><span class="token comment" spellcheck="true"># print(train_data.data.size())               # (60000, 28, 28)</span><span class="token comment" spellcheck="true"># print(train_data.targets.size())            # (60000)</span><span class="token comment" spellcheck="true"># plt.imshow(train_data.data[2].numpy(), cmap='gray')     # 展示第3个数据</span><span class="token comment" spellcheck="true"># plt.title('%i' % train_data.targets[2])</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">AutoEncoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AutoEncoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>encode <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># compress to 3 features which can be visualized in plt</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true"># compress to a range (0, 1)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        encoded <span class="token operator">=</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        decoded <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>encoded<span class="token punctuation">)</span>        <span class="token keyword">return</span> encoded<span class="token punctuation">,</span> decodedautoencoder <span class="token operator">=</span> AutoEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># the image batch shape will be (64, 1, 28, 28)</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>autoencoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># initialize figure</span>    f<span class="token punctuation">,</span> a <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N_TEST_IMG<span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># continuously plot</span>    <span class="token comment" spellcheck="true"># original data (first row) for viewing</span>    view_data <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_data<span class="token punctuation">[</span><span class="token punctuation">:</span>N_TEST_IMG<span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N_TEST_IMG<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>view_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># batch x, shape (batch, 28*28)</span>            b_y <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># batch y, shape (batch, 28*28)</span>            encoded<span class="token punctuation">,</span> decoded <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>decoded<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># plotting decoded image (second row)</span>                _<span class="token punctuation">,</span> decoded_data <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>view_data<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N_TEST_IMG<span class="token punctuation">)</span><span class="token punctuation">:</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>decoded_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                plt<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>                plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># visualize in 3D plot</span>    view_data <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    encoded_data<span class="token punctuation">,</span> _ <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>view_data<span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>    X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z <span class="token operator">=</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    values <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s <span class="token keyword">in</span> zip<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> cm<span class="token punctuation">.</span>rainbow<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> s <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s<span class="token punctuation">,</span> backgroundcolor<span class="token operator">=</span>c<span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span>X<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span>Y<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_zlim<span class="token punctuation">(</span>Z<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Z<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302133439077.png" alt="image-20220302133439077"></p><h1 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h1><p>目标：希望在训练集（红色）上学习到的模型能够较好的拟合测试数据（蓝色）。</p><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302143159789.png" alt="image-20220302143159789"></p><p>dropout使用方法：在映射层和激活层之间加入<code>nn.dropout(alpha)</code>，alpha为dropout的占比。<font color='red'>注意，Dropout只在训练时使用，预测时需要屏蔽掉Dropout</font>。切换为预测模式<code>net_dropped.eval()</code>，预测模式下Dropout功能会被屏蔽，因此如果后面还需要训练，需要再次切换为训练模式<code>net_dropped.train()</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnN_SAMPLES <span class="token operator">=</span> <span class="token number">20</span>N_HIDDEN <span class="token operator">=</span> <span class="token number">300</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>EPOCH <span class="token operator">=</span> <span class="token number">500</span><span class="token comment" spellcheck="true"># training data</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N_SAMPLES<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># x data (tensor), shape = (100, 1)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0.3</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token operator">=</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># test data</span>test_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N_SAMPLES<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> test_x <span class="token operator">+</span> <span class="token number">0.3</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token operator">=</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># show data</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy(), c='magenta', s=50, alpha=0.5, label='train')</span><span class="token comment" spellcheck="true"># plt.scatter(test_x.data.numpy(), test_y.data.numpy(), c='cyan', s=50, alpha=0.5, label='test')</span><span class="token comment" spellcheck="true"># plt.legend(loc='upper left')</span><span class="token comment" spellcheck="true"># plt.ylim((-2.5, 2.5))</span><span class="token comment" spellcheck="true"># plt.show()</span>net_overfitting <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>net_dropped <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># drop 50% of the neuron</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># drop 50% of the neuron</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>optimizer_ofit <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_overfitting<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>optimizer_drop <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_dropped<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>    pred_ofit <span class="token operator">=</span> net_overfitting<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    pred_drop <span class="token operator">=</span> net_dropped<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss_ofit <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>pred_ofit<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    loss_drop <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>pred_drop<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer_drop<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_ofit<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_ofit<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_drop<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_ofit<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_drop<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># change to eval mode in order to fix drop out effect</span>        net_overfitting<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        net_dropped<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># parameters for dropout differ from train mode</span>        <span class="token comment" spellcheck="true"># plotting</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_pred_ofit <span class="token operator">=</span> net_overfitting<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>        test_pred_drop <span class="token operator">=</span> net_dropped<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'magenta'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'cyan'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_pred_ofit<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'overfitting'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_pred_drop<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b--'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dropout(50%)'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">'overfitting loss=%.4f'</span> <span class="token operator">%</span> loss_func<span class="token punctuation">(</span>test_pred_ofit<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token string">'dropout loss=%.4f'</span> <span class="token operator">%</span> loss_func<span class="token punctuation">(</span>test_pred_drop<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># change back to train mode</span>        net_dropped<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        net_overfitting<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302145646070.png" alt="image-20220302145646070"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy和pandas学习</title>
      <link href="2021/08/10/numpy-he-pandas-xue-xi/"/>
      <url>2021/08/10/numpy-he-pandas-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy和Pandas学习"><a href="#Numpy和Pandas学习" class="headerlink" title="Numpy和Pandas学习"></a>Numpy和Pandas学习</h1><p><a href="https://mofanpy.com/tutorials/data-manipulation/np-pd/">莫烦教程原文链接</a></p><h2 id="1-为什么使用Numpy和Pandas"><a href="#1-为什么使用Numpy和Pandas" class="headerlink" title="1. 为什么使用Numpy和Pandas"></a>1. 为什么使用Numpy和Pandas</h2><ul><li>运算速度快：numpy 和 pandas 都是采用 C 语言编写, pandas 又是基于 numpy, 是 numpy 的升级版本。</li><li>消耗资源少：采用的是矩阵运算，会比 python 自带的字典或者列表快好多</li></ul><h2 id="2-Numpy学习"><a href="#2-Numpy学习" class="headerlink" title="2. Numpy学习"></a>2. Numpy学习</h2><h3 id="2-1-Numpy属性"><a href="#2-1-Numpy属性" class="headerlink" title="2.1 Numpy属性"></a>2.1 Numpy属性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparray <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[1 2 3] [2 3 4]] """</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"number of dim:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 维度</span><span class="token comment" spellcheck="true"># number of dim: 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shape:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 行数和列数</span><span class="token comment" spellcheck="true"># shape : (2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>size<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 元素个数</span><span class="token comment" spellcheck="true"># size: 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-numpy创建array"><a href="#2-2-numpy创建array" class="headerlink" title="2.2 numpy创建array"></a>2.2 numpy创建array</h3><ul><li>array：创建数组</li><li>dtype：指定数据类型</li><li>zeros：创建数据全为0</li><li>ones：创建数据全为1</li><li>empty：创建数据接近0</li><li>arrange：按指定范围创建数据</li><li>linspace：创建险段</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dtype指定array数据的类型，有int16 int32 int64 float</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成4行5列全0矩阵</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成3行4列元素全为1的矩阵，并规定数据类型为float32</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据为empty。与zeros不同，empty没有将数组值设置为0，因此可能会稍微快一些。</span><span class="token comment" spellcheck="true"># 另一方面，它要求用户手动设置数组中的所有值，并且应该谨慎使用。</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[ 3.10503618e+231 -1.49166826e-154  2.23606798e+000  4.70372193e+000] [ 2.73861279e+000  2.23606798e+000  4.70372193e+000  2.73861279e+000] [ 2.23606798e+000  6.95337859e-309  4.94065646e-324  4.94065646e-324]]"""</span><span class="token comment" spellcheck="true"># 用arange查u你感觉爱你连续数组(10 - 19的数据，步长为2)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [10 12 14 16 18]</span><span class="token comment" spellcheck="true"># 使用reshape改变数据的形状</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用linspace创建险段数据</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 开始端1，结束端10，且分割成20个数据，生成线段</span><span class="token triple-quoted-string string">"""[ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105  3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632  6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158  9.52631579 10.        ]"""</span><span class="token comment" spellcheck="true"># linspace结合reshape</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[ 1.          1.47368421  1.94736842  2.42105263] [ 2.89473684  3.36842105  3.84210526  4.31578947] [ 4.78947368  5.26315789  5.73684211  6.21052632] [ 6.68421053  7.15789474  7.63157895  8.10526316] [ 8.57894737  9.05263158  9.52631579 10.        ]]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Numpy-基础运算1"><a href="#2-3-Numpy-基础运算1" class="headerlink" title="2.3 Numpy 基础运算1"></a>2.3 Numpy 基础运算1</h3><ul><li>简单一维array上的运算</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># array([10, 20, 30, 40])</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># array([0, 1, 2, 3])</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b   <span class="token comment" spellcheck="true"># [10 21 32 43]</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment" spellcheck="true"># [10 19 28 37]</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b   <span class="token comment" spellcheck="true"># [  0  20  60 120]，对应位置上的元素相乘，并非矩阵乘法</span>c <span class="token operator">=</span> b <span class="token operator">**</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># [0 1 4 9]，平方b ^ 2</span><span class="token comment" spellcheck="true"># 对矩阵中每一项元素进行sin运算</span>c <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span><span class="token comment" spellcheck="true"># 除了函数应用外，在脚本中对print函数进行一些修改可以进行逻辑判断</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ True  True  True False]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多维array上的运算</li></ul><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1 1]</span><span class="token comment" spellcheck="true">#  [0 1]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0 1]</span><span class="token comment" spellcheck="true"># [2 3]]</span>c_dot <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 矩阵相乘</span>c_dot_2 <span class="token operator">=</span> a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 两种方法等价</span><span class="token comment" spellcheck="true"># [[2 4]</span><span class="token comment" spellcheck="true">#  [2 3]]</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0.7949933  0.57852059 0.58766169 0.64314735]</span><span class="token comment" spellcheck="true">#  [0.35365446 0.34662516 0.41735909 0.64740376]]</span>sum_a <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算加和</span>min_a <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算最小值</span>max_a <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算最大值</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_a<span class="token punctuation">,</span> min_a<span class="token punctuation">,</span> max_a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4.369365406391639 0.3466251614035314 0.7949932970007613</span><span class="token comment" spellcheck="true"># 分别计算每一行或者每一列的运算，用到axis=1,0；</span><span class="token comment" spellcheck="true"># 其中0表示按列，1表示按行</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [2.60432293 1.76504248]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0.35365446 0.34662516 0.41735909 0.64314735]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0.7949933  0.64740376]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Numpy-基础运算2"><a href="#2-4-Numpy-基础运算2" class="headerlink" title="2.4 Numpy 基础运算2"></a>2.4 Numpy 基础运算2</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npA <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># array([[ 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">#        [ 6, 7, 8, 9]</span><span class="token comment" spellcheck="true">#        [10,11,12,13]])</span><span class="token comment" spellcheck="true"># 其中的 argmin() 和 argmax() 两个函数分别对应着求矩阵中最小元素和最大元素的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 11</span><span class="token comment" spellcheck="true"># 求平均值 下面四种方法等价：</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy.cumsum()累加函数,得到1*12的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [ 2  5  9 14 20 27 35 44 54 65 77 90]</span><span class="token comment" spellcheck="true"># numpy.diff()累差运算函数，得到3*3的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1 1 1]</span><span class="token comment" spellcheck="true">#  [1 1 1]</span><span class="token comment" spellcheck="true">#  [1 1 1]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找哪些位置上的元素非0，结果显示成行与列，一一对应</span><span class="token comment" spellcheck="true"># (array([0,0,0,0,1,1,1,1,2,2,2,2]),array([0,1,2,3,0,1,2,3,0,1,2,3]))</span><span class="token comment" spellcheck="true"># 矩阵的排序函数 numpy.sort()，默认行排序</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[14 13 12 11]</span><span class="token comment" spellcheck="true">#  [10  9  8  7]</span><span class="token comment" spellcheck="true">#  [ 6  5  4  3]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[11 12 13 14]</span><span class="token comment" spellcheck="true">#  [ 7  8  9 10]</span><span class="token comment" spellcheck="true">#  [ 3  4  5  6]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 列排序</span><span class="token comment" spellcheck="true"># [[ 6  5  4  3]</span><span class="token comment" spellcheck="true">#  [10  9  8  7]</span><span class="token comment" spellcheck="true">#  [14 13 12 11]]</span><span class="token comment" spellcheck="true"># 矩阵的转置有两种表示方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[14 10  6]</span><span class="token comment" spellcheck="true">#  [13  9  5]</span><span class="token comment" spellcheck="true">#  [12  8  4]</span><span class="token comment" spellcheck="true">#  [11  7  3]]</span><span class="token comment" spellcheck="true"># clip(array,a,b)函数,其中规定a&lt;b,使矩阵中&lt;a的元素全部变为a，>b的元素全部变为b</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># array([[ 9, 9, 9, 9]</span><span class="token comment" spellcheck="true">#        [ 9, 9, 8, 7]</span><span class="token comment" spellcheck="true">#        [ 6, 5, 5, 5]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="2021/08/08/redis-xue-xi-bi-ji/"/>
      <url>2021/08/08/redis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis学习"><a href="#Redis学习" class="headerlink" title="Redis学习"></a>Redis学习</h1><h2 id="1-为什么用Nosql"><a href="#1-为什么用Nosql" class="headerlink" title="1. 为什么用Nosql"></a>1. 为什么用Nosql</h2><p>整个网站的瓶颈是什么？</p><ol><li>数据量如果太大，一个机器放不下</li><li>数据的索引（B+Tree），一个机器内存也放不下</li><li>访问量（读写混合），一个服务器承受不了</li></ol><p>只要开始出现以上的三种情况之一，那么就一定要晋级！</p><ul><li><strong>Memcached（缓存） + MySQL + 垂直拆分（数据库读写分离）</strong></li></ul><p>网站80%的情况都是在读，每次都要去查询数据库的话十分麻烦，所以说我们希望减轻数据的压力，可以使用缓存来保证效率！</p><p>发展过程：优化数据结构和索引–&gt;文件缓存（IO）–&gt;Memcached</p><ul><li><strong>分库分表 + 水平拆分 + MySQL集群</strong></li></ul><p>早些年MyISAM：表锁，十分影响效率，高并发下就会出现严重的锁问题</p><p>转战Innodb：行锁</p><p>慢慢的就开始使用分库分表来解决写的压力！MySQL在那个年代推出了表分区，但是现在并没有多少公司使用。</p><p>MySQL的集群，很好满足那个时代的所有需求！</p><ul><li><strong>如今的年代</strong></li></ul><p><strong>定位数据、音乐数据，热榜数据</strong>等，MySQL这样的关系性数据库就不够用了，数据量很多，变化很快！</p><p>如果使用MySQL存储一些比较大的文件，如博客和图片等等。数据量很大，效率就低了！如果有一种数据库来专门处理这种数据，MySQL的压力就变得十分小（研究如何处理这类问题）。大数据的IO压力下，表几乎没法更大！</p><ul><li>为什么要使用NoSQL</li></ul><p>用户的个人信息，社交网络，地理位置，用户自己产生的数据，用户日志等等爆发式增长！</p><p>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况</p><h2 id="2-什么是NoSQL"><a href="#2-什么是NoSQL" class="headerlink" title="2. 什么是NoSQL"></a>2. 什么是NoSQL</h2><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>泛指非关系性数据库，随着web2.0互联网的诞生！传统的关系性数据库很难应付，尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是当下必须掌握的一个技术！</p><p>如用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展了。Map&lt;String, Object&gt; 来控制的。</p><ul><li>NoSQL特点</li></ul><p>解耦！</p><ol><li>方便扩展（数据之间没有关系，很好扩展）</li><li>大数据量高性能（Redis一秒写8万次，读取11万条数据，NoSQL的缓存记录级是一种细粒度的缓存，性能会比较高！）</li><li>数据类型是多样型的！（不需要事先设计数据库！随取随用，如果是数据库量十分大的表，很多人就无法设计了）</li><li>传统RDBS和NoSQL</li></ol><pre><code>传统的RDBS（关系性数据库）- 结构化组织- SQL语言- 数据和关系都存在单独的表中 row col- 严格的一致性- 基础的事务......</code></pre><pre><code>Nosql- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文档存储，图形数据库（社交关系）- 最终一致性- CAP定理 和 BASE （异地多活）- 高性能，高可用，高可扩展性......</code></pre><ul><li>了解：3V + 3高</li></ul><p>大数据时代的3V：主要是描述问题的</p><ol><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高：主要是对程序的要求</p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS一起使用</p><ul><li>架构师：没有什么是加一层解决不了的！</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1、商品的基本信息</span>    名称、价格、商家信息：    关系性数据库就可以解决了！MySQL / Oracle（淘宝早年就去IOE了！ - 王坚：推荐文章：阿里云的这群疯子）    <span class="token comment" spellcheck="true"># 2、商品的描述、评论（文字比较多）</span>    文档型数据库中，Redis / MongoDB    <span class="token comment" spellcheck="true"># 3、图片</span>    - 分布式文件系统 FastDFS    - 淘宝的                FTPS    - Google            GFS    - Hadoop            HDFS    - 阿里云的         oss    <span class="token comment" spellcheck="true"># 4、商品的关键字（搜索）</span>    - 搜索引擎         solr elasticsearch    - ISearch 了解多隆大佬    <span class="token comment" spellcheck="true"># 5、商品热门的波段信息</span>    - 内存数据库    - Redis    Tair、Memache<span class="token punctuation">..</span>.    <span class="token comment" spellcheck="true"># 6、商品的交易，外部的支付接口</span>    - 三方应用    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大型互联网应用问题：</p><ul><li>数据类型太多了</li><li>数据源繁多，经常重构</li><li>数据大面积改造</li></ul><p>解决办法：</p><p>在应用层和数据层之间加一层统一数据服务平台！</p><h2 id="3-NoSQL的四大分类"><a href="#3-NoSQL的四大分类" class="headerlink" title="3. NoSQL的四大分类"></a>3. NoSQL的四大分类</h2><p><strong>KV键值对</strong></p><ul><li>新浪：Redis</li><li>美团：Redis + Tair</li><li>阿里，百度：Redis + memcache</li></ul><p><strong>文档型数据库（bson格式，和json一样）</strong></p><ul><li>MongoDB（一般必须要掌握）<ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写</li><li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的！</li></ul></li><li>ConthDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><ul><li>Neo4j</li><li>InfoGrid</li></ul><h2 id="4-Redis入门"><a href="#4-Redis入门" class="headerlink" title="4. Redis入门"></a>4. Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>Redis是什么？</strong></p><p>Redis（Remote Dictionary Server），即<strong>远程字典服务</strong>。是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>免费和开源！是当下最热门的NoSQL技术之一！也被人们称之为结构化数据库！</p><p><strong>Redis能干什么？</strong></p><ol><li>内存存储、持久化</li><li>效率高，用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量）</li><li>…….</li></ol><p><strong>特性</strong></p><ol><li>多样化的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ol><p><strong>学习中需要用到的东西</strong></p><ol><li>官网：<a href="https://redis.io/">https://redis.io/</a></li><li>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>下载地址：官网下载即可</li><li>Windows在Github上下载（不建议），Redis推荐在Linux服务器上搭建</li></ol><h2 id="5-Linux安装"><a href="#5-Linux安装" class="headerlink" title="5. Linux安装"></a>5. Linux安装</h2><ol><li>下载安装包：redis-6.2.5.tar.gz</li><li>解压Redis的安装包！程序解压到/opt</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> redis-6.2.5.tar.gz /opt<span class="token function">cd</span> /opt<span class="token function">sudo</span> <span class="token function">tar</span> -zxvf redis-6.2.5.tar.gz<span class="token comment" spellcheck="true"># 在解压后的文件中可以看到redis配置文件redis.conf</span><span class="token function">sudo</span> <span class="token function">install</span> gcc-c++<span class="token function">sudo</span> <span class="token function">make</span><span class="token comment" spellcheck="true"># 第一次make编译需要一段时间，第二次make就快了</span><span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fY3BPP"><img src="https://z3.ax1x.com/2021/08/10/fY3BPP.jpg" alt="make编译成功"></a></p><ol start="3"><li><p><strong>redis的默认安装路径为/usr/local/bin</strong></p></li><li><p><strong>将redis配置文件复制到我们当前目录下(之后就使用这个配置文件进行启动)</strong></p></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> tconfig<span class="token function">sudo</span> <span class="token function">cp</span> /opt/redis-6.2.5/redis.conf tconfig/<span class="token function">cd</span> tconfig/<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>redis默认不是后台启动的，修改配置文件！</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">vim redis.conf<span class="token comment" spellcheck="true"># 把daemonize从no改为yes（以后台方式启动）</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># :wq 保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>启动redis服务</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/bin<span class="token comment" spellcheck="true"># 通过指定的配置文件启动</span>redis-server tconfig/redis.conf<span class="token comment" spellcheck="true"># 使用redis-cli客户端测试连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fYtnts"><img src="https://z3.ax1x.com/2021/08/10/fYtnts.jpg" alt="测试"></a></p><ol start="7"><li><strong>查看redis的进程是否开启</strong></li></ol><p><a href="https://imgtu.com/i/fYNi59"><img src="https://z3.ax1x.com/2021/08/10/fYNi59.jpg" alt="查看redis的进程是否开启"></a></p><ol start="8"><li><strong>关闭Redis服务</strong></li></ol><p>使用shotdown或者kill</p><ol start="9"><li>后面会使用单机多Redis启动集群测试！</li></ol><h2 id="6-redis-benchmark性能测试"><a href="#6-redis-benchmark性能测试" class="headerlink" title="6. redis-benchmark性能测试"></a>6. redis-benchmark性能测试</h2><p>redis-benchmark是官方自带的性能测试工具！</p><p><a href="https://imgtu.com/i/ftPz4A"><img src="https://z3.ax1x.com/2021/08/10/ftPz4A.jpg" alt="性能测试工具可选参数"></a></p><p>简单测试下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span><span class="token function">cd</span> /usr/local/binredis-server tconfig/redis.confredis-cli -p 6379<span class="token function">ping</span><span class="token comment" spellcheck="true"># 测试：100个并发连接  100000个请求</span>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/ftA3b8"><img src="https://z3.ax1x.com/2021/08/10/ftA3b8.jpg" alt="性能测试结果"></a></p><h2 id="7-基础知识"><a href="#7-基础知识" class="headerlink" title="7. 基础知识"></a>7. 基础知识</h2><p>redis默认有16个数据库，默认使用第0个数据库（vim redis.conf）</p><p><a href="https://imgtu.com/i/ftATaD"><img src="https://z3.ax1x.com/2021/08/10/ftATaD.jpg" alt="默认有16个数据库"></a></p><p>可以使用SELECT切换数据库</p><p>DBSIZE查看当前数据库空间</p><pre class="line-numbers language-bash"><code class="language-bash">root@ecnu-lab904-server:/usr/local/bin<span class="token comment" spellcheck="true"># redis-cli -p 6379</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span>PONG127.0.0.1:6379<span class="token operator">></span> SELECT 3OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GET和SET方法</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> SET name techaobaOK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> get name<span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除当前数据库(<strong>flushdb</strong>)，清空全部数据库（<strong>flushall</strong>）</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> flushdbOK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-五大基本类型"><a href="#8-五大基本类型" class="headerlink" title="8. 五大基本类型"></a>8. 五大基本类型</h2><h3 id="8-1-Redis-Key"><a href="#8-1-Redis-Key" class="headerlink" title="8.1 Redis-Key"></a>8.1 Redis-Key</h3><ul><li>EXISTS [key]</li><li>MOVE [key] [db]</li><li>EXPIRE [key] [seconds]</li><li>TTL [key]      # 查看当前key的剩余时间</li><li>KEYS *          # 查看所有的key</li><li>TYPE [key]   # 查看当前key的类型</li><li>SET [key] [value]</li><li>GET [key]</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 判断是否存在</span>127.0.0.1:6379<span class="token operator">></span> EXISTS age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 移动数据到其他数据库</span>127.0.0.1:6379<span class="token operator">></span> MOVE name 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> KEYS *1<span class="token punctuation">)</span> <span class="token string">"age"</span>127.0.0.1:6379<span class="token operator">></span> SELECT 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> GET name<span class="token string">"techaoba"</span><span class="token comment" spellcheck="true"># 设置数据的过期时间（ttl 查看剩余时间，-2表示已过期）</span>127.0.0.1:6379<span class="token operator">></span> EXPIRE name 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> SET name techaobaOK<span class="token comment" spellcheck="true"># 查看数据类型 TYPE</span>127.0.0.1:6379<span class="token operator">></span> TYPE namestring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-String（字符串）"><a href="#8-2-String（字符串）" class="headerlink" title="8.2 String（字符串）"></a>8.2 String（字符串）</h3><ul><li>APPEND [key] [value]       # 字符串追加（如果当前key不存在就相当于set）</li><li>STRLEN [key]                     # 获取字符串长度</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET key1 v1OK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> APPEND key1 hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello"</span>127.0.0.1:6379<span class="token operator">></span> strlen key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> APPEND key1 <span class="token string">", techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 17127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello, techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>INCR [key]         # 自增1</li><li>DECR [key]        # 自减1</li><li>INCRBY [key] [10]     # 自增10</li><li>DECRBY [key] [5]      # 自减5</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0OK127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"2"</span>127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1127.0.0.1:6379<span class="token operator">></span> INCRBY views 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9127.0.0.1:6379<span class="token operator">></span> DECRBY views 5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GETRANGE [key] [startIndex] [endIndex]     # 获取字符串范围</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 <span class="token string">"hello, techaoba"</span>OK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hello, techaoba"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE key1 1 5<span class="token string">"ello,"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE key1 3 -1    <span class="token comment" spellcheck="true"># -1表示最后</span><span class="token string">"lo, techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SETRANGE [key] [startIndex] [value]        # 从startIndex开始Set</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET key2 abcdefgOK127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"abcdefg"</span>127.0.0.1:6379<span class="token operator">></span> SETRANGE key2 1 xx<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefg"</span>127.0.0.1:6379<span class="token operator">></span> SETRANGE key2 6 xxxxxx<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 12127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefxxxxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setex [key] [seconds] [value]（set with expire）       # 设置过期时间</li><li>setnx [key] [value]（set if not exist）       # 不存在设置（在分布式锁中会常常使用）</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置key3的过期时间为30秒</span>127.0.0.1:6379<span class="token operator">></span> setex key3 30 <span class="token string">"hello"</span>OK127.0.0.1:6379<span class="token operator">></span> TTL key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 24127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"mykey"</span>127.0.0.1:6379<span class="token operator">></span> TTL key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2<span class="token comment" spellcheck="true"># 由于mykey已经有值了，所以setnx mykey会设置失败</span>127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"MongoDB"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mset [key1] [value1] [key2] [value2] …    # 批量设置值</li><li>mget [key1 key2 …]    # 批量获取值</li><li>mset[key1] [value1] [key2] [value2] …    # 批量不存在设置值(具有原子性)</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 批量设置</span>127.0.0.1:6379<span class="token operator">></span> mset k1 v1 k2 v2 k3 v3OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k1"</span>2<span class="token punctuation">)</span> <span class="token string">"k3"</span>3<span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token comment" spellcheck="true"># 批量获取值</span>127.0.0.1:6379<span class="token operator">></span> mget k1 k2 k31<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token comment" spellcheck="true"># msetnx具有原子性操作，由于k1已经存在，k4也会设置失败</span>127.0.0.1:6379<span class="token operator">></span> msetnx k1 v100 k4 v4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> user:1 <span class="token punctuation">{</span>name:zhangsan,age:3<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 设置一个user:1对象 值为json字符来保存一个对象！</span>127.0.0.1:6379<span class="token operator">></span> get user:1<span class="token string">"{name:zhangsan,age:3}"</span>127.0.0.1:6379<span class="token operator">></span> mset user:2:name lisi user:2:age 2OK127.0.0.1:6379<span class="token operator">></span> mget user:2:name user:2:age1<span class="token punctuation">)</span> <span class="token string">"lisi"</span>2<span class="token punctuation">)</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getset     # 先get再set</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开始没有值，输出nil</span>127.0.0.1:6379<span class="token operator">></span> getset db redis<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"redis"</span><span class="token comment" spellcheck="true"># 开始值是redis，get完后设置为MongDB</span>127.0.0.1:6379<span class="token operator">></span> getset db MongDB<span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"MongDB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String类似的使用场景：value除了是字符串还可以是数字</p><ul><li>计数器</li><li>统计多单位数量 uid:958285378:follow 19032 (bilibili里面uid下的粉丝数量)</li></ul><h3 id="8-3-List（链表，可实现栈和队列）"><a href="#8-3-List（链表，可实现栈和队列）" class="headerlink" title="8.3 List（链表，可实现栈和队列）"></a>8.3 List（链表，可实现栈和队列）</h3><p>在Redis里面，可以把List完成栈、队列、阻塞队列</p><p><strong>所有的List命令都是用l开头的</strong></p><ul><li>LPUSH [key] [value]  # 将一个或者多个值插入到列表的头部（左）</li><li>RPUSH [key] [value]  # 将一个或者多个值插入到列表的尾部（右）</li><li>LPOP [key]     # 从左边弹出</li><li>RPOP [key]     # 从右边弹出</li><li>LRANGE [key] [startIndex] [endIndex]    # 从左边查看值</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># LPUSH 将一个或者多个值插入到列表的头部（左）</span>127.0.0.1:6379<span class="token operator">></span> LPUSH list one<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LPUSH list tuo<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LPOP list   <span class="token comment" spellcheck="true"># 从左边弹出</span><span class="token string">"tuo"</span>127.0.0.1:6379<span class="token operator">></span> LPUSH list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -1 <span class="token comment" spellcheck="true"># 从左边查看值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 1 <span class="token comment" spellcheck="true"># 从左边查看值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token comment" spellcheck="true"># 将一个或者多个值插入到列表的尾部（右）</span>127.0.0.1:6379<span class="token operator">></span> RPUSH list right<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LINDEX [key] [index]       # 通过下表获得list中的某一个值</li><li>LLEN [key]              # 获取list的长度</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list 1 <span class="token comment" spellcheck="true"># 通过下标获得list中的某一个值</span><span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list -1 <span class="token comment" spellcheck="true"># 通过下标获得list中的某一个值</span><span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LLEN list   <span class="token comment" spellcheck="true"># 获取list的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LREM [list] [count] [key]        # 移除list集合中指定个数的value，精确匹配</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> LREM list 1 one  <span class="token comment" spellcheck="true"># 从左开始移除一个one</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LREM list 2 three <span class="token comment" spellcheck="true"># 从左开始移除两个three</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"right"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ltrim [list] [startIndex] [endIndex] 修剪，list已经被改变了</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello3"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ltrim mylist 1 2OK127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RPOPLPUSH [sourceList] [targetList]    # 移除列表的最后一个元素，移动到新列表中 </li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> RPOPLPUSH mylist myotherlist<span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE myotherlist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LSET [list] [index] [value]    # 更新list元素</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LPUSH list value1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"value1"</span>127.0.0.1:6379<span class="token operator">></span> LSET list 0 itemOK127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"item"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LINSERT [list] before [value] [newValue]</li><li>LINSERT [list] after [value] [newValue]</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 在world前插入other</span>127.0.0.1:6379<span class="token operator">></span> LINSERT mylist before <span class="token string">"world"</span> <span class="token string">"other"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true"># 在world后插入一个new</span>127.0.0.1:6379<span class="token operator">></span> LINSERT mylist after <span class="token string">"world"</span> <span class="token string">"new"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span>4<span class="token punctuation">)</span> <span class="token string">"new"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-Set（集合）"><a href="#8-4-Set（集合）" class="headerlink" title="8.4 Set（集合）"></a>8.4 Set（集合）</h3><p>set中的值不能重复！</p><ul><li>SADD [set] [value]     # set添加元素</li><li>SMEMBERS [set]        # 查看set成员</li><li>SISMEMBER [set] [value]    # 判断set是否有某成员</li><li>SCARD [set]    # 查看set成员个数</li><li>SREM [set] [value]    # 移除成员</li><li>SRANDMEMBER [set] [[count]]   # 随机挑选set中的一个元素，可指定个数</li><li>SPOP [set]    # 随机移除一个set元素</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"hello"</span>   <span class="token comment" spellcheck="true"># set添加元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset  <span class="token comment" spellcheck="true"># 查看set成员</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"lovetechaoba"</span>3<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SISMEMBER myset techaoba  <span class="token comment" spellcheck="true"># 判断set是否有某成员</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SISMEMBER myset techaoba0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SCARD myset   <span class="token comment" spellcheck="true"># 查看set成员个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SCARD myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba2"</span>  <span class="token comment" spellcheck="true"># 插入重复成员会失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SREM myset <span class="token string">"hello"</span>   <span class="token comment" spellcheck="true"># 移除hello元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"lovetechaoba2"</span>2<span class="token punctuation">)</span> <span class="token string">"lovetechaoba"</span>3<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset    <span class="token comment" spellcheck="true"># 随机挑选set中的一个元素</span><span class="token string">"lovetechaoba2"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset 2  <span class="token comment" spellcheck="true"># 随机挑选set中的两个元素</span>1<span class="token punctuation">)</span> <span class="token string">"lovetechaoba2"</span>2<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SPOP myset   <span class="token comment" spellcheck="true"># 随机移除一个set元素</span><span class="token string">"lovetechaoba2"</span>127.0.0.1:6379<span class="token operator">></span> SPOP myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SMOVE [set] [set2] [value]</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset2 <span class="token string">"set2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMOVE myset myset2 <span class="token string">"techaoba"</span> <span class="token comment" spellcheck="true"># 移动set元素到另一个set中</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset21<span class="token punctuation">)</span> <span class="token string">"set2"</span>2<span class="token punctuation">)</span> <span class="token string">"techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微博和B站中有共同关注！（交集）</p><p>数字集合类：</p><ul><li>差集  SDIFF [set1] [set2] …</li><li>交集  SINTER [set1] [set2] …</li><li>并集  SUNION [set1] [set2] …</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SDIFF key1 key2  <span class="token comment" spellcheck="true"># 差集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"a"</span>127.0.0.1:6379<span class="token operator">></span> SINTER key1 key2 <span class="token comment" spellcheck="true"># 交集</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> SUNION key1 key2 <span class="token comment" spellcheck="true"># 并集</span>1<span class="token punctuation">)</span> <span class="token string">"a"</span>2<span class="token punctuation">)</span> <span class="token string">"c"</span>3<span class="token punctuation">)</span> <span class="token string">"b"</span>4<span class="token punctuation">)</span> <span class="token string">"e"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-Hash"><a href="#8-5-Hash" class="headerlink" title="8.5 Hash"></a>8.5 Hash</h3>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习</title>
      <link href="2021/07/31/mybatis-xue-xi/"/>
      <url>2021/07/31/mybatis-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis学习"><a href="#MyBatis学习" class="headerlink" title="MyBatis学习"></a>MyBatis学习</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p>父工程Maven依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 父工程依赖包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mysql  驱动 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mybatis 包 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- junit --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在build中配置resources，来防止我们资源导出失败的问题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-编写mybatis的核心配置文件"><a href="#2-编写mybatis的核心配置文件" class="headerlink" title="2. 编写mybatis的核心配置文件"></a>2. 编写mybatis的核心配置文件</h2><p>首先创建一个子项目mybatis-01。</p><ul><li>在resources中新建mybatis-config.xml文件。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册！ --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/techaoba/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写mybatis工具类MyBatisUtils</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// sqlSessionFactory -> sqlSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用Mybatis第一步：获取sqlSessionFactory对象</span>      String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>      InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>  <span class="token comment" spellcheck="true">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置为true表示默认commit事务（否则需要手动commit）</span>    <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h2><ul><li>实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>techaoba<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dao接口(Interface)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>techaoba<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口实现类由原来的UserDaoImpl转变为一个Mapper.xml文件</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- namespace = 绑定一个对应的dao/mapper接口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from `mybatis`.`user`    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：org.apache.ibatis.binding.BindingException: Type interface com.techaoba.dao.UserDao is not known to the MapperRegistry.</p><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件(mybatis-config.xml)中注册mappers</p><ul><li>测试（junit）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：获得SqlSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方式一：getMapper（推荐使用第一种）</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方式二：</span>    <span class="token comment" spellcheck="true">//        List&lt;User> userList = sqlSession.selectList("com.techaoba.dao.UserDao.getUserList");</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭sqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4. CRUD"></a>4. CRUD</h2><h3 id="4-1-namespace"><a href="#4-1-namespace" class="headerlink" title="4.1 namespace"></a>4.1 namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致！</p><h3 id="4-2-基础CRUD代码"><a href="#4-2-基础CRUD代码" class="headerlink" title="4.2 基础CRUD代码"></a>4.2 基础CRUD代码</h3><p>mapper中的属性：</p><ul><li>id：就是对应的namespace中的方法名</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType：参数类型！</li></ul><p>步骤：</p><ul><li>编写接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据id查询用户</span>    User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加一个用户</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改用户</span>    <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应的mapper中的sql语句</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM `mybatis`.`user` WHERE `user`.`id` = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对象中的属性，可以直接取出来 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO `mybatis`.`user` (`id`, `name`, `pwd`) VALUES (#{id}, #{name}, #{pwd});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE `mybatis`.`user` SET `name` = #{name}, `pwd` = #{pwd} WHERE `id` = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 删除用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        DELETE FROM `mybatis`.`user` WHERE `id` = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"艾米莉亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"amly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"艾米莉亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"amly123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>增删改需要提交事务 ：sqlSession.commit();</li><li>增删改执行成功返回数值1。</li></ul><h3 id="4-3-万能Map"><a href="#4-3-万能Map" class="headerlink" title="4.3 万能Map"></a>4.3 万能Map</h3><p>假设，我们的实体类或者数据库中的表字段过多，我们应当考虑使用map，这样可以只操作实体中的部分属性!</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用map添加用户</span><span class="token keyword">int</span> <span class="token function">addUserByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>UserMapper.xml:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用map添加用户 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUserByMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  INSERT INTO `mybatis`.`user` (`id`, `name`, `pwd`) VALUES (#{userId}, #{userName}, #{password});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Test:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"12093884"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUserByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出key即可！【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个类型参数的情况下，可以直接在sql中取到！【parameterType=”int…”】</p><p>多个参数用Map，或者<strong>注解</strong>！</p><h3 id="4-4-模糊查询"><a href="#4-4-模糊查询" class="headerlink" title="4.4 模糊查询"></a>4.4 模糊查询</h3><ul><li>Java代码执行的时候，传递通配符% %</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%晓%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在sql拼接中使用通配符</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">"%"</span><span class="token comment" spellcheck="true">#{name}"%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-和-的区别"><a href="#4-5-和-的区别" class="headerlink" title="4.5 #{} 和 ${} 的区别"></a>4.5 #{} 和 ${} 的区别</h3><ol><li>#{}：</li></ol><ul><li>用来传入参数，sql在解析的时候会加上引号 “”，当成字符串来解析。</li><li><strong>#{} 能够跟大程度上防止sql注入。</strong></li></ul><ol start="2"><li>${}：</li></ol><ul><li><strong>使用${}时传入数据直接显示在生成的sql中，无法防止sql注入。</strong></li><li><strong>${}一般用于传入数据库对象，如表名和字段名。</strong></li><li>能用#{}尽量用#{}。</li></ul><h2 id="5-配置解析"><a href="#5-配置解析" class="headerlink" title="5. 配置解析"></a>5. 配置解析</h2><h3 id="5-1-核心配置文件"><a href="#5-1-核心配置文件" class="headerlink" title="5.1 核心配置文件"></a>5.1 核心配置文件</h3><ul><li>Mybatis-config.xml</li><li>MyBatis的配置文件中包含了回深深影响MyBatis行为的设置和属性信息。</li></ul><pre><code>configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre><h3 id="5-2-环境配置（environments）"><a href="#5-2-环境配置（environments）" class="headerlink" title="5.2 环境配置（environments）"></a>5.2 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，比如想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>在核心配置文件的<environments>中可以配置多套数据库运行环境！</p><p>Mybatis默认的事务管理器就是JDBC，连接池：POOLED。</p><h3 id="5-3-属性（properties）"><a href="#5-3-属性（properties）" class="headerlink" title="5.3 属性（properties）"></a>5.3 属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p>编写数据库配置文件【db.properties】</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">diver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在mybatis-config.xml文件中引入(注意：<strong>properties标签在最前面</strong>)：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入外部配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${diver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-类型别名（typeAliases）"><a href="#5-4-类型别名（typeAliases）" class="headerlink" title="5.4 类型别名（typeAliases）"></a>5.4 类型别名（typeAliases）</h3><ol><li>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 可以给实体类取别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当这样配置时，User可以用在任何使用com.techaoba.pojo.User的地方。</p><ol start="2"><li>也可以指定一个包名，MyBatis会在包名下面搜索需要的Java Bean，比如：</li></ol><p>扫描实体类的包， 它的默认别名就为这个类的类名，首字母小写！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--        &lt;typeAlias type="com.techaoba.pojo.User" alias="User" />--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当这样配置时，user可以用在任何使用com.techaoba.pojo.User的地方(首字母大写的User其实也可以使用)。</p><p>在扫描包的方式中可以在实体类之上加别名注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"UserAlias"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>在实体类比较少的时候，使用第一种方式。</li><li>如果实体类很多，建议使用第二种。</li><li>第一种可以DIY别名，第二种在实体类上加@Alias注解进行DIY。</li></ul><h3 id="5-5-映射器（mappers）"><a href="#5-5-映射器（mappers）" class="headerlink" title="5.5 映射器（mappers）"></a>5.5 映射器（mappers）</h3><p>MapperRegister：注册绑定我们的Mapper文件；</p><p><strong>方式一：使用相对于类路径的资源引用【推荐使用】</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/techaoba/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：使用class文件绑定注册</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方式三：将包内的映射器接口实现全部注册为映射器</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式二和方式三的注意点：</p><ul><li>接口和它的Mapper配置文件必须同名！</li><li>接口和它的Mapper配置文件必须在同一个包下！</li></ul><h3 id="5-6-生命周期和作用域"><a href="#5-6-生命周期和作用域" class="headerlink" title="5.6 生命周期和作用域"></a>5.6 生命周期和作用域</h3><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的病发问题。</p><p>**SqlSessionFactoryBuilder: **</p><ul><li>一旦创建了SqlSessionFactory，就不需要它了</li><li>局部变量</li></ul><p>**SqlSessionFactory: **</p><ul><li>可以当作是：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li><li>因此SqlSessionFactory的最佳作用域是应用作用域。</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p>**SqlSession: **</p><ul><li>连接到连接池的一个请求！</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><h3 id="5-7-ResultMap"><a href="#5-7-ResultMap" class="headerlink" title="5.7 ResultMap"></a>5.7 ResultMap</h3><p>ResultMap是结果集映射</p><pre><code>id        name        pwdid        name        password</code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 结果集映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- column是数据库中的字段，property是实体类中的属性 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 同名的字段就不用映射了，只用映射不同名的字段 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;result column="id" property="id" />--></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;result column="name" property="name" />--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `mybatis`.`user` WHERE `user`.`id` = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ResultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li><code>ResultMap</code> 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</li></ul><h2 id="6-日志"><a href="#6-日志" class="headerlink" title="6. 日志"></a>6. 日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout、debug</p><p>现在：日志工厂</p><p><strong>logImpl：</strong> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li>SLF4J </li><li> LOG4J 【掌握】</li><li>LOG4J2 </li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><p>在MyBatis中，具体使用哪一个日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志(settings标签在properties和typeAliases之间)！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><a href="https://imgtu.com/i/fnkjkF"><img src="https://z3.ax1x.com/2021/08/06/fnkjkF.jpg" alt="STDOUT_LOGGING的日志输出"></a></p><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2  LOG4J"></a>6.2  LOG4J</h3><p>什么是Log4J：</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</li></ul><ol><li>先导入log4j的包</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建log4j.properties配置文件：</li></ol><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/techaoba.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置log4j为日志的实现</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 标准的日志工厂实现 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;setting name="logImpl" value="STDOUT_LOGGING"/>--></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置log4j为日志的实现 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>log4j的使用，测试运行。</li></ol><p><a href="https://imgtu.com/i/fnuaPf"><img src="https://z3.ax1x.com/2021/08/06/fnuaPf.jpg" alt="log4j的日志输出"></a></p><p><strong>简单使用</strong></p><ol><li>在要使用Log4j的类中，导入包 import org.apache.log4j.Logger;</li><li>日志对象，参数为当前类的class</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>测试打印：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLog4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>打印结果：</li></ol><pre class="line-numbers language-log"><code class="language-log">[INFO][21-08-06][com.techaoba.dao.UserMapper]info:进入了testLog4j[DEBUG][21-08-06][com.techaoba.dao.UserMapper]debug:进入了testLog4j[ERROR][21-08-06][com.techaoba.dao.UserMapper]error:进入了testLog4j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7. 分页"></a>7. 分页</h2><h3 id="7-1-mysql使用Limit进行分页语法："><a href="#7-1-mysql使用Limit进行分页语法：" class="headerlink" title="7.1 mysql使用Limit进行分页语法："></a>7.1 mysql使用Limit进行分页语法：</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 两个参数【startIndex,pageSize】从第4条数据开始查询5条数据，即【4，5，6，7，8】</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 一个参数表示从0开始查询n条数据，等价于   0, 3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Mybatis实现</p><ol><li>接口</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页查询</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 分页查询 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `user` LIMIT #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-RowBounds分类"><a href="#7-2-RowBounds分类" class="headerlink" title="7.2 RowBounds分类"></a>7.2 RowBounds分类</h3><p>不再使用SQL实现分页（使用对象实现分页，<strong>效率比前一种方法低</strong>）</p><ol><li>接口</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过RowBounds分页查询</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通过RowBounds分页查询 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `user`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// RowBounds实现</span>  RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过java代码层面实现分页</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.techaoba.dao.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><a href="https://pagehelper.github.io/">PageHelper</a>是一款MyBatis分页插件。了解即可。</p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><ol><li>关于接口的理解。</li></ol><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</p><p>接口的本身反映了系统设计人员对系统的抽象理解。</p><p>接口应有两类：第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；</p><p>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；</p><p>一个体有可能有多个抽象面。</p><p>抽象体与抽象面是有区别的。</p><ol start="2"><li><p>设计接口的另一个不可忽视的因素是接口所处的环境(context,environment)，系统论的观点：环境是系统要素所处的空间与外部影响因素的总和。任何接口都是在一定的环境中产生的。因此环境的定义及环境的变化对接口的影响是不容忽视的，脱离原先的环境，所有的接口将失去原有的意义。</p></li><li><p>按照组件的开发模型（3C），它们三者相辅相成，各司一面，浑然一体，缺一不可。</p></li></ol><ul><li><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法</p></li><li><p>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现</p></li><li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题</p></li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li>注解在接口上实现</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `user`"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>需要在核心配置文件中绑定接口</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 绑定接口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本质：反射机制实现</p><p>底层：动态代理！</p><h3 id="8-3-注解CRUD"><a href="#8-3-注解CRUD" class="headerlink" title="8.3 注解CRUD"></a>8.3 注解CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务!</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置为true</span>  <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE `user` SET `name` = #{name}, `pwd` = #{pwd} WHERE `id` = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `user`(`id`,`name`,`pwd`) VALUES (#{id}, #{name}, #{pwd})"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM `user` WHERE id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意：必须要将接口注册绑定到核心配置文件中！】</p><p><strong>关于@Param()注解</strong>：</p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议都加上</li><li>在SQL中引用的就是@Param()中设定的属性名</li></ul><h2 id="9-Lombok的使用"><a href="#9-Lombok的使用" class="headerlink" title="9. Lombok的使用"></a>9. Lombok的使用</h2><p>导入Lombok依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Data: 无参构造，get，set，tostring，hashcode，equals。</p><p>@AllArgsConstructor：有参构造</p><p>@NoArgsConstructor：无参构造</p><p>@Getter，@Setter，@tostring，@hashcode……</p><h2 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10. 多对一处理"></a>10. 多对一处理</h2><h3 id="10-1-在数据库中加入教师和学生数据"><a href="#10-1-在数据库中加入教师和学生数据" class="headerlink" title="10.1 在数据库中加入教师和学生数据"></a>10.1 在数据库中加入教师和学生数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'李老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'小李'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-测试环境搭建"><a href="#10-2-测试环境搭建" class="headerlink" title="10.2 测试环境搭建"></a>10.2 <strong>测试环境搭建</strong></h3><ol><li><p>新建实体类Teacher，Student</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 学生关联一个老师</span>    <span class="token keyword">private</span> Teacher teacher<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立Mapper接口</p></li><li><p>建立Mapper.xml文件</p></li><li><p>在核心配置文件中绑定注册Mapper接口或者文件</p></li><li><p>测试查询</p></li></ol><h3 id="10-3-按照查询嵌套处理"><a href="#10-3-按照查询嵌套处理" class="headerlink" title="10.3 按照查询嵌套处理"></a>10.3 <strong>按照查询嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 思路：        1. 查询所有的学生信息        2. 根据查询出来学生的tid，寻找相应的老师--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 复杂的属性需要单独处理       对象使用：association       集合使用：collection  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM teacher WHERE id=#{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果（包含老师的全部信息）：</p><pre><code>Student(id=1, name=小明, teacher=Teacher(id=1, name=李老师))Student(id=2, name=小红, teacher=Teacher(id=1, name=李老师))Student(id=3, name=小张, teacher=Teacher(id=1, name=李老师))Student(id=4, name=小李, teacher=Teacher(id=1, name=李老师))Student(id=5, name=小王, teacher=Teacher(id=1, name=李老师))</code></pre><h3 id="10-4-按照结果嵌套处理"><a href="#10-4-按照结果嵌套处理" class="headerlink" title="10.4 按照结果嵌套处理"></a>10.4 <strong>按照结果嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 按照结果嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT s.id sid,s.name sname,t.name tname FROM student s,teacher t WHERE s.tid=t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果（只包含老师的姓名）：</p><pre><code>Student(id=1, name=小明, teacher=Teacher(id=0, name=李老师))Student(id=2, name=小红, teacher=Teacher(id=0, name=李老师))Student(id=3, name=小张, teacher=Teacher(id=0, name=李老师))Student(id=4, name=小李, teacher=Teacher(id=0, name=李老师))Student(id=5, name=小王, teacher=Teacher(id=0, name=李老师))</code></pre><h2 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11. 一对多处理"></a>11. 一对多处理</h2><p>比如：一个老师拥有多个学生。对老师而言，就是一对多的关系。</p><h3 id="11-1-测试环境搭建"><a href="#11-1-测试环境搭建" class="headerlink" title="11.1 测试环境搭建"></a>11.1 <strong>测试环境搭建</strong></h3><ol><li><p>新建实体类Teacher，Student</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一个老师拥有多个学生</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立Mapper接口</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取指定老师下的所有学生及老师的信息(按照查询嵌套处理)</span>Teacher <span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取指定老师下的所有学生及老师的信息(按照结果嵌套处理)</span>Teacher <span class="token function">getTeacher2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>建立Mapper.xml文件</li></ol><h3 id="11-2-按照结果嵌套处理"><a href="#11-2-按照结果嵌套处理" class="headerlink" title="11.2 按照结果嵌套处理"></a>11.2 <strong>按照结果嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 复杂的属性需要单独处理  对象使用：association  集合使用：collection        javaType=""  是指定的属性类型！        集合中的泛型信息，我们使用ofType获取    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 按结果嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT s.id sid, s.`name` sname, t.`name` tname, t.id tid  FROM teacher t, student s  WHERE t.id = #{tid} AND s.tid = t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-按照查询嵌套处理"><a href="#11-3-按照查询嵌套处理" class="headerlink" title="11.3 按照查询嵌套处理"></a>11.3 <strong>按照查询嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 按查询嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentList<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span>    <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM student WHERE tid = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM teacher WHERE id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在核心配置文件中绑定注册Mapper接口或者文件</li><li>测试查询</li></ol><p>结果：</p><pre><code>Teacher(id=1, name=李老师, studentList=[Student(id=1, name=小明, tid=1), Student(id=2, name=小红, tid=1), Student(id=3, name=小张, tid=1), Student(id=4, name=小李, tid=1), Student(id=5, name=小王, tid=1)])</code></pre><h3 id="11-4-小节"><a href="#11-4-小节" class="headerlink" title="11.4 小节"></a>11.4 小节</h3><ol><li>关联 - association 【多对一】</li><li>集合 - collection【一对多】</li><li>javaType &amp; ofType<ol><li>javaType用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性， 尽量保证通熟易懂。</li><li>注意一对多和多对一中，属性名和字段的问题。</li><li>如果问题不好排查，可以使用日志，建议使用Log4J。</li></ul><h2 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12. 动态SQL"></a>12. 动态SQL</h2><p><strong>动态SQL就是指根据不同的条件生成不同的SQL语句。</strong> </p><h3 id="12-1-搭建环境"><a href="#12-1-搭建环境" class="headerlink" title="12.1 搭建环境"></a>12.1 搭建环境</h3><p>sql创建数据表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实体类（注意Date导包是util而不是sql的）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-2-if语句"><a href="#12-2-if语句" class="headerlink" title="12.2 if语句"></a>12.2 if语句</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE 1=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND title = #{title}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND author = #{author}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-where"><a href="#12-3-where" class="headerlink" title="12.3 where"></a>12.3 where</h3><p><strong>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-4-choose-when-otherwise语句"><a href="#12-4-choose-when-otherwise语句" class="headerlink" title="12.4 choose, when, otherwise语句"></a>12.4 choose, when, otherwise语句</h3><p><strong>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{title}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND author = #{author}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>        AND views = #{views}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：when是按照顺序判断的，第一个成立就不会往后面判断了，后面也是如此。</p><h3 id="12-5-trim-set语句"><a href="#12-5-trim-set语句" class="headerlink" title="12.5 trim, set语句"></a>12.5 trim, set语句</h3><p><strong><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  UPDATE blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      title = #{title},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      author = #{author},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      views = #{views},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  WHERE id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-sql片段"><a href="#12-6-sql片段" class="headerlink" title="12.6 sql片段"></a>12.6 sql片段</h3><p>有时候，我们可能会将一些公用功能的部分抽取出来，方便复用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- sql片段 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND title = #{title}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND author = #{author}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用sql片段 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>最好基于单表来定义片段！</li><li>不要存在where标签</li></ul><h3 id="12-7-foreach语句"><a href="#12-7-foreach语句" class="headerlink" title="12.7 foreach语句"></a>12.7 foreach语句</h3><p><strong>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</strong></p><p><strong><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。</strong></p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据idList查询blog</span>List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> ids<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> views<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE  views > #{views}  AND id IN  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>&lt;==Row: 1, 关系抽取, tech, 2021-08-07 15:49:44.0, 234724&lt;==Row: 3, Spring, 狂神说, 2021-08-07 15:49:44.0, 9999</code></pre><h2 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13. 缓存"></a>13. 缓存</h2><pre><code>查询 ： 连接数据库，耗资源！一次查询的结果，给它暂存在一个可以直接取到的地方 --&gt;内存，缓存我们再次查询相同数据的时候没直接走缓存，就不用走数据库了</code></pre><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><ol><li>什么是缓存【cache】？<ol><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系数据库数据文件）查询，从缓存中查询，从而提升查询效率，<strong>解决了高并发系统的性能问题</strong>。</li></ol></li><li>为什么使用缓存？<ol><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ol></li><li>什么样的数据能使用缓存？<ol><li>经常查询并且不经常改变的数据。</li></ol></li></ol><h3 id="13-2-MyBatis缓存"><a href="#13-2-MyBatis缓存" class="headerlink" title="13.2 MyBatis缓存"></a>13.2 MyBatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li><strong>二级缓存需要手动开启和配置</strong>，它是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><ul><li>一级缓存也叫本地缓存：SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库。</li></ul></li></ul><p>测试步骤：</p><ol><li><p>开启日志！</p></li><li><p>测试在一个Session中查询两次相同记录</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看日志输出</p></li></ol><p><a href="https://imgtu.com/i/fleb36"><img src="https://z3.ax1x.com/2021/08/08/fleb36.jpg" alt="显然使用了缓存"></a></p><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fln6yT"><img src="https://z3.ax1x.com/2021/08/08/fln6yT.jpg" alt="增删改操作会清理缓存"></a></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 手动清理缓存</span>sqlSession<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>小节：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接的区间段。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存的作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间对应一个二级缓存</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查询的数据会放在自己对应的缓存中</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 显式的开启全局缓存 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在当前Mapper.xml中使用二级缓存 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自定义一些参数：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在当前Mapper.xml中使用二级缓存 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><p>问题：我们需要将实体类序列化！否则就会报错</p><pre class="line-numbers language-xml"><code class="language-xml">Caused by: java.io.NotSerializableException: com.techaoba.pojo.User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  SqlSession sqlSession2 <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/flQEAe"><img src="https://z3.ax1x.com/2021/08/08/flQEAe.jpg" alt="二级缓存结果"></a></p><p>小节：</p><ul><li><p>只要开启了二级缓存，在同一个Mapper下就有效</p></li><li><p>所有的数据都会先放在一级缓存中</p></li><li><p>只有当会话提交，或者关系的时候，才会提交到二级缓存中</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习笔记</title>
      <link href="2021/07/17/spring-xue-xi-bi-ji/"/>
      <url>2021/07/17/spring-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="x-使用Spring实现Aop"><a href="#x-使用Spring实现Aop" class="headerlink" title="x. 使用Spring实现Aop"></a>x. 使用Spring实现Aop</h2><p>使用AOP植入，需要导入一个依赖包：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下三种实现方式：</p><h3 id="x-1-方式一-使用Spring的API接口【主要SpringAPI接口实现】"><a href="#x-1-方式一-使用Spring的API接口【主要SpringAPI接口实现】" class="headerlink" title="x.1 方式一 使用Spring的API接口【主要SpringAPI接口实现】"></a>x.1 方式一 <strong>使用Spring的API接口</strong>【主要SpringAPI接口实现】</h3><p>用户接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切入类定义(通过SpringAPI接口实现)：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// method：要执行的目标对象的方法</span>    <span class="token comment" spellcheck="true">// args：参数</span>    <span class="token comment" spellcheck="true">// object：目标对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// returnValue；返回值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>Object returnValue<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法，返回结果为："</span> <span class="token operator">+</span> returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicationContext.xml：</p><p>​    其中execution表达式的<strong>第一个星号表示任意返回值类型</strong>，第二个参数为用户实现类的所有方法。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注册bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.service.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.log.Log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.log.AfterLog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式一：使用原生Spring API接口 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop:需要导入aop的约束 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 方式一：使用原生Spring API接口 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop:需要导入aop的约束 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 切入点(pointcut) expression:表达式,execution(要执行的位置) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.techaoba.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 执行环绕增加！ --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理代理的是接口</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-2-方式二-自定义来实现AOP【主要面向切面定义】"><a href="#x-2-方式二-自定义来实现AOP【主要面向切面定义】" class="headerlink" title="x.2 方式二 自定义来实现AOP【主要面向切面定义】"></a>x.2 方式二 <strong>自定义来实现AOP</strong>【主要面向切面定义】</h3><p>自定义类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">diyPointCut</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行前====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行后====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注册bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.service.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式二：自定义类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.diy.diyPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自定义切面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 切入点 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.techaoba.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-3-方式三-使用注解实现"><a href="#x-3-方式三-使用注解实现" class="headerlink" title="x.3 方式三 使用注解实现"></a>x.3 方式三 使用注解实现</h3><p>在类中直接使用注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式三：使用注解实现AOP，@Aspect标注这个类是一个切面</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationPointCut</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行前======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行后======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在环绕增强中，我们可以给定一个参数，代表我们要处理切入的点（一般不用该方法）：</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroud</span><span class="token punctuation">(</span>ProceedingJoinPoint jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行方法</span>        Object proceed <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得签名</span>        Signature signature <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"signature"</span> <span class="token operator">+</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 方式三 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.diy.AnnotationPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启注解支持！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="y-回顾和整合Mybatis"><a href="#y-回顾和整合Mybatis" class="headerlink" title="y 回顾和整合Mybatis"></a>y 回顾和整合Mybatis</h2><h3 id="y-1-回顾Mybatis"><a href="#y-1-回顾Mybatis" class="headerlink" title="y.1 回顾Mybatis"></a>y.1 回顾Mybatis</h3><p>步骤：</p><ul><li>导入相关jar包<ul><li>junit</li><li>Mybatis</li><li>Mysql数据库</li><li>aop植入</li><li>mybatis-spring</li><li>maven静态资源过滤问题</li></ul></li><li>编写配置文件</li><li>测试</li></ul><p>导入Maven依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring操作数据库的话，还需要一个spring-jdbc --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户映射类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Mapper文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- configuration核心配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM mybatis.user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis.xml 配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- configuration核心配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resources <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream input <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="y-2-整合Mybatis方式一"><a href="#y-2-整合Mybatis方式一" class="headerlink" title="y.2 整合Mybatis方式一"></a>y.2 整合Mybatis方式一</h3><p>mybatis.xml 配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-dao.xml 配置文件(sqlSessionFactory 和 SqlSessionTemplate)：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- DataSource: 使用Spring的数据源替换Mybatis的配置         这里我们使用Spring提供的JDBC : org.springframework.jdbc.datasource    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- sqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 绑定 Mybatis配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/techaoba/mapper/*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SqlSessionTemplate: 就是我们使用的sqlSession --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 只能使用构造器注入sqlSessionFactory，因为它没有set方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增UserMapperImpl实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们的所有操作，原来都使用sqlSession来执行，现在都使用SqlSessionTemplate！</span>    <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-dao.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper userMapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">,</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="y-2-整合Mybatis方式二-使用继承SqlSessionDaoSupport类"><a href="#y-2-整合Mybatis方式二-使用继承SqlSessionDaoSupport类" class="headerlink" title="y.2 整合Mybatis方式二(使用继承SqlSessionDaoSupport类)"></a>y.2 整合Mybatis方式二(使用继承SqlSessionDaoSupport类)</h3><p>UserMapperImpl2实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl2</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-dao.xml 添加：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapperImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="z-事务"><a href="#z-事务" class="headerlink" title="z. 事务"></a>z. 事务</h2><h3 id="z-1-事务回顾"><a href="#z-1-事务回顾" class="headerlink" title="z.1 事务回顾"></a>z.1 事务回顾</h3><p>ACID原则：</p><ul><li>原子性（Atomicity）<ul><li>一个事务的所有系列操作步骤被看成一个动作，所有的步骤要么全部完成，要么一个也不会完成。如果在事务过程中发生错误，则会回滚到事务开始前的状态，将要被改变的数据库记录不会被改变。</li></ul></li><li>一致性（Consistency）<ul><li>事务在开始和结束时，应该始终满足一致性约束。比如系统要求A+B=100，那么事务如果改变了A的数值，则B的数值也要相应修改来满足这样一致性要求。</li></ul></li><li>隔离性（Isolation）<ul><li>如果有多个事务同时执行，彼此之间不需要知晓对方的存在，而且执行时互不影响，事务之间需要序列化执行，有时间顺序。</li></ul></li><li>持久性（Durability）<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化地写到存储器中！</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="2021/07/16/springmvc-xue-xi-bi-ji/"/>
      <url>2021/07/16/springmvc-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC学习笔记"><a href="#SpringMVC学习笔记" class="headerlink" title="SpringMVC学习笔记"></a>SpringMVC学习笔记</h1><h2 id="1-MVC架构"><a href="#1-MVC架构" class="headerlink" title="1. MVC架构"></a>1. MVC架构</h2><p>MVC：<strong>模型Model</strong>（Dao, Service）  <strong>视图View</strong>（jsp）  <strong>控制器Controller</strong>（Servlet）</p><h2 id="2-Servlet"><a href="#2-Servlet" class="headerlink" title="2. Servlet"></a>2. Servlet</h2><p>创建Maven项目，父pom.xml加入如下依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建springMVC-01-servlet的Maven子项目，导入如下依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键springMVC-01-servlet子项目-&gt;Add Framework Support-&gt;Web Application</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用元学习在知识图谱中进行少样本的链接预测任务</title>
      <link href="2021/06/24/shi-yong-yuan-xue-xi-zai-zhi-shi-tu-pu-zhong-jin-xing-shao-yang-ben-de-lian-jie-yu-ce-ren-wu/"/>
      <url>2021/06/24/shi-yong-yuan-xue-xi-zai-zhi-shi-tu-pu-zhong-jin-xing-shao-yang-ben-de-lian-jie-yu-ce-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Meta-Relational-Learning-for-Few-Shot-Link-Prediction-in-Knowledge-Graphs"><a href="#Meta-Relational-Learning-for-Few-Shot-Link-Prediction-in-Knowledge-Graphs" class="headerlink" title="Meta Relational Learning for Few-Shot Link Prediction in Knowledge Graphs"></a>Meta Relational Learning for Few-Shot Link Prediction in Knowledge Graphs</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;链接预测是补全知识图谱的一种重要手段，虽然基于嵌入方法的链接预测是有效的方法，但是对于小样本的关系三元组来说预测的表现较差。在本篇论文中提出了一个元关系学习架构（MetaR）去完成常见并富有挑战性的少样本链接预测任务。我们通过传递特定关系元信息在小样本知识图谱关系链接上，来使模型学习最重要的知识并且学习的更快，特定关系元信息分别对应于Meta-R模型中的关系元和梯度元。模型取得了SOTA的效果。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;虽然知识图谱由大量的实体，关系和三元组组成，许多知识图谱依然是不完整的，因此知识图谱补全对于知识图谱的发展来说至关重要。一种补全的任务是链接预测，通过现有的三元组预测新的关系三元组。其中，KG的嵌入是有效的方法。他们学习连续向量空间中实体和关系的潜在表示（称为嵌入），并通过计算和嵌入来完成链接预测。</p><p>&#8195;&#8195;知识图谱嵌入方法的有效性与训练样本的数量正相关，因此当训练样本数量少时预测精度不高。然而，小样本问题确实广泛存在于KG当中的。例如，在Wiki数据中大约10%的关系对应的三元组实例不超过10个。在本篇论文中，我们致力于研究知识图谱小样本链接预测，在给予K个关于关系r的三元组后，通过头实体h和关系r预测尾实体t，通常来说K很小。图1描述了一个3样本链接预测的例子。</p><p><a href="https://imgtu.com/i/RMD9gJ"><img src="https://z3.ax1x.com/2021/06/24/RMD9gJ.jpg" alt="Figure 1"></a></p><p>对于知识图谱上的小样本的链接预测任务，其第一次提出的解决方案为GMatching，这种方法的目标是通过考虑一阶的图结构和学习编码方式来得到一个匹配矩阵。在本文中，我们采用的另外一种思路来完成知识图谱的补全任务，我们的思路为：从小样本中传递到不完整的三元组的信息，应该是在一个任务中共享的，普遍的信息。称这种信息为关系元信息，并且提出了对于解决小样本的链接预测任务的关系元学习的新的学习框架MetaR。同样利用上面的图示，框架将CEOof信息和 CountryCapital通过元关系学习框架从已经存在的小样本传递到不完整的三元组上。</p><p>我们定义的关系元信息主要从以下两个方面来帮助我们完成链接预测的任务：</p><ul><li>将普遍的关系信息从已经存在的三元组传递到不完整的三元组上。</li><li>在一个任务中通过观察小样本加速学习过程。</li></ul><p>因此，我们提出两种关系元信息：关系元信息和梯度元信息。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> Meta Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元学习综述</title>
      <link href="2021/06/15/yuan-xue-xi-zong-shu/"/>
      <url>2021/06/15/yuan-xue-xi-zong-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="深度元学习的综述"><a href="#深度元学习的综述" class="headerlink" title="深度元学习的综述"></a>深度元学习的综述</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;深度神经网络在提供大量数据集和足够计算资源时可以表现出特别优秀的表现。然而，它们快速学习新概念的能力非常有限。元学习就是解决这个问题的一种方法，它可以使得网络学习如何去学习。那么本篇论文针对元学习目前的技术，理论基础，重要方法进行综述性的总结。此外，我们确定了主要开放的挑战，比如异构基准的性能评估以及降低元学习的计算成本。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;在近些年，深度学习技术在各种任务重取得了卓越的成功，包括博弈、图片识别、机器翻译以及生物领域的自动分类。尽管如此，深度神经网络依然包含许多挑战没有得到解决，比如它需要大量的数据和训练支持其取得好的性能。而这种苛刻的要求限制了深度神经网络快速学习新概念的能力。</p><p>&#8195;&#8195;元学习可以克服上面所提出的挑战。其主要的思路是元学习智能体可以不断地提升自身的学习能力，换一种说法，就是学习如何去学习。学习过程主要关注任务和发生两种不用的层次：inner层和outer层。出现一个新的任务时，智能体会尝试在inner层快速学习来自训练观察中的相关概念。这种快速的适应能力受益于早期outer-lever任务所累积学到的知识。因此，inner层面关注的是单个任务，而outer层面关注的多个任务。</p><p>&#8195;&#8195;元学习属于应用于多个领域中。广义上，元学习利用之前学习的经验封装起来，从而可以快速学习新的任务。这种广义的概念包含更多传统算法的选择以及机器学习超参数优化的技术。而在本篇论文中，我们只关注对于神经网络中利用元学习方法学习好的归纳偏置的元学习领域子集。之后，论文中的深度元学习就对应这个子集。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 综述 </tag>
            
            <tag> 元学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据的回滚</title>
      <link href="2021/06/10/mysql-shu-ju-de-hui-gun/"/>
      <url>2021/06/10/mysql-shu-ju-de-hui-gun/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac中使用binlog2sql进行数据回滚"><a href="#Mac中使用binlog2sql进行数据回滚" class="headerlink" title="Mac中使用binlog2sql进行数据回滚"></a>Mac中使用<strong>binlog2sql</strong>进行数据回滚</h1><p>总所周知数据库的日志文件是保证数据库安全的必要手段，若没有日志文件或者备份等手段，稍不留神的误操作便会迫不得已而跑路。建议开启binlog并配置binlog2sql工具进行日志的记录以及必要时刻的回滚。</p><h2 id="1-binlog2sql的下载"><a href="#1-binlog2sql的下载" class="headerlink" title="1. binlog2sql的下载"></a>1. binlog2sql的下载</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/danfengcao/binlog2sql.git<span class="token function">cd</span> binlog2sqlpip <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-Mac中Mysql配置文件"><a href="#2-Mac中Mysql配置文件" class="headerlink" title="2. Mac中Mysql配置文件"></a>2. Mac中Mysql配置文件</h2><p>在MacBook中安装的mysql默认是没有配置文件的，下面介绍一下配置相关文件的步骤。</p><p>首先可以使用命令查看mysql指定my.cnf配置文件的路径优先级：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql --help<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'my.cnf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/2RETVP"><img src="https://z3.ax1x.com/2021/06/10/2RETVP.jpg" alt="mac中mysql的配置文件路径优先级"></a></p><p>可以看出/etc/my.cnf文件是mysql首先查找的文件，因此我们选择把配置文件放在该目录下（<a href="https://www.jianshu.com/p/55ba63012185">原文链接</a>）</p><p>这里我直接给出配置好的my.conf配置文件：</p><p>链接: <a href="https://pan.baidu.com/s/1MRuFmKZStThePgI9JcLs-Q">https://pan.baidu.com/s/1MRuFmKZStThePgI9JcLs-Q</a>  密码: jabf</p><p>注意不要使用mac自带的文本编辑器打开配置文件，这样会改变文件的编码格式，而MySQL的配置文件需要时ASNI/ASCII格式的，所以可以使用vim进行编辑。</p><p>把配置文件放入/etc/并修改文件权限为664，不然MySQL读取文件的时候权限会出错:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> ~/Desktop/my.cnf /etc/<span class="token function">cd</span> /etc<span class="token function">sudo</span> <span class="token function">chmod</span> 664 my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在改完这个配置的之后，<strong>重启MySQL服务器会启动不了</strong>。不要慌，我们只需要重启电脑就可以了。</p><h2 id="3-误删数据"><a href="#3-误删数据" class="headerlink" title="3. 误删数据"></a>3. 误删数据</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登陆数据库</span>$ mysql -u adminName -p <span class="token string">'password'</span><span class="token comment" spellcheck="true"># 选择数据库</span><span class="token operator">></span> show databases<span class="token punctuation">;</span><span class="token operator">></span> use test_database<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看数据</span><span class="token operator">></span> show tables<span class="token punctuation">;</span><span class="token operator">></span> SELECT * FROM table_name<span class="token punctuation">;</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span> upload_id <span class="token operator">|</span> user_id <span class="token operator">|</span> media_name    <span class="token operator">|</span> upload_time         <span class="token operator">|</span> media_url <span class="token operator">|</span> media_class <span class="token operator">|</span> media_module_id <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span>         1 <span class="token operator">|</span>       1 <span class="token operator">|</span> 媒体文件1     <span class="token operator">|</span> 2021-06-10 18:45:35 <span class="token operator">|</span> media1    <span class="token operator">|</span>           1 <span class="token operator">|</span>               1 <span class="token operator">|</span><span class="token operator">|</span>         2 <span class="token operator">|</span>       2 <span class="token operator">|</span> 媒体文件2     <span class="token operator">|</span> 2021-06-10 18:47:10 <span class="token operator">|</span> media2    <span class="token operator">|</span>           2 <span class="token operator">|</span>               2 <span class="token operator">|</span><span class="token operator">|</span>         3 <span class="token operator">|</span>       3 <span class="token operator">|</span> 媒体文件3     <span class="token operator">|</span> 2021-06-10 18:47:13 <span class="token operator">|</span> media3    <span class="token operator">|</span>           3 <span class="token operator">|</span>               3 <span class="token operator">|</span><span class="token operator">|</span>         4 <span class="token operator">|</span>       4 <span class="token operator">|</span> 媒体文件4     <span class="token operator">|</span> 2021-06-10 18:47:16 <span class="token operator">|</span> media4    <span class="token operator">|</span>           4 <span class="token operator">|</span>               4 <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token comment" spellcheck="true"># 假装误操作，删除数据</span><span class="token operator">></span> DELETE FROM upload_media<span class="token punctuation">;</span>Query OK, 4 rows affected <span class="token punctuation">(</span>0.03 sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看日志文件</span><span class="token operator">></span> show master logs<span class="token punctuation">;</span>+------------------+-----------+<span class="token operator">|</span> Log_name         <span class="token operator">|</span> File_size <span class="token operator">|</span>+------------------+-----------+<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>     11367 <span class="token operator">|</span>+------------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数据回滚"><a href="#4-数据回滚" class="headerlink" title="4. 数据回滚"></a>4. 数据回滚</h2><p>可以使用binlog2sql把日志文件转为sql形式的语句查看日志所记录的sql操作。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 来到binlog2sql安装目录</span>$ cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sbin<span class="token operator">/</span>binlog2sql<span class="token comment" spellcheck="true"># 执行python代码（注意sudo）</span>$ sudo python binlog2sql<span class="token operator">/</span>binlog2sql<span class="token punctuation">.</span>py <span class="token operator">-</span>h127<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>P3306 <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token string">'123456'</span> <span class="token operator">-</span>d test_user <span class="token operator">-</span>t upload_media <span class="token operator">-</span><span class="token operator">-</span>start<span class="token operator">-</span>file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:45:35'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:10'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:13'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:16'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据输出的start和end信息完成相应数据的回滚，以上删除的四条数据start为10916，end为11336，首先检查回滚sql是否正确</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -u root -p<span class="token string">'123456'</span> -d test_user -t upload_media --start-file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span> --start-pos<span class="token operator">=</span>10916 --end-pos<span class="token operator">=</span>11336 -B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'媒体文件4'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:16'</span><span class="token punctuation">,</span> <span class="token string">'media4'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'媒体文件3'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:13'</span><span class="token punctuation">,</span> <span class="token string">'media3'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'媒体文件2'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:10'</span><span class="token punctuation">,</span> <span class="token string">'media2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'媒体文件1'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:45:35'</span><span class="token punctuation">,</span> <span class="token string">'media1'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果sql语句没有错误则在上面执行语句的基础上加” | mysql -h127.0.0.1 -P3306 -uroot -p’123456’ “，执行回滚语句：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -u root -p<span class="token string">'123456'</span> -d test_user -t upload_media --start-file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span> --start-pos<span class="token operator">=</span>10916 --end-pos<span class="token operator">=</span>11336 -B <span class="token operator">|</span> mysql -h127.0.0.1 -P3306 -uroot -p<span class="token string">'123456'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数据库：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM upload_media<span class="token punctuation">;</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span> upload_id <span class="token operator">|</span> user_id <span class="token operator">|</span> media_name    <span class="token operator">|</span> upload_time         <span class="token operator">|</span> media_url <span class="token operator">|</span> media_class <span class="token operator">|</span> media_module_id <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span>         1 <span class="token operator">|</span>       1 <span class="token operator">|</span> 媒体文件1     <span class="token operator">|</span> 2021-06-10 18:45:35 <span class="token operator">|</span> media1    <span class="token operator">|</span>           1 <span class="token operator">|</span>               1 <span class="token operator">|</span><span class="token operator">|</span>         2 <span class="token operator">|</span>       2 <span class="token operator">|</span> 媒体文件2     <span class="token operator">|</span> 2021-06-10 18:47:10 <span class="token operator">|</span> media2    <span class="token operator">|</span>           2 <span class="token operator">|</span>               2 <span class="token operator">|</span><span class="token operator">|</span>         3 <span class="token operator">|</span>       3 <span class="token operator">|</span> 媒体文件3     <span class="token operator">|</span> 2021-06-10 18:47:13 <span class="token operator">|</span> media3    <span class="token operator">|</span>           3 <span class="token operator">|</span>               3 <span class="token operator">|</span><span class="token operator">|</span>         4 <span class="token operator">|</span>       4 <span class="token operator">|</span> 媒体文件4     <span class="token operator">|</span> 2021-06-10 18:47:16 <span class="token operator">|</span> media4    <span class="token operator">|</span>           4 <span class="token operator">|</span>               4 <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，再也不用担心被公司炒鱿鱼辣！</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据回滚 </tag>
            
            <tag> 日志文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argparse的用法</title>
      <link href="2021/06/08/argparse-de-yong-fa/"/>
      <url>2021/06/08/argparse-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="python中argparse的用法"><a href="#python中argparse的用法" class="headerlink" title="python中argparse的用法"></a>python中argparse的用法</h1><h2 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1. 位置参数"></a>1. 位置参数</h2><p>定义prog.py文件如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>echo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行：</p><pre class="line-numbers language-bash"><code class="language-bash">$ python3 prog.pyusage: prog.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token keyword">echo</span>prog.py: error: the following arguments are required: <span class="token keyword">echo</span>$ python3 prog.py --helpusage: prog.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token keyword">echo</span>positional arguments:  <span class="token keyword">echo</span>optional arguments:  -h, --help  show this <span class="token function">help</span> message and <span class="token keyword">exit</span>$ python3 prog.py foofoo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>echo为位置参数，必须为该参数传递一个值，args可以拿到argparse对象的所有选项的值。</p><h2 id="2-help属性"><a href="#2-help属性" class="headerlink" title="2. help属性"></a>2. help属性</h2><p>定义prog.py文件如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"echo the string you use here"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>echo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行：</p><pre class="line-numbers language-bash"><code class="language-bash">$ python3 prog.py -husage: prog.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token keyword">echo</span>positional arguments:  <span class="token keyword">echo</span>        <span class="token keyword">echo</span> the string you use hereoptional arguments:  -h, --help  show this <span class="token function">help</span> message and <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出指定help属性值以后在查看文件帮助的时候选项后会显示其作用。</p><h2 id="3-type属性"><a href="#3-type属性" class="headerlink" title="3. type属性"></a>3. type属性</h2><p>现在我们想要通过argparse实现计算一个数平方的功能。写出如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparse <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"square"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"calculate the square of a given number."</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>square<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行：</p><pre class="line-numbers language-bash"><code class="language-bash">python3 prog.py 3     Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"/Users/techaoba/Desktop/prog.py"</span>, line 6, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    print<span class="token punctuation">(</span>args.square**2<span class="token punctuation">)</span>TypeError: unsupported operand type<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> ** or pow<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token string">'str'</span> and <span class="token string">'int'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到默认传递的参数为字符串，因此<strong>使用type属性指定选项的参数类型</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparse <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"square"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"calculate the square of a given number."</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>args <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>square<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行：</p><pre class="line-numbers language-bash"><code class="language-bash">$ python3 prog.py 39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-可选参数"><a href="#4-可选参数" class="headerlink" title="4. 可选参数"></a>4. 可选参数</h2><p><strong>选项名称形式为”–xxx”</strong></p><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--verbosity"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"increase output verbosity"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>verbosity<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"verbosity turned on"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 prog<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>verbosity averbosity turned on$ python3 prog<span class="token punctuation">.</span>py$ python3 prog<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>helpusage<span class="token punctuation">:</span> prog<span class="token punctuation">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>verbosity VERBOSITY<span class="token punctuation">]</span>optional arguments<span class="token punctuation">:</span>  <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span>help            show this help message <span class="token operator">and</span> exit  <span class="token operator">-</span><span class="token operator">-</span>verbosity VERBOSITY                        increase output verbosity$ python3 prog<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>verbosityusage<span class="token punctuation">:</span> prog<span class="token punctuation">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>verbosity VERBOSITY<span class="token punctuation">]</span>prog<span class="token punctuation">.</span>py<span class="token punctuation">:</span> error<span class="token punctuation">:</span> argument <span class="token operator">-</span><span class="token operator">-</span>verbosity<span class="token punctuation">:</span> expected one argument<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于可选参数可以不进行传值，那么args.verbosity为None，相当于False。</p><h2 id="4-action-”store-true”"><a href="#4-action-”store-true”" class="headerlink" title="4. action=”store_true”"></a>4. action=”store_true”</h2><p>当我们只想通过可选参数触发某一事件，而非用于计算的时候使用action=”store_true”</p><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--verbose"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"increase output verbosity"</span><span class="token punctuation">,</span>                    action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"verbosity turned on"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-bash"><code class="language-bash">$ python3 prog.py --verboseverbosity turned on$ python3 prog.py --verbose 1usage: prog.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--verbose<span class="token punctuation">]</span>prog.py: error: unrecognized arguments: 1$ python3 prog.py --helpusage: prog.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--verbose<span class="token punctuation">]</span>optional arguments:  -h, --help  show this <span class="token function">help</span> message and <span class="token keyword">exit</span>  --verbose   increase output verbosity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当选项加入action=”store_true”后，只用来判断是否选择该选项，不用传递值，传递反而报错。</p><h2 id="5-短选项"><a href="#5-短选项" class="headerlink" title="5. 短选项"></a>5. 短选项</h2><p>和可选参数一样，主要有缩略写法的功能。</p><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--verbose"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"increase output verbosity"</span><span class="token punctuation">,</span>                    action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"verbosity turned on"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 prog<span class="token punctuation">.</span>py <span class="token operator">-</span>vverbosity turned on$ python3 prog<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>helpusage<span class="token punctuation">:</span> prog<span class="token punctuation">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>v<span class="token punctuation">]</span>optional arguments<span class="token punctuation">:</span>  <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span>help     show this help message <span class="token operator">and</span> exit  <span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span>verbose  increase output verbosity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以注意到，这一新的能力也反映在帮助文本里。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种简单到令人沮丧的实体关系抽取方法</title>
      <link href="2021/05/17/yi-chong-jian-dan-dao-ling-ren-ju-sang-de-shi-ti-guan-xi-chou-qu-fang-fa/"/>
      <url>2021/05/17/yi-chong-jian-dan-dao-ling-ren-ju-sang-de-shi-ti-guan-xi-chou-qu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Frustratingly-Easy-Approach-for-Entity-and-Relation-Extraction–NAACL-2020"><a href="#A-Frustratingly-Easy-Approach-for-Entity-and-Relation-Extraction–NAACL-2020" class="headerlink" title="A Frustratingly Easy Approach for Entity and Relation Extraction–NAACL 2020"></a>A Frustratingly Easy Approach for Entity and Relation Extraction–NAACL 2020</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;端到端的关系抽取旨在识别命名实体和抽取之间的关系。大多数近期的工作把两个子任务联合建模，要么把它们构建为单结构的预测架构，要么通过参数共享的方法完成多任务学习。在本篇论文中，我们提出了一个简单的pipeline方式完成实体关系抽取，并且该模型在ACE04、ACE05和SciERC等标准上完成了新SOTA。相比于之前的使用同样预训练encoder的联合模型，该模型有1.7%到2.8%的F1性能提升。我们的方法本质上构建了两个相互独立的encoder，并只有实体模型为关系模型生成输入。通过一系列的实验，验证了为实体和关系学习不同的上下文表征，在关系模型的早期融入实体信息并合并全局上下文具有重要意义。最终我们也提出一种非常有效率的方法，该方法在推理时只需要经过一次实体和关系的编码，在精确率稍有下降的情况下速度提升了8到16倍。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;从非结构化文本中抽取实体关系是一个基础的信息抽取问题。这个问题可以分解为命名实体识别子任务和关系分类子任务。早期工作应用pipeline方法，训练一个模型抽取实体，而另外一个模型进行实体间关系分类。然而最近端到端联合学习模型在性能评估上占主导地位。长期以来人们都认为联合模型能够更好捕获实体和关系的内在联系，并帮助减轻误差传播问题。</p><p>&#8195;&#8195;在本篇论文中，重新审视了这个问题并且提出了学习两个建立在深度预训练语言模型之上编码器的简单方法。这两个模型在本篇论文中称为实体模型和关系模型，它们被独立训练，而关系模型的输入只依赖于实体模型提供的输入特征。我们的实体模型建立在span-level的表征，而关系模型建立在给予特定span对时上下文的表征。尽管方法十分简单，我们发现该pipeline方法非常有效：在使用相同的预训练encoders下，我们的模型在三个标准数据集ACE04、ACE05和SciERC中超出先前所有联合学习模型，超出现有SOTA的F1绝对评分1.7%到2.8%。</p><p>&#8195;&#8195;为了更好的理解这个方法的表现，我们完成了一系列细致的分析。首先我们观察到：</p><ol><li>实体和关系模型的上下文表征本质上捕获的是不同的信息，因此它们共享表征反而会降低性能。</li><li>把实体信息——包括边界和类型——作为关系模型的输入是非常关键的。</li><li>对于所有的任务结合跨句子信息很有用。</li></ol><p>&#8195;&#8195;因此，我们期待这样简单的模型在端到端关系抽取任务上可以成为一个强有力的baseline并且可以让我们重新审视联合学习对于关系抽取任务的价值。</p><p>&#8195;&#8195;最后，<strong>该模型的一个缺陷是需要让关系模型在每一个实体对上单独运行一次</strong>。而为了缓解这个问题，我们提出了一个新奇且高效的替代方案，通过近似计算以及分割实体对计算为一个个batch。这种近似的替代方案完成了8到16倍的加速同时只带来了轻微的精确率损失——在ACE05中F1数值下降1%。最终的模型称为<strong>PURE</strong>——the Princeton University Relation Extraction system。论文的贡献如下：</p><ul><li>提出了一个简单且有效的pipeline端对端关系抽取方法，取得了SOTA。</li><li>对于为何该模型可以有良好表现以及不同因素对于模型表现具有何种影响进行了细致的分析。结论为对于实体和关系分别学习不同的上下文表征相比于联合学习更加有效。</li><li>为了加速该模型的推理效率，提出了一个高效的近似模型，在提升运算速度的同时只有降低了一点精确度。</li></ul><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h2><hr><p>&#8195;&#8195;把以往联合学习模型分为两类：结构化预测和多任务学习。</p><h3 id="2-1-结构化预测"><a href="#2-1-结构化预测" class="headerlink" title="2.1 结构化预测"></a>2.1 结构化预测</h3><p>&#8195;&#8195;结构化预测方法把两个子任务融合成一个统一的框架，它的表现形式千变万化。所有这些方法需要完成全局最优化问题并且在推理的时候进行联合解码，解码过程使用束搜索或者强化学习。</p><h3 id="2-2-多任务学习"><a href="#2-2-多任务学习" class="headerlink" title="2.2 多任务学习"></a>2.2 多任务学习</h3><p>&#8195;&#8195;多任务学习的模型本质上建立了两个分离的模型用于实体识别和关系抽取，而它们之间有参数共享。</p><h2 id="3-方法"><a href="#3-方法" class="headerlink" title="3 方法"></a>3 方法</h2><hr><h3 id="3-1-问题定义"><a href="#3-1-问题定义" class="headerlink" title="3.1 问题定义"></a>3.1 问题定义</h3><p>&#8195;&#8195;问题的输入是一个句子X，它包括n个单词$x_1,x_2,…,x_n$，$S= { s_1,s_2,…,s_m }$表示X中所有可能的span，m的上限是L，$START_i$和$END_i$表示$s_i$的头尾索引。可以选择性地整合跨句子上下文信息。</p><h4 id="3-1-1-命名实体识别"><a href="#3-1-1-命名实体识别" class="headerlink" title="3.1.1 命名实体识别"></a>3.1.1 命名实体识别</h4><p>&#8195;让$\varepsilon$表示一组预定义的实体类型。命名实体识别任务就是对于每一个span，$s_i \in S$，去预测一个实体类型$y_e(s_i) \in \varepsilon \ or \ y_e(s_i) = \epsilon$，$\epsilon$表示该span并非一个实体。任务的输出为$Y_e=[(s_i,e):s_i \in S, e \in \varepsilon]$。</p><h4 id="3-1-2-关系抽取"><a href="#3-1-2-关系抽取" class="headerlink" title="3.1.2 关系抽取"></a>3.1.2 关系抽取</h4><p>&#8195;让$R$表示预定义的关系类型。任务是对于每一个span对$s_i \in S, s_j \in S$，预测一个关系类型$y_r(s_i,s_j) \in R$，或者它们之间没有关系:$y_r(s_i,s_j) = \epsilon$。任务的输出为$Y_r = [(s_i,s_j,r):s_i,s_j \in S,r \in R]$。</p><h2 id="3-2-我们的方法"><a href="#3-2-我们的方法" class="headerlink" title="3.2 我们的方法"></a>3.2 我们的方法</h2><p><a href="https://imgtu.com/i/4ilnKA"><img src="https://z3.ax1x.com/2021/09/13/4ilnKA.jpg" alt="Figure 1"></a></p><p>SciERC数据集中的一个例子。给出输入句子”MORPA is a fully implemented parser for a text-to-speech system”，端到端关系抽取模型需要抽取MORPA和PARSER两个实体并标注类型为METHOD，而TEXT-TO-SPEECH是TASK类型的实体。同时关系模型中MORPA作为PARSER的下意词，MORPA用于TEXT-TO-SPEECH。（a）实体模型一次性预测出所有实体。（b）通过实体类型marker的插入（如[S:MD]：METHOD类型的主语，[O:TK]：TASK类型的宾语），关系模型会独立地判断所有实体对之间的关系。（c）提出了一种支持批计算的近似关系模型。相同颜色的token共享位置嵌入。</p><p>如Figure 1所示，我们的方法包含实体模型和关系模型。实体模型首先输入句子并对于每一个span预测一个实体类型（或者$ \epsilon $）。然后我们单独处理每一对候选实体对，其中添加额外的marker token为了强调主语宾语以及它们的类型。</p><h2 id="3-3-实体模型"><a href="#3-3-实体模型" class="headerlink" title="3.3 实体模型"></a>3.3 实体模型</h2><p>实体模型是一个标准的span类型模型。首先使用预训练语言模型BERT获取每一个输入token $x_t$的上下文表征$X_t$，给定一个span $s_i \in S$，span表征$h_e(s_i)$定义如下：<br>$$<br>h_e(s_i) = [X_{START(i)} ; X_{END(i)} ; \varnothing(s_i)]<br>$$<br>其中$\varnothing(s_i) \in R^{dF}$表示span宽度特征的嵌入信息。之后span表征$h_e(s_i)$会被喂入前向神经网络中去预测实体类型的概率分布$e \in \varepsilon \cup \epsilon: P_e(e | s_i)$。</p><h2 id="3-4-关系模型"><a href="#3-4-关系模型" class="headerlink" title="3.4 关系模型"></a>3.4 关系模型</h2><p>关系模型旨在判断两个span$s_i, s_j$的关系类型。先前的一些方法在预测关系的过程中重新使用了span表征$h_e(s_i)$和$h_e(s_j)$。但是我们假设这些表征仅仅捕获到单个实体的上下文信息，不能够捕获span对之间的依赖关系。我们也认为在不同span对之间共享上下文表征是次优解。如句子”MORPA is a fully implemented parser for a text-to-speech system”中的is a对于MORPA和PARSER之间的关系非常关键，但是对于MORPA和TEXT-TO-SPEECH并无用处。</p><p>关系模型单独地处理每一对span，并在input层插入marker去强调主语、宾语以及它们的类型。特殊的，给定输入句子X以及一对主语–宾语span$s_i, s_j$，我们定义marker为$(S:e_i),(/S:e_i),(O:e_j),(/O:e_j)$，并把它们插入到span的前后。让$\widehat{X}$表示添加marker之后的序列：<br>$$<br>\widehat{X} = …(S:e_i),x_{START(i)},…,x_{END(i)},(/S:e_i),…(O:e_j),x_{START(j)},…,x_{END(j)},(/O:e_j),…<br>$$<br>使用第二个与训练编码器作用$\widehat{X}$得到输出表征$\widehat{x_t}$，拼接两个span的起始位置的数值获得span-pair的表征：<br>$$<br>h_r(s_i,s_j) = [ \widehat{x}<em>{\widehat{START(i)}};\widehat{x}</em>{\widehat{START(j)}}]<br>$$<br>其中两个下标为$(S:e_i),(O:e_j)$在$\widehat{X}$中的位置。最终$h_r(s_i,s_j)$被喂入前馈神经网络预测关系类型的概率分布。</p><p>这个在序列中添加marker的方法并不是新方法，以前有应用于关系分类。然而，大多数关系分类方法仅仅关注于给定的一对实体对，但对于多重实体对的有效性并没有探究。在5.1节的实验中我们观察到大提升，这也证实了假设：<strong>一个句子中不同实体对之间的关系所需的上下文表征不同</strong>。有些论文使用未标记的marker，如(S),(/S)。而先前一些工作关系模型中只输入了实体类型信息。实际上这两个信息都是有用的–如果判断“迪斯尼”是一个人还是一个组织对于理解关系是非常有用的信息。</p><h2 id="3-5-跨句子信息"><a href="#3-5-跨句子信息" class="headerlink" title="3.5 跨句子信息"></a>3.5 跨句子信息</h2><p><strong>跨句信息对于预测实体、关系，尤其是代词有用</strong>。有工作使用传播机制去整合跨句信息，有的工作使用三个句子大小的滑动窗口内容去提升性能。我们也评估了跨句信息在我们方法中的作用。因为我们希望与训练语言模型可以捕捉长距离的依赖，所以对于实体和关系模型简单地把句子长度拓展为固定的W。就是说对于一个长度为n的句子，模型将会在句子的左右两端分别扩展（W-n）/2个单词。</p><h2 id="3-6-训练和推理"><a href="#3-6-训练和推理" class="headerlink" title="3.6 训练和推理"></a>3.6 训练和推理</h2><p>微调实体和关系的预训练语言模型。使用交叉熵计算loss：</p><p><a href="https://imgtu.com/i/4AgVgS"><img src="https://z3.ax1x.com/2021/09/14/4AgVgS.jpg" alt="loss"></a></p><p>其中$e_i^*$表示$s_i$对应的正确实体类型，而$r_{i,j}^*$表示$s_i,s_j$span对所对应的正确关系类型。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> Relation Extration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体关系联合抽取的高效编码解码架构</title>
      <link href="2021/05/12/shi-ti-guan-xi-lian-he-chou-qu-de-gao-xiao-bian-ma-jie-ma-jia-gou/"/>
      <url>2021/05/12/shi-ti-guan-xi-lian-he-chou-qu-de-gao-xiao-bian-ma-jie-ma-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="Effective-Modeling-of-Encoder-Decoder-Architecture-for-Joint-Entity-and-Relation-Extraction–AAAI-2020"><a href="#Effective-Modeling-of-Encoder-Decoder-Architecture-for-Joint-Entity-and-Relation-Extraction–AAAI-2020" class="headerlink" title="Effective Modeling of Encoder-Decoder Architecture for Joint Entity and Relation Extraction–AAAI 2020"></a>Effective Modeling of Encoder-Decoder Architecture for Joint Entity and Relation Extraction–AAAI 2020</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;包含两个实体和一个关系的关系三元组通常可以在非结构化文本中抽取。再一个文本中可能存在多个关系三元组而且会存在多个三元组共享一个或者多个实体。这使得抽取任务变得非常有挑战性。大部分的工作采用pipeline的方法先识别出实体，随后在实体间查找它们之间的关系，这样一种方法会忽略关系三元组之间的关联。在本论文中，我们使用两种encoder-decoder的架构去联合抽取实体关系。在第一种方法中，我们把关系三元组进行编码，然后使用decoder像机器翻译模型一样一次生成一个单词，最终能够完成多词实体和重叠关系的抽取。第二种方法是使用指针指出实体头尾的decoder方法。实验数据为New York Times语料库，实验结果表现出该模型良好的性能。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;如远程监督等等的使用pipeline方法忽略多关系三元组在句子当中的相互关联。近期一些神经网络模型用于句子的实体关系联合抽取，这些模型使用参数共享机制在同一个网络中抽取三元组，但是它们任然是先抽取出所有实体再关系分类，效果不理想。Encoder-decoder模型在机器翻译、句子生成和开放信息抽取等诸多NLP领域表现出不凡的实力。</p><p>&#8195;&#8195;在本篇论文中，我们探究了使用encoder-decoder方法对于句子中关系三元组任务会有怎样好的效果。该任务的三个主要挑战如下：</p><ul><li>构建的模型需要能够同时抽取实体和关系。</li><li>模型能够抽取出重叠关系三元组。</li><li>模型能够抽取完整的实体单词。</li></ul><p>&#8195;&#8195;为了应对这三个挑战，我们提出两个使用encoder-decoder架构的新方法。<strong>第一种</strong>方法先把多实体，重叠关系以及完整的实体单词使用encoder进行表征，然后decoder像机器翻译一样一次从表征中解码出一个单词，虽然该方法的表现不错，但是对于该任务来说一次只生成一个单词怎么看都不自然。<strong>第二种</strong>更加高效，它直接查找实体的开始和结束位置，每一个关系三元组被五个部分表示：头尾实体的开始结束位置以及它们之间的关系。通过这个想法，我们提出了一个pointer network-based解码架构。这个解码器包含两个pointer network发掘句子中头尾实体的开始结束位置，以及一个分类网络进行关系分类。这个方法是一次性抽取出整个三元组而非一次单词。</p><p><a href="https://imgtu.com/i/gBMOeI"><img src="https://z3.ax1x.com/2021/05/13/gBMOeI.jpg" alt="Table 1"></a></p><p>这篇论文的主要贡献如下：</p><ol><li>提出一个表征关系三元组的新方案，每次抽取出一个单词，最终可以抽取出带重叠关系的多个三元组。也提出了一种masking-based copy mechanism只从源句子中抽取出实体。</li><li>使用了更适用于该任务的pointer networks进行解码。每一步解码器会抽取出整个关系三元组而非单个单词。这种新的解码架构能够可以加速训练过程并减少GPU内存，这也是我们从句子级别三元组转为文档级别抽取的重要元素。</li><li>在NYT数据集上的实验结果表明该模型的杰出表现，并为这些数据集设定了一个新的标准。</li></ol><h2 id="2-任务描述"><a href="#2-任务描述" class="headerlink" title="2 任务描述"></a>2 任务描述</h2><hr><p>&#8195;&#8195;一个关系三元组包含两个实体以及一个关系，这样的三元组中实体在句子中定义为text span而关系来自于一个预训练的集合R。这些三元组可能共享一个或者全部实体，基于此，我们把句子划分为三个种类：</p><ol><li><em>No Entity Overlap–NEO</em>：一个句子中所有的三元组都没有实体共享。</li><li><em>Entity Pair Overlap–EPO</em>：句子中至少有一对三元组共享全部实体，实体顺序可能相同也可能相反。</li><li><em>Single Entity Overlap–SEO</em>：句子中至少有一对三元组只共享一个实体。</li></ol><p>&#8195;&#8195;需要注意句子可以同属于EPO和SEO类别。而我们的任务是抽取句子中所有这些关系三元组。</p><h2 id="3-Encoder-Decoder-架构"><a href="#3-Encoder-Decoder-架构" class="headerlink" title="3 Encoder-Decoder 架构"></a>3 Encoder-Decoder 架构</h2><hr><p>&#8195;&#8195;在这个任务中，模型的输入是一个单词序列，而输出是一系列的关系三元组。在第一个方法中，我们表示每一个三元组为entity1;entity2;relation。使用’;’作为三元组组成的分割符。多个三元组之间使用’|’进行分割。在Table 1中有一个直观的例子。由于这种统一的表示方案，实体token，关系token和特殊的token，即’;’和’|’，都被相同对待。句子中包含的线索单词可以帮助每一个关系三元组生成关系token。使用encoder-decoder模型抽取关系三元组的方式就是生成实体token，找到关系线索单词然后把它映射为关系token并且在生成过程中合适的时间生成合适的分割符。</p><h2 id="4-Embedding-Layer-amp-Encoder"><a href="#4-Embedding-Layer-amp-Encoder" class="headerlink" title="4 Embedding Layer &amp; Encoder"></a>4 Embedding Layer &amp; Encoder</h2><hr><p>&#8195;&#8195;我们创建一个单独的词表vocabulary V，它包含源句子的token，关系集合R中的关系名称，一些特殊的分割符，</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> Relation Extration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces 717 div2 题解</title>
      <link href="2021/04/23/codeforces-717-div2-ti-jie/"/>
      <url>2021/04/23/codeforces-717-div2-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="codeforces-717-div2-题解"><a href="#codeforces-717-div2-题解" class="headerlink" title="codeforces 717 div2 题解"></a>codeforces 717 div2 题解</h1><h2 id="题目链接：https-codeforces-com-contest-1516"><a href="#题目链接：https-codeforces-com-contest-1516" class="headerlink" title="题目链接：https://codeforces.com/contest/1516"></a>题目链接：<a href="https://codeforces.com/contest/1516">https://codeforces.com/contest/1516</a></h2><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a><font color='red' style='font-weight:bold'>A题</font></h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a><font style="font-weight:bold;">题面</font></h3><center style="font-weight:bold;font-size:28px">A. Tit for Tat</center><center>time limit per test: 1 second</center><center>memory limit per test: 256 megabytes</center><br><p>Given an array 𝑎 of length 𝑛, you can do at most 𝑘 operations of the following type on it:</p><ul><li>choose 2 different elements in the array, add 1 to the first, and subtract 1 from the second. However, all the elements of 𝑎 have to remain non-negative after this operation.</li></ul><p>What is lexicographically the smallest array you can obtain?</p><p>An array 𝑥 is <a href="https://en.wikipedia.org/wiki/Lexicographical_order">lexicographically smaller</a> than an array 𝑦 if there exists an index 𝑖 such that $x_i \lt y_i$, and $x_j = y_j$ for all $1\leq j\lt i$. Less formally, at the first index 𝑖i in which they differ, $x_i\lt y_i$.<br><br></p><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line contains an integer $t(1\leq t\leq 20)$ – the number of test cases you need to solve.</p><p>The first line of each test case contains 2 integers 𝑛 and 𝑘 $(2\leq n\leq 100,1\leq k\leq 10000)$ — the number of elements in the array and the maximum number of operations you can make.</p><p>The second line contains 𝑛n space-separated integers $a_1,a_2,…,a_n(0\leq a_i\leq 100)$ — the elements of the array 𝑎.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>For each test case, print the lexicographically smallest array you can obtain after at most 𝑘 operations.</p><br><p><font style="font-weight:bold;font-size:22px;" > Example</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">10</span><span class="token number">1</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">0</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p><font style="font-weight:bold;font-size:22px;" > Note</font></p><p>In the second test case, we start by subtracting 1 from the first element and adding 1 to the second. Then, we can’t get any lexicographically smaller arrays, because we can’t make any of the elements negative.</p><br><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a><font style="font-weight:bold;">题意</font></h3><p>&#8195;&#8195;给定一个n长度的数组，可以最多进行m次如下操作：任意选择两个数字，一个加一，另一个减一。需要保证在操作过程中数字不会变成负数，目标是让该数组的字典序最小。</p><br><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;使用贪心策略，每次选择最前面大于0的数字减一，同时最后一位数字加一。</p><br><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       m<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a><font color='red' style='font-weight:bold'>B题</font></h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a><font style="font-weight:bold;">题面</font></h3><center style="font-weight:bold;font-size:28px">B. AGAGA XOOORRR</center><center>time limit per test: 1 second</center><center>memory limit per test: 256 megabytes</center><br><p>Baby Ehab is known for his love for a certain operation. He has an array 𝑎a of length 𝑛, and he decided to keep doing the following operation on it:</p><ul><li>he picks 2 adjacent elements; he then removes them and places a single integer in their place: their <a href="https://en.wikipedia.org/wiki/Bitwise_operation#XOR">bitwise XOR</a>. Note that the length of the array decreases by one.</li></ul><p>Now he asks you if he can make all elements of the array equal. Since babies like to make your life harder, he requires that you leave at least 2 elements remaining.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line contains an integer $t(1\leq t \leq 15)$ — the number of test cases you need to solve.</p><p>The first line of each test case contains an integers $n(2 \leq n \leq 2000)$ — the number of elements in the array 𝑎.</p><p>The second line contains 𝑛n space-separated integers $a_1,a_2,…,a_n(0 \leq a_i \leq 2^{30})$ — the elements of the array 𝑎.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>If Baby Ehab can make all elements equal while leaving at least 2 elements standing, print “YES”. Otherwise, print “NO”.</p><br><p><font style="font-weight:bold;font-size:22px;" > Example</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">3</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp">YESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p><font style="font-weight:bold;font-size:22px;" > Note</font></p><p>In the first sample, he can remove the first 2 elements, 0 and 2, and replace them by $0⊕2=2$. The array will be $[2,2]$, so all the elements are equal.</p><p>In the second sample, there’s no way to make all the elements equal.</p><br><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a><font style="font-weight:bold;">题意</font></h3><p>&#8195;&#8195;给定一个长度为n的数组，每次可以选择两个相邻的数进行异或操作，异或的结果取代这两个数，就是说删除两个相邻数，在删除的位置插入两个数字异或的结果。目标是数组内剩下两个以上相同数字。如果可以达成目标输出YES，否则输出NO。</p><br><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;首先需要知道，异或操作满足以下性质：</p><ol><li>交换律。A^B = B^A</li><li>结合律。{A^B}^C = A^{B^C}</li><li>相同的数异或为0。A^A = 0</li><li>异或0不变。A^0 = A</li></ol><p>&#8195;&#8195;假如这个数组最终能够异或为m个A，那么3个A继续进行异或操作会变成一个A，那么最终只会存在两种情况：1. 剩余2个相等的数A。 2. 剩余三个相等的数A。</p><p>&#8195;&#8195;对于第一种情况，我们可以把两个A进行异或得到0，这样就等价于所有数组的数进行异或操作为0，所以首先可以对数组进行异或操作得到一个总的结果，如果结果为0则符合第一个情况。</p><p>&#8195;&#8195;对于第二种情况，我们可以这样考虑：把数组分为连续的3段，每一段的异或值等于A。而且总数组的异或值也等于A。对于这种则可以找到两个切割点，poi1和poi2，使得$[l,poi1],[poi1+1,poi2],[poi2+1,r]$的异或值相等。时间复杂度为$O(n)$。</p><br><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> xorNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xorNum <span class="token operator">^</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xorNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> newxor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newxor <span class="token operator">^</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newxor <span class="token operator">==</span> xorNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> xor1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xor1 <span class="token operator">^</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xor1 <span class="token operator">==</span> newxor<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a><font color='red' style='font-weight:bold'>C题</font></h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a><font style="font-weight:bold;">题面</font></h3><center style="font-weight:bold;font-size:28px">C. Baby Ehab Partitions Again</center><center>time limit per test: 2 second</center><center>memory limit per test: 256 megabytes</center><br><p>Baby Ehab was toying around with arrays. He has an array 𝑎 of length 𝑛. He defines an array to be good if there’s no way to partition it into 2 subsequences such that the sum of the elements in the first is equal to the sum of the elements in the second. Now he wants to remove the minimum number of elements in 𝑎 so that it becomes a good array. Can you help him?</p><p>A sequence 𝑏 is a subsequence of an array 𝑎 if 𝑏 can be obtained from 𝑎 by deleting some (possibly zero or all) elements. A partitioning of an array is a way to divide it into 2 subsequences such that every element belongs to exactly one subsequence, so you must use all the elements, and you can’t share any elements.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line contains an integer $n(2 \leq n \leq 100)$ — the length of the array 𝑎.</p><p>The second line contains 𝑛n integers $a_1,a_2,…,a_n(1 \leq a_i \leq 2000)$ — the elements of the array 𝑎.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>The first line should contain the minimum number of elements you need to remove.</p><p>The second line should contain the indices of the elements you’re removing, separated by spaces.</p><p>We can show that an answer always exists. If there are multiple solutions, you can print any.</p><br><p><font style="font-weight:bold;font-size:22px;" > Example</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">6</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p><font style="font-weight:bold;font-size:22px;" > Note</font></p><p>In the first example, you can partition the array into $[6,9]$ and $[3,12]$, so you must remove at least 1 element. Removing 3 is sufficient.</p><p>In the second example, the array is already good, so you don’t need to remove any elements.</p><br><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a><font style="font-weight:bold;">题意</font></h3><p>&#8195;&#8195;给定一个长度为n的数组，如果不能把数组任意划分为两个交集为空且并集为全集的子集，使得两个集合的和相等，则称这个数组为good array。请你选择最少的删除数组元素的方法使得数组为good array。</p><br><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;首先使用背包dp判断数组是否为good array。可以想到能够分为两个相等集合的数组求和必定为偶数，所以需要在good array数组里面找到奇数并且删除，那么数组一定会变成good array。</p><p>&#8195;&#8195;但是也可能存在数组中全为偶数的情况。那么可以把数组中的所有数字除以2知道数组中出现奇数时删除奇数即可。这样做的原因是对所有数组除以相同的数对于最终的结果没有影响。</p><p>&#8195;&#8195;进一步的，我们可以找到lowbit(x)最小的那个数字删除。还有一种做法则是所有数字除以它们的最大公约数，最终一定会存在一个奇数。</p><br><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">define</span> lowbit(x) (-x&amp;x)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">2e6</span><span class="token punctuation">;</span><span class="token keyword">bool</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// use gcd</span>    <span class="token keyword">int</span> gcdNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> gcdNum <span class="token operator">=</span> <span class="token function">__gcd</span><span class="token punctuation">(</span>gcdNum<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">=</span> gcdNum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n%d\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// use lowbit</span>    <span class="token keyword">int</span> poi <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> minVal <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">lowbit</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            poi <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            minVal <span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n%d\n"</span><span class="token punctuation">,</span> poi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> sum <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>target<span class="token punctuation">;</span>j<span class="token operator">>=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// solve1();</span>    <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> codeforces </tag>
            
            <tag> c++ </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PA-LSTM-CRF模型论文</title>
      <link href="2021/04/21/pa-lstm-crf-mo-xing-lun-wen/"/>
      <url>2021/04/21/pa-lstm-crf-mo-xing-lun-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="Joint-Extraction-of-Entities-and-Overlapping-Relations-Using-Position-Attentive-Sequence-Labeling–AAAI-2019"><a href="#Joint-Extraction-of-Entities-and-Overlapping-Relations-Using-Position-Attentive-Sequence-Labeling–AAAI-2019" class="headerlink" title="Joint Extraction of Entities and Overlapping Relations Using Position-Attentive Sequence Labeling–AAAI 2019"></a>Joint Extraction of Entities and Overlapping Relations Using Position-Attentive Sequence Labeling–AAAI 2019</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;在这篇论文中提出一种新的统一联合抽取模型，通过询问位置p直接标记该位置的实体以及和该位置实体相关关系和实体的标签。我们首先设计一个标记方案，对于n个单词的句子生成n个标记序列。然后设计了<strong>postition-attention mechanism</strong>–位置注意力机制，对于每一个查询位置p生成不同的句子表征，从而建模这n个标记序列。通过这种方法，可以同时抽取所有实体及其类型，以及重叠关系。实验表明，我们的模型在抽取重叠关系以及长距离关系任务有良好表现，并且在两个公共数据集上取得了最先进的性能。</p><p><a href="https://imgtu.com/i/cbssAO"><img src="https://z3.ax1x.com/2021/04/21/cbssAO.jpg" alt="Figure 1"></a></p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;RE$(Relation\ Extraction)$任务旨在检测非结构话文本实体间的语义关系。传统的RE方法把<strong>实体检测子任务</strong>和<strong>实体间的关系分类子任务</strong>作为pipeline的形式完成。这样的方法虽然容易实现，但是它忽视了两个子任务之间隐藏的依赖关系和错误传播的影响。</p><p>&#8195;&#8195;不同于pipeline方法，joint extraction方法使用一个联合模型同时完成这两个子任务。最近的研究也展现出joint extraction模型的优势，即可以高效地整合实体信息和关系信息，因此在两个子任务上都展示出良好表现。以往的联合模型大多是基于特征的结构化学习，这些方法很大程度上依赖于手工构建的特性和其他NLP工具包。近年来，已有多种神经网络结构被应用，它们大多利用参数共享进行联合建模。仍需要显式的独立分量来进行实体识别和关系分类。相对的，Zheng et al. 提出了一种特殊的标注方案，将联合提取转化为序列标注问题，统一求解。但是模型不能识别重叠关系，这可能会导致在处理具有重叠关系的句子时召回率较低。Zeng et al. (2018)采用带复制机制的序列到序列学习。虽然解决了重叠关系抽取，但改模型无法识别multi-word实体。</p><p><a href="https://imgtu.com/i/cbsbCQ"><img src="https://z3.ax1x.com/2021/04/21/cbsbCQ.jpg" alt="Figure 2"></a></p><p>&#8195;&#8195;在该论文中，提出了一种新的统一方法，根据查询位置p的词同时标注实体和关系标签来解决联合抽取问题。给定一个句子和询问位置p，我们的模型需要回答两个伪问题：1. 位置p处的实体和它的类型是什么。2. 哪些实体和p处实体有关。为此，本文设计了特殊的标记方案，即在位置p处标记实体标签，然后在其他位置标记关系标签$(see\ Figure\ 2)$。因此，实际上把联合抽取问题转化为一系列的序列标注问题。就是说，对于n个单词的句子，对其进行n次序列标注。为了在一个统一的模型中对句子的n个标记序列进行建模，在序列标记模型中引入了一种新的位置注意机制$(see\ Figure\ 3)$，以产生n种不同的位置感知句子表征。然后这些表征用于解码不同的标记结果，从这些标记结构中可以获取实体及其类型以及重叠关系，此外提出的注意力机制可以建立长距离单词间的连接，继而得到长距离关系。</p><p><strong>Contributions：</strong></p><ul><li><p>设计了一个能够同时表示实体类型和重叠关系的标记方案。</p></li><li><p>提出了一种位置注意机制，根据查询位置p产生不同的位置感知句子表示，用于解码不同的标记序列和提取重叠关系。</p></li><li><p>用两个公共数据集证明了该方法的有效性，并取得了最新的结果。此外，分析表明，本文的模型在提取长距离关系方面表现出更好的性能，这通常是比较困难的。</p></li></ul><h2 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h2><hr><h3 id="2-1-标记方案"><a href="#2-1-标记方案" class="headerlink" title="2.1 标记方案"></a>2.1 标记方案</h3><p>&#8195;&#8195;在Figure 2中，基于模型标记方案，根据不同的询问位置p标记了n个不同的标记序列。在每一个标记序列中，如果位置p是一个实体的开始位置则会在位置p标记该实体的类型，并且同时在和该实体有关系的实体位置标记上对应关系的tag。除此以外的位置被标记为“O”$(Outside)$。这样的话三元组就可以通过标记序列完成抽取任务。显然，通过这种标记方法可以抽取重叠关系。对于所有的实体和关系类型使用“BIES”$(Begin,Inside,End,Single)$标记，这样能够抽取multi-word实体。</p><p><a href="https://imgtu.com/i/cbWlRS"><img src="https://z3.ax1x.com/2021/04/21/cbWlRS.png" alt="Figure 3"></a></p><h3 id="2-2-结合位置注意力机制的端到端的列表标记模型"><a href="#2-2-结合位置注意力机制的端到端的列表标记模型" class="headerlink" title="2.2 结合位置注意力机制的端到端的列表标记模型"></a>2.2 结合位置注意力机制的端到端的列表标记模型</h3><p>&#8195;&#8195;使用本文的标记方案，构建了一个端到端序列标记神经体系结构$(Figure 3)$，以联合提取实体和重叠关系。首先使用RNN编码器把n-word句子进行编码。然后，使用位置注意力机制为每个查询位置p生成不同的位置感知句子表示；基于这些位置感知表示，最后使用条件随机场$(CRF)$对n个标签序列进行解码，以提取实体和重叠关系。</p><h4 id="2-2-1-Bi-LSTM-Encoder"><a href="#2-2-1-Bi-LSTM-Encoder" class="headerlink" title="2.2.1 Bi-LSTM Encoder"></a>2.2.1 <strong>Bi-LSTM Encoder</strong></h4><p>&#8195;&#8195;RNNs已经被证明有强大的捕获输入序列单词间依赖的能力。在模型中，使用了Bidirectional Long Short Term Memory$(Bi-LSTM)$作为RNN。对于句子中的单词表征，使用了单词的词嵌入$w_t^w$以及字符级$w_t^c$嵌入，其中字符级嵌入可以捕获单词形态学上的特征。最终的单词表征为二者的拼接$[w_t^w;w_t^c]$。接下来，Bi-LSTM计算向前和向后方向上的状态。</p><p><a href="https://imgtu.com/i/cbo2od"><img src="https://z3.ax1x.com/2021/04/21/cbo2od.jpg"></a></p><h4 id="2-2-2-Position-Attention-Mechanism"><a href="#2-2-2-Position-Attention-Mechanism" class="headerlink" title="2.2.2 Position-Attention Mechanism"></a>2.2.2 <strong>Position-Attention Mechanism</strong></h4><p>&#8195;&#8195; 抽取实体和其他实体之间关系的关键信息包含：</p><ol><li>该实体中的其他单词。</li><li>相依赖的实体。</li><li>表示依赖关系的上下文。</li></ol><p>&#8195;&#8195;基于这些考虑，提出位置注意力机制，它可以把询问位置的实体信息和句子中的上下文信息进行编码，生成位置感知和上下文感知表征$u_{t=1}^n$为:<br>$$<br>u_t=[h_t;c_t]\tag{3}<br>$$<br>其中$c_t=att(H,h_p,h_t)$是句子的注意力池化向量。<br>$$<br>s_{tj}=v^T tanh(W^H h_j+W^p h_p+W^h h_t)\\<br>a_{tj}= \frac{exp(s_{tj})}{ \sum_{k=1}^n exp(s_{tk})}\\<br>c_t=\sum_{t=1}^na_{tj}h_j\tag{4}<br>$$<br>其中$W^H,W^p,W^h,v$都是学习的参数，$h_j,h_p,h_t$分别为j，p，t位置通过Bi-LSTM求得的隐藏状态，$s_{tj}$是在每一个位置进行迭代的与p，t位置计算的一个相对分数，$a_{tj}$是$s_{tj}$进行归一化的注意力权重。笔者注$(自洽的说法)$：<strong>这里的j、p、t可以这样理解，p表示头实体的表征，t表示计算t位置实体与p头实体的关系，而在公式中迭代的j表示把句子中所有h与p和t进行对比计算求得各个位置的权重，求得的加权即为p头实体和t尾实体之间关系在上下文中所能够收集的隐藏信息。</strong></p><h4 id="2-2-3-CRF-Decoder"><a href="#2-2-3-CRF-Decoder" class="headerlink" title="2.2.3 CRF Decoder"></a>2.2.3 CRF Decoder</h4><p>&#8195;&#8195; 对于序列标注模型，同时考虑相邻标签和联合解码标签链是非常有必要的。因此，相对于独立解码每一个标签，模型采用条件随机场$(CRF)$进行联合解码。定义$Z= z_{t=1}^n$为输入序列分数，其中$z_t$是由位置感知的句子表征$u_t$计算得到：<br>$$<br>z_t=W^u u_t\tag{5}<br>$$<br>&#8195;&#8195; 其中$z_t \in R^{N_t}$为第t个单词的标记分数，$N_t$是标记分类的数量。定义$Z_{t,j}$为把位置t标记为第j个标签的分数。对于序列标签$\textbf{y} =  y_{t=1}^n$，定义解码标签的分数为:<br>$$<br>score(Z,y)=\sum^n_{t=0} A_{y_t,y_{t+1}} + \sum^n_{t=1} Z_{t,y_t}\tag{6}<br>$$<br>&#8195;&#8195; 其中，A矩阵式转移矩阵，$A_{i,j}$表示i标签转换为j标签的转移分数。接下来我们得到所有可能标签序列$\textbf{y}$的条件概率：<br>$$<br>p(y|Z)=\frac{exp(score(Z,y))}{\sum_{y’ \in Y_z} exp(score(Z,y’))}\tag{7}<br>$$<br>&#8195;&#8195; 其中，$Y_z$表示Z下所有可能的标记序列，在训练的过程中，会在训练集中最大化正确标记序列的对数似然：<br>$$<br>L=\sum_{i} \log{p(y|Z)}\tag{8}<br>$$<br>解码过程就是最大得分的标记序列：<br>$$<br>y’=argmax\ _{y \in Y_Z}\ score(Z,y)\tag{9}<br>$$</p><h4 id="2-2-4-Extracting-Entities-and-Overlapping-Relationsfrom-Tag-Sequences"><a href="#2-2-4-Extracting-Entities-and-Overlapping-Relationsfrom-Tag-Sequences" class="headerlink" title="2.2.4 Extracting Entities and Overlapping Relationsfrom Tag Sequences"></a>2.2.4 Extracting Entities and Overlapping Relationsfrom Tag Sequences</h4><p>&#8195;&#8195; 在标记方案中，三元组的头实体和它的实体类型可以从对应的询问位置的标记结果中得到。如果存在对应的实体，则在其他的对应位置会标记出它们之间的标记类型。重叠关系的抽取也因为一个实体可以在一次标记任务中对应多个实体关系而得以解决。<strong>除此以外，抽取的实体类型可以用于验证三元组，比如若关系是Born_in，那么三元组的第一个单词一定是PERSON。</strong></p><h2 id="3-实验"><a href="#3-实验" class="headerlink" title="3. 实验"></a>3. 实验</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> Relation Extraction </tag>
            
            <tag> Joint Extraction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树专题</title>
      <link href="2021/04/21/xian-duan-shu-zhuan-ti/"/>
      <url>2021/04/21/xian-duan-shu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树模板题"><a href="#线段树模板题" class="headerlink" title="线段树模板题"></a>线段树模板题</h1><h3 id="链接：洛谷-P3372-【模板】线段树-1"><a href="#链接：洛谷-P3372-【模板】线段树-1" class="headerlink" title="链接：洛谷 P3372 【模板】线段树 1"></a>链接：<a href="https://www.luogu.com.cn/problem/P3372">洛谷 P3372 【模板】线段树 1</a></h3><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>有两种操作：</p><ol><li>将区间$[x,y]$内每个数加上 <strong>k</strong>。</li><li>输出区间$[x,y]$内每个数的和。</li></ol><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>贴上线段树模板</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll num<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> segment_tree<span class="token punctuation">{</span>    ll l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> len<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>MAXN<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_down</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll mid <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">+</span><span class="token operator">=</span> z<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">*</span> z<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    push_up(root);</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> oper<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间加法和乘法的交替操作"><a href="#区间加法和乘法的交替操作" class="headerlink" title="区间加法和乘法的交替操作"></a>区间加法和乘法的交替操作</h2><h3 id="链接：洛谷-P3373-【模板】线段树-2"><a href="#链接：洛谷-P3373-【模板】线段树-2" class="headerlink" title="链接：洛谷 P3373 【模板】线段树 2"></a>链接：<a href="https://www.luogu.com.cn/problem/P3373">洛谷 P3373 【模板】线段树 2</a></h3><h3 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h3><p>有三种操作：</p><ol><li>将区间$[x,y]$内每个数乘上 <strong>k</strong>。</li><li>将区间$[x,y]$内每个数加上 <strong>k</strong>。</li><li>输出区间$[x,y]$内每个数的和对<strong>p</strong>取模所得的结果。</li></ol><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>使用两个lazy_tag：1. lazy_mul。2. lazy_add。</p><p>加法更新和以前的update函数相同，乘法更新要把lazy_add、lazy_mul、sum都乘上k。</p><p>push_down需要先下放乘法再下放加法，这样下放的加数都进行过乘法操作。</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>ll mod<span class="token punctuation">,</span> num<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> segment_tree<span class="token punctuation">{</span>    ll sum<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> len<span class="token punctuation">,</span> lazy_mul<span class="token punctuation">,</span> lazy_add<span class="token punctuation">;</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>MAXN<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_down</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll mul <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul<span class="token punctuation">,</span> add <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 首先把乘法下放到子树</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 再下放加法</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">+</span> add<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">+</span> add<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> add <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> add <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update_mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll mul<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_mul <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_mul</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> mul<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_mul</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> mul<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_add <span class="token operator">+</span> add<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> add <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_add</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_add</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> oper<span class="token punctuation">;</span>    ll l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>oper<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update_mul</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oper<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结合dfs序的线段树"><a href="#结合dfs序的线段树" class="headerlink" title="结合dfs序的线段树"></a>结合dfs序的线段树</h2><h3 id="链接：Codeforces-Round-442-Div-2-E-Danil-and-a-Part-time-Job"><a href="#链接：Codeforces-Round-442-Div-2-E-Danil-and-a-Part-time-Job" class="headerlink" title="链接：Codeforces Round #442-Div. 2-E. Danil and a Part-time Job"></a>链接：<a href="https://codeforces.com/problemset/problem/877/E">Codeforces Round #442-Div. 2-E. Danil and a Part-time Job</a></h3><h3 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h3><p>有一棵树，树的每一个节点表示一盏灯，有亮和不亮两种状态。两种操作：</p><ol><li>pow v:切换以v为根节点子树所有节点的状态$(on \rightarrow off\ or\ off \rightarrow on)$。</li><li>Get v:获取以v为根节点子树所有亮灯的数量。</li></ol><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><p>首先使用dfs序标记每一盏灯的序号，使用in[root], out[root]保存root节点子树所有节点序号的起始和终止。lazy_tag只会有0和1，使用异或操作，每次切换使用tree[root].len-tree[root].sum。</p><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dfn<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tim <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">struct</span> segment_tree<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> len<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> lazy<span class="token punctuation">;</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>MAXN<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tim<span class="token punctuation">;</span>    dfn<span class="token punctuation">[</span>tim<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>edge<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> to <span class="token operator">=</span> edge<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    out<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> tim<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_down</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">-</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">-</span> tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> num<span class="token punctuation">[</span>dfn<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">-</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l <span class="token operator">||</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>=</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pa<span class="token punctuation">,</span> root<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>        edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>        edge<span class="token punctuation">[</span>pa<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> oper<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> oper<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>oper<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'p'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> codeforces </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于会话的图神经网络推荐</title>
      <link href="2021/04/08/ji-yu-hui-hua-de-tu-shen-jing-wang-luo-tui-jian/"/>
      <url>2021/04/08/ji-yu-hui-hua-de-tu-shen-jing-wang-luo-tui-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Session-Based-Recommendation-with-Graph-Neural-Networks"><a href="#Session-Based-Recommendation-with-Graph-Neural-Networks" class="headerlink" title="Session-Based Recommendation with Graph Neural Networks"></a>Session-Based Recommendation with Graph Neural Networks</h1><br><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;基于会话的推荐旨在匿名用户会话中预测用户行为。以前的方法将会话建模为一个序列并通过预测用户表征和物品表征来做出推荐。虽然这种方法取得了不错的结果，但是它并没有在会话中获取精确的用户向量，同时也忽略了复杂的item transition。为了解决这两个问题，提出了<strong>SR-GNN</strong>模型。在此模型中，会话序列被建模为图形结构的数据，结合GNN捕捉复杂的item transition，达到常规序列方法难以实现的效果。然后使用attention网络把每一段对话表征为全局偏好和目前兴趣的组成部分。接下来在两个真实数据集上进行实验，结果表明SR-GNN的表现优于最先进的基于会话推荐的方法。</p><br><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;随着网络信息的迅速发展，推荐系统极大地帮助用户减轻信息过载的问题并在许多互联网应用中挑选出有意思的信息。比如搜索，电商和视频流网站。大多数现存推荐系统假定用户的配置文件和动作信息在不断地记录着。但是也有很多服务网站用户的信息是未知的，仅仅有该用户在该会话区间的信息可用。因此，在一个有限的单次会话中捕获用户的行为并生成相应的推荐就变得尤为重要。相反的，传统依赖于充足user-item交互的推荐方法对于该场景下的推荐得出的结果就差强人意了。</p><p>&#8195;&#8195;由于该推荐具有很好的实用价值，现在对于这一问题的研究也越来越多，相继产生了一些解决基于会话的推荐方案。比如有基于马尔可夫链的，通过用户本次行为预测下一次行为，它带有强独立性假设，因此预测准确度不高。近几年，主要的研究采用Recurrent Neural Networks$($RNN$)$方法得到了不错的结果。首先提出了RNN网络方法，之后有工作在该模型上进行数据增广和考虑用户行为的时间变化。近期，NARM模型设计了全局和局部RNN推荐系统来同时捕获用户的sequential hehavior和main purpose。STAMP模型和NARM类似，STAMP通过使用多层感知机和注意力网络捕获用户的general interest和current interest。</p><p>&#8195;&#8195;虽然这些先进的方法得到了不错的结果，但依然存在着不足。第一，缺少充足的用户行为信息，导致它们很难估计用户表征。通常来说，这些RNN方法的hidden vector看作是用户表征，然后推荐系统可以通过这些表征生成相应的推荐，就比如NARM模型的全局推荐器。然而在基于会话推荐系统中，会话大多数是匿名的，并且用户在会话中的行为也是有限的，因此很难在会话中精确地预测用户的表征。第二，之前的工作证实item transitions模式的重要性，可以把它用作会话推荐局部的因子，但这些方法总是在连续物品间建立单一transitions而忽视了其他物品的transitions。因此，远距离物品间的复杂转换被这些方法所忽视。</p><p>&#8195;&#8195;为了解决以上提到的问题，提出了一个全新的模型$\underline{S}ession-based\ \underline{R}ecommendation\ with\ \underline{G}raph\ \underline{N}eural\ \underline{N}etworks$，简称SR-GNN，该模型用于探究物品间丰富的transition并产生精确的物品隐式向量。GNN被设计用来生成图的表征。近期，它被广泛用于自然语言处理和计算机视觉应用的图结构依赖模型，比如脚本事件预测、情景识别和图片分类。对于会话推荐，我们首先对于历史会话序列进行有向图的构建，对于会话图，GNN可以捕捉到物品间的transition并精确地预测相应的嵌入向量，这是传统序列模型难以做到的。基于精确的物品嵌入向量，SR-GNN构建更多的会话表征，最终可以推断用户的下一次点击。</p><p><a href="https://imgtu.com/i/cUIKnU"><img src="https://z3.ax1x.com/2021/04/10/cUIKnU.jpg" alt="Figure 1"></a></p><p>&#8195;&#8195;Figure 1画出了SR-GNN方法的工作流程。首先，所有的序列被建模为有向会话图，其中每一个会话可以看作它的子图。然后，每个子图连续地输入到GNN中得到子图中节点的隐含向量。接下来，把所有会话组成全局偏好，一次会话作为用户的当前兴趣，这些全局和局部会话嵌入向量都是由节点的隐含向量组成的。该论文的贡献有以下几点：</p><ul><li>把分离的会话序列建模为图结构数据并使用图结构捕获物品的复杂转换。</li><li>为了生成基于会话的推荐系统，不依赖于用户表征，但是使用会话嵌入，该会话嵌入可以仅通过单次会话中的物品的隐含向量所得到。</li><li>在两个真实数据集上进行的实验表明我们提出的SR-GNN的表现明显超过最先进的方法。</li></ul><br><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h2><hr><p>&#8195;&#8195;<strong>传统推荐方法</strong>。矩阵分解方法是推荐系统的一个常用方法，基本的目标是把user-item rating矩阵分解为两个子矩阵，分别表示用户因子矩阵和物品因子矩阵。矩阵分解方法不适用于会话推荐，因为会话推荐中的用户偏好仅仅通过用户的点击获取。item-based的协同推荐方法也是一种惯用方法。这些方法很难考虑物品间的顺序以及仅仅通过最后一次点击生成预测结果。</p><p>&#8195;&#8195;于是基于马尔可夫链的序列方法就产生了，它通过用户上一次的点击来预测本次行为。Shani等人把推荐生成视作一种序列优化问题采用马尔科夫决策过程$(MDPs)$。然而马尔可夫链方法的缺点是独立地结合了之前的组件。这样的独立性假设太强了，因此限制了预测的准确性。</p><p>&#8195;&#8195;<strong>基于深度学习的方法</strong>。近几年，以语言模型为代表的预测模型采用了神经网络。在众多语言模型中，RNN在建模句子方面是最成功的模型，并在各种自然语言处理任务中蓬勃发展，比如机器翻译，对话机器人，图像理解。RNN也已成功应用于众多应用中，如序列点击预测，位置预测next basket推荐。</p><p>&#8195;&#8195;对于会话推荐，有人提出RNN方法，紧接着拓展到并行RNN的体系结构，该结构可以基于点击以及点击物品的特征来建模会话。在此之后，有人通过适当的数据增强技术并考虑同户行为的时间变化来提升RNN模型的性能。</p><p>&#8195;&#8195;Jannach和Ludewig将RNN和最近邻居的方法结合在一起，以混合顺序模式和共现信号。 Tuan和Phuong将会话点击与诸如项目描述和物品类别等内容特征相结合，以使用3维卷积神经网络生成推荐。此外，基于列表的深度神经网络对每个会话中受限的用户行为进行建模，并使用基于列表的排名模型为每个会话生成推荐。此外，具有编码器-解码器架构的神经注意推荐机在RNN上采用了注意机制，以捕获用户的顺序行为和主要目的特征。然后，提出了使用简单的MLP网络和注意力网络的短期注意力优先级模型，STAMP，以有效地捕获用户的全局偏好和当前偏好。</p><p>&#8195;&#8195;<strong>图上的神经网络</strong>。如今，神经网络已被应用于图结构数据的表征，例如社交网络和知识库。为了拓展word2vec，一种无监督算法DeepWalk被设计为学习基于随机游走的图节点表征。继DeepWalk之后，无监督网络嵌入算法LINE和node2vec是最具代表性的方法。可扩展的方法通过频谱图卷积的局部近似来选择卷积架构，这是一种有效的变体，也可以直接在图上运行。但是，这些方法只能在无向图上实现。GNN则是在有向图上执行的模型。作为对GNN的修改，门控GNN使用门控循环单元，并通过时间进行反向传播$(BPTT)$来计算梯度。最近，GNN被广泛应用于不同的任务，例如脚本事件预测，情境识别和图像分类 。</p><br><h2 id="3-SR-GNN模型"><a href="#3-SR-GNN模型" class="headerlink" title="3 SR-GNN模型"></a>3 SR-GNN模型</h2><hr><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>&#8195;&#8195;基于会话的推荐系统旨在预测用户下一次将单击哪个物品，仅根据用户当前的连续会话数据，而不访问长期的偏好。接下来给出该问题的定义：</p><p>&#8195;&#8195;在会话推荐中，定义$V={v_1,v_2,…,v_m}$代表在所有会话中所包含的物品集合，在一次匿名会话s中，用户点击的物品按照时间戳进行排序得到一个序列$s=[v_{s,1},v_{s,2},…,v_{s,n}]$。会话推荐的目标是预测下一次用户点击动作，就是会话s的$v_{s,n+1}$。对于会话s，我们对于所有可能的物品输出概率$\hat{y}$，即对应各物品的推荐得分。在$\hat{y}$中具有top-K的物品将成为推荐的候选。</p><h3 id="3-2-构建会话图"><a href="#3-2-构建会话图" class="headerlink" title="3.2 构建会话图"></a>3.2 构建会话图</h3><p>&#8195;&#8195;每一个会话序列s都可以被建模为一个有向图$G_s=(V_s,\varepsilon_s)$。在这个会话图中，每一个节点都表示一个物品$v_{s,i}\in V$。边$(v_{s,i-1},v_{s,i})$表示在会话s中用户点击$v_{s,i-1}$后点击了物品$v_{s,i}$。<strong>由于若干物品可能在序列中重复出现，我们为每一条边赋值一个归一化加权值，该加权值计算为改变出现次数/该边起点的出度</strong>。我们把每个物品嵌入到统一的向量空间当中，节点向量$v\in R^d$表示通过GNN学习到的物品v的潜在向量，d为空间维数。基于节点向量，每一个会话s每一个会话s都可以被表示为由节点向量组成的嵌入向量<strong>s</strong>。</p><h3 id="3-3-在会话图中学习物品嵌入"><a href="#3-3-在会话图中学习物品嵌入" class="headerlink" title="3.3 在会话图中学习物品嵌入"></a>3.3 在会话图中学习物品嵌入</h3><p>&#8195;&#8195;vanilla graph neural network是2009年提出的拓展处理图结构数据的神经网络方法。2015年Li等人进一步引入了门控循环单元，并提出了门控GNN。GNN非常适合于会话推荐系统，因为他可以在处理丰富节点连接的情况下自动提取会话图的特征。首先给出在会话图中节点向量的学习过程，形式上，对于图$G_s$上的节点$v_{s,i}$，更新函数定义如下：</p><p>$$<br>a^t_{s,i}=A_{s,i:}[v_1^{t-1},…,v_n^{t-1}]^TH+b,\tag{1}<br>$$</p><p>$$<br>z^t_{s,i}=\sigma(W_za^t_{s,i}+U_zv_i^{t-1}),\tag{2}<br>$$</p><p>$$<br>r^t_{s,i}=\sigma(W_ra^t_{s,i}+U_rv_i^{t-1}),\tag{3}<br>$$</p><p>$$<br>\tilde{v}^t_i=tanh(W_oa^t_{s,i}+U_o(r^t_{s,i}\odot v_i^{t-1})),\tag{4}<br>$$</p><p>$$<br>v_i^t=(1-z^t_{s,i})\odot v_i^{t-1} + z^t_{s,i}\odot \tilde{v}^t_i,\tag{5}<br>$$</p><p>其中$H\in R^{d\times 2d}$控制权重，$z_{s,i}和r_{s,i}$分别是reset gates和update gates，$[v_1^{t-1},…,v_n^{t-1}]$为会话s中的节点列表，$v_i\in R^d$表示会话s中第i个节点的隐含表示。连接矩阵$A_s\in R^{n\times 2n}$表示节点之间连接的情况，$A_{s,i:}\in R^{1\times 2n}$表示节点$v_{s,i}$与其他节点连接的情况。在这里$A_s$定义为矩阵$A_s^{(out)}和A_s^{(in)}$的拼接，这两个邻接矩阵分别代表会话图中节点出边和入边的加权值。</p><p><a href="https://imgtu.com/i/cyKKij"><img src="https://z3.ax1x.com/2021/04/13/cyKKij.jpg" alt="Figure 2"></a></p><p>&#8195;&#8195;举一个例子，Figure 2中有一个会话$[v_1,v_2,v_3,v_2,v_4]$，左和右矩阵分别出矩阵和入矩阵。</p><p>&#8195;&#8195;公式1计算的是一个节点和其他所有节点信息传播的一个总体信息。然后，这里的$z^t_{s,i}和r^t_{s,i}$分别是update gate和reset gate，分别决定哪些信息会被保留和丢弃。在公式4中，我们用前面的状态、目前的状态以及reset gate计算出候选状态。最终的状态是结合之前的隐藏状态、候选状态，在update gate的控制下计算得到。在更新会话图中的所有节点知道收敛，我们可以得到最终的节点向量。</p><h3 id="3-4-生成会话嵌入"><a href="#3-4-生成会话嵌入" class="headerlink" title="3.4 生成会话嵌入"></a>3.4 生成会话嵌入</h3><p>&#8195;&#8195;以前的大多数会话推荐方法假设每一个会话存在不同的用户表征。相反的，SR-GNN模型没有设计任何相关用户表征向量的假设。SR-GNN模型认为一个会话直接被该会话中包含的节点所表示。为了更好的预测用户的下一步点击，通过将会话的长期偏好和当前兴趣结合起来，并将这种组合嵌入作为会话嵌入。</p><p>&#8195;&#8195;将所有的会话图输入到门控图神经网络中，得到所有节点的向量，之后将每一个会话表示为一个嵌入向量$s\in R^d$，首先考虑会话啊s的局部嵌入$s_l$。对于一个会话$[v_{s,i},v_{s,2},…,v_{s,n}]$，它的局部嵌入对应与用户最后一次点击物品$v_{s,n}$动作$v_n$，就是说，$s_l=v_n$。</p><p>&#8195;&#8195;然后，通过聚集所有节点向量来计算会话图$G_s$的全局嵌入。考虑到这些嵌入的信息会有不同的优先级，我们进一步使用软注意力机制更好地表达全局偏好：<br>$$<br>\alpha_i=q^T\sigma(W_1v_n+W_2v_i+c),\<br>s_g=\sum_{i=1}^n\alpha_iv_i,\tag{6}<br>$$<br>其中，$q\in R^d\ and\ W_1,W_2\in R^{d\times d}$控制物品嵌入向量的权值。最终我们把局部和全局嵌入向量连起来做一次线性变换得到混合嵌入$s_h$:<br>$$<br>s_h=W_3[s_l;s_g]\tag{7}<br>$$<br>其中$W_3\in R^{d\times 2d}$。</p><h3 id="3-5-模型训练和做推荐"><a href="#3-5-模型训练和做推荐" class="headerlink" title="3.5 模型训练和做推荐"></a>3.5 模型训练和做推荐</h3><p>&#8195;&#8195;在得到所有会话的嵌入后，我们把所有候选物品$v_i\in V$的嵌入v$_i$和会话表征$s_h$相乘得到该候选物品的得分$\hat{z_i}$，这一段操作定义如下：<br>$$<br>\hat{z_i}=s_h^Tv_i.\tag{8}<br>$$<br>&#8195;&#8195;接下来使用softmax得到预测结果：<br>$$<br>\hat{y}=softmax(\hat{z}),\tag{9}<br>$$<br>&#8195;&#8195;对于每一个会话图，损失函数被定义为预测结果和真实值之间的交叉熵，定义如下：</p><p>$$<br>L(\hat{y})=-\sum_{i=1}^m y_i log(\hat{y_i})+(1-y_i)log(1-\hat{y_i}),\tag{10}<br>$$<br>y是one-hot的形式，表示真实值；$\hat{y}$表示每一位表示预测对应一个物品的概率。</p><p>最后我们使用Back-Propagation Through Time$(BPTT)$算法来训练SR-GNN模型。</p><h2 id="4-实验和分析"><a href="#4-实验和分析" class="headerlink" title="4 实验和分析"></a>4 实验和分析</h2><hr><h3 id="4-1-数据集"><a href="#4-1-数据集" class="headerlink" title="4.1 数据集"></a>4.1 数据集</h3><p>&#8195;&#8195;在两个真实数据集Yoochoose和Diginetica评估我们的模型。Yoochoose数据集包含六个月一系列用户在电商网站上点击的数据流。对于Diginetica数据集，我们只使用它的事务数据。</p><p>&#8195;&#8195;为了公平起见，我们把所有数据集中长度为1的会话以及会话中物品出现数量小于5的会话全部删除。Yoochoose剩下 7,981,580 个会话和 37,483个物品，而 Diginetica数据集剩下204,771个会话和43097个物品。除此以外，我们通过分割输入序列生成序列以及对应的标签。举个例子，对于一个输入会话序列$s=[v_{s,1},v_{s,2},…,v_{s,n}]$，我们可以通过分割生成一些序列和序列对应的标签$([v_{s,1}],v_{s,2}),([v_{s,1},v_{s,2}],v_{s,3}),…,([v_{s,1},v_{s,2},…,v_{s,n-1}],v_{s,n})$，其中$[v_{s,1},v_{s,2},…,v_{s,n-1}]$是生成的序列，$v_{s,n}$是该序列对应的标签，即用户下一次点击的物品。我们也使用了大量近期的分割1/64,1/4来分割Yoochoose。数据集的统计如Table 1所示。</p><p><a href="https://imgtu.com/i/gUINes"><img src="https://z3.ax1x.com/2021/05/11/gUINes.jpg" alt="Table 1"></a></p><h3 id="4-2-Baseline算法"><a href="#4-2-Baseline算法" class="headerlink" title="4.2 Baseline算法"></a>4.2 Baseline算法</h3><p>&#8195;&#8195;为了评估模型的性能，我们把模型和如下baseline进行实验对比：</p><ul><li><strong>POP</strong>和<strong>S-POP</strong>分别推荐前N个训练集中和在目前会话中频繁出现的物品。</li><li><strong>Item-KNN</strong>推荐与前一次点击物品相似的物品，其中物品的相似度为物品向量的cosine相似度。</li><li><strong>BPR-MF</strong>通过随机梯度下降优化一个成对排名目标函数。</li><li><strong>FPMC</strong>是基于马尔可夫链的序列预测方法。</li><li><strong>GRU4REC</strong>使用RNN对于基于会话的推荐去建模用户序列。</li><li><strong>NARM</strong>使用RNN结合attention机制去捕获用户的主要目标以及序列行为。</li><li><strong>STAMP</strong>捕获用户对于目前会话大致的兴趣以及对于最后一次点击的兴趣。</li></ul><h3 id="4-3-评估度量指标"><a href="#4-3-评估度量指标" class="headerlink" title="4.3 评估度量指标"></a>4.3 评估度量指标</h3><ul><li><strong>P@20</strong>，Precision是广泛用于评估预测精度的指标。它代表正确预测前20个物品的比例。</li><li><strong>MRR@20</strong>，Mean Reciprocal Rank为对预测结果对于真正正确的结果所预测排名的倒数的平均值，当预测的排名大于20，则设置MRR为0，显然MRR值越大性能越好。</li></ul><h3 id="4-4-与Baseline的对比"><a href="#4-4-与Baseline的对比" class="headerlink" title="4.4 与Baseline的对比"></a>4.4 与Baseline的对比</h3><p>&#8195;&#8195;各模型在P@20和MRR@20指标上的评估数据如Table 2所示，其中最好性能用黑体标出。SR-GNN把分离的回话序列整合到图结构的数据中。在此模型中，我们同时考虑了全局回话偏好和局部偏好。在指标数据中SR-GNN模型的P@20和MRR@20性能是最好的。</p><p><a href="https://imgtu.com/i/gULUjf"><img src="https://z3.ax1x.com/2021/05/11/gULUjf.jpg" alt="Table 2"></a></p><p>&#8195;&#8195;传统的POP和S-POP模型性能相对来说差一些，这些模型只是简单的把推荐当作单独基于重复的共现物品或者联系物品。虽然如此，S-POP的性能依然比POP，BRF-MF和FPMC好，证明了回话上下文信息的重要性。Item-KNN比基于马尔可夫链的FPMC好，注意Item-KNN只利用了物品向量的预先相似度而没有考虑序列信息，这证明了对连续项独立性的假设。</p><p>&#8195;&#8195;基于神经网络的方法NARM，STAMP比传统方法的性能好，证明了深度学习非常适合用于该领域问题。长短期记忆模型，如GRU4REC和NARM，使用循环神经元捕获用户大致偏好，而STAMP结合最后一次点击的物品提升模型的短期记忆。这些方法显式地建模用户的全局行为偏好并且考虑用户前面行为和下一次点击的转化，因此比传统方法的性能高出不少。然而它们的性能依然不如SR-GNN。相比于NARM和STAMP，SR-GNN进一步考虑到会话中物品间的转化，因此把所有的回话建模为图结构的数据，这样可以在用户点击中捕获更多复杂和隐式的连接。虽然NARM和GRU4REC显式地建模建模每一个用户并且通过分离的会话序列捕获用户表征，因此可能会忽略物品之间的关联。</p><p>&#8195;&#8195;除此以外，SR-GNN采用了soft-attention机制生成会话表征从而自动选择最重要的物品转换并且忽略掉目前会话中不重要的用户行为噪音。相反的，STAMP只用了最后一次点击和之前行为的物品转换，这些条件不够充分。其他的RNN模型，如GRU4REC和NARM，在传播过程中不能选择比较有效的信息，只是使用所有之前的物品获取一个用户大致偏好的向量表征。当用户的行为是无目的的活着他的兴趣在目前会话中发生了360度的变化，传统的模型就不足以应对这种噪音会话。</p><h3 id="4-5-与其他连接方案的对比"><a href="#4-5-与其他连接方案的对比" class="headerlink" title="4.5 与其他连接方案的对比"></a>4.5 与其他连接方案的对比</h3><p>&#8195;&#8195;SR-GNN方法把物品之间的连接关系构建为图的结构，因此是非常灵活的。为了评估在每一个会话图中物品之间的关联，我们展示另外两种连接方法的变体。<strong>首先</strong>，我们把所有的会话序列整合建模为一个包含所有物品的有向图，这个图被称为全局图。在全局图中，每一个节点表示一个单独的物品，每一条边表示一个物品向另外一个物品的转换。<strong>第二</strong>，我们在一个会话中用有向图建模物品之间所有的高级关系。总的来说在SR-GNN中有以下两种连接方案：</p><ul><li>SR-GNN-NGC，使用标准化全局连接的SR-GNN，在全局图中用抽取的边的权重代表图的连接矩阵。</li><li>SR-GNN-FC使用全连接来表示所有的高阶关系，其中边的权重为boolean。</li></ul><p>&#8195;&#8195;不同的连接方法的结果如Figure 3所示。图中看出三种连接方案相比于STAMP和NARM方法有过之无不及，也证实了把会话建模为图结构的好处。</p><p><a href="https://imgtu.com/i/gaJatK"><img src="https://z3.ax1x.com/2021/05/11/gaJatK.jpg" alt="Figure 3"></a></p><p>&#8195;&#8195;相比于SR-GNN，对于每一个会话，SR-GNN-NGC除了考虑当前会话中的物品们还需要考虑了其他会话的影响，这降低了目前会话中高degree节点所连接边的影响。这样一种方法显然影响了目前会话的完整性，特别当图中边的权重不同时会导致性能的下降。</p><p>&#8195;&#8195;关于SR-GNN和SR-GNN-FC，前者只建模了连续物品间的关系，而后者进一步把所有的高阶关系看作有向图。从结果上来看，SR-GNN-FC的性能略逊于SR-GNN。这样一个结果表明不是所有的高阶转换可以直接用于物品之间的转换，并且中间的阶段也是必不可少的。比如一个用户浏览网页的顺序为$A \rightarrow B \rightarrow C$，如果直接让A推出C而忽略掉中间的B是非常不合适的。</p><h3 id="4-6-与其他会话嵌入方案的对比"><a href="#4-6-与其他会话嵌入方案的对比" class="headerlink" title="4.6 与其他会话嵌入方案的对比"></a>4.6 与其他会话嵌入方案的对比</h3><p>&#8195;&#8195;我们对比了如下三个会话嵌入的方案：</p><ul><li>SR-GNN-L，只使用局部嵌入。</li><li>SR-GNN-AVG，使用平局池化的全局嵌入。</li><li>SR-GNN-ATT，使用attention机制的全部嵌入。</li></ul><p>&#8195;&#8195;实验的结果如Figure 4所示。</p><p><a href="https://imgtu.com/i/ga0jOO"><img src="https://z3.ax1x.com/2021/05/11/ga0jOO.jpg" alt="Figure 4"></a></p><p>&#8195;&#8195;从图中观测到混合嵌入的方法的结果是最好的，这证明了结合目前会话偏好以及全局偏好的重要性。SR-GNN-ATT的性能优于SR-GNN-AVG，表明会话中可能包含一些噪音行为，并且表明attention机制有利于抽取会话中重要的用户行为去构建长期偏好。</p><p>&#8195;&#8195;注意SR-GNN-L，依然表现出高于SR-GNN-AVG的性能，与SR-GNN-ATT持平，证明目前会话偏好和长期偏好对于会话推荐都是非常重要的。</p><h3 id="4-7-分析会话序列长度"><a href="#4-7-分析会话序列长度" class="headerlink" title="4.7 分析会话序列长度"></a>4.7 分析会话序列长度</h3><p>我们进一步分析不同模型处理不同长度会话的能力。为了对比，我们把Yoochoose的1/64的分割和Diginetica分为”Short”和”Long”两组，其中”Short”表示会话的长度小于等于5，”Long”表示长度大于5。因为5是所有会话平均长度最接近的整数。在Yoochoose数据集中会话短和长分组的比例为0.701和0.299，在Diginetica中分别为0.764和0.236。对于每一种方案，结果数据如Table 3所示。</p><p><a href="https://imgtu.com/i/ga6z0f"><img src="https://z3.ax1x.com/2021/05/11/ga6z0f.jpg" alt="Table 3"></a></p><p>&#8195;&#8195;SR-GNN和他的变体在拥有不同长度会话的数据集中的表现非常稳定。证明了该模型的优越性能以及图神经网络对于会话推荐拥有很强的适应能力。相反的，NARM和STAMP的性能在short和long分组中的表现相差很大，STAMP可以用重复动作来解释此现象，因为使用attention机制，在获取用户表征的时候重复出现的物品将会被忽略。和STAMP类似，NARM在short分组中的表现很好，在long分组中的表现差强人意，因为RNN不擅长处理长序列。</p><p>&#8195;&#8195;SR-GNN-L，SR-GNN-ATT和SR-GNN性能优于STAMP和NARM的原因是基于图神经网络学习到更精确的节点向量。这样一种节点嵌入不仅捕获潜在特征并且全局的节点联系。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5 结论"></a>5 结论</h2><hr><p>会话推荐是一种用户偏好和历史记录难以获取的重要的推荐系统。这个论文就使用全新的整合图神经网络到表征会话序列的算法架构。提出的方法不仅考虑到会话序列中物品之间复杂的结构和转换，而且发展了一种结合长期偏好和目前会话偏好的策略去更好地预测用户的下一次点击行为。综合的实验结果表明了该模型具有良好的性能。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体关系联合抽取的分解策略</title>
      <link href="2021/04/05/shi-ti-guan-xi-lian-he-chou-qu-de-fen-jie-ce-lue/"/>
      <url>2021/04/05/shi-ti-guan-xi-lian-he-chou-qu-de-fen-jie-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="Joint-Extraction-of-Entities-and-Relations-Based-on-a-Novel-Decomposition-Strategy-ECAI2020"><a href="#Joint-Extraction-of-Entities-and-Relations-Based-on-a-Novel-Decomposition-Strategy-ECAI2020" class="headerlink" title="Joint Extraction of Entities and Relations Based on a Novel Decomposition Strategy -ECAI2020"></a>Joint Extraction of Entities and Relations Based on a Novel Decomposition Strategy -ECAI2020</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;实体关系的联合抽取任务旨在训练出可以检测实体对及其对应关系的单一模型。先前的工作把这项任务通过extract-then-classify或者unified labeling的方法实现。然而这些方法要么受制于冗余的实体对，要么忽视了实体和关系抽取两项任务之间重要的内部联系。</p><p>&#8195;&#8195;在本论文中，首先将联合抽取任务分解为两个相关联的子任务：<strong>HE</strong> extration 和 <strong>TER</strong> extration。<strong>HE</strong>子任务首先找到与目标关系相关联的所有头实体；<strong>TER</strong>是针对每一个抽取的头实体识别相应的尾实体和关系。接下来使用基于span的标记方案把这两个子任务进一步分解为多个序列标记问题，并采用分层边界标记和多跨解码算法方便地解决这些问题。</p><p>&#8195;&#8195;得益于合理的分解策略，该模型能充分捕捉不同步骤之间的语义依赖关系，同时减少了来自无关实体对的噪声。实验结果表明该模型F1得分比之前的工作提升了5.2%，5.9%，21.5%，在三个公共数据集上实现了新的突破。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;在非结构化的文本中抽取实体对以及相应的关系是构建知识图谱的一个重要步骤，一个理想的关系抽取系统应该具有抽取重叠关系的能力（多个三元组共享相同的实体）。传统的pipeline方法首先识别出实体然后为每一对可能抽取的实体对选择一个关系，pipeline方式易于实现但是忽视了两个子任务底层之间的联系。一种改进的方式是让它们联合训练，这样它们的参数可以共享，虽然这种方法有一定的提升，但是依然需要两个分开的components处理两个任务。后果是<strong>关系分类器会被冗余的实体对所误导</strong>，因为N个实体会产生$N^2$个实体对，其中大部分属于NA$($non-relation$)$​类。</p><p>&#8195;&#8195;现有的联合模型该对重叠关系的识别不够优雅，这可能导致在处理具有<strong>重叠关系</strong>$($overlapping relations = mutiple relations share a common entity$)$的句子时记忆效果不佳。<strong>尾实体和关系应该依赖于一个特定的头实体，因此如果一个模型未完全捕捉到头实体的语义，那么尾实体和关系的提取结果就不可靠</strong>。另一方面，相比于extract-then-classify的模型，该模型只识别可能参与目标三元组的头实体，从而减轻了冗余实体对的影响。</p><p>&#8195;&#8195;利用基于span的标记方案进一步分解了HE和TER抽取。具体来说，对于HE提取，实体类型在每个头实体的开始和结束位置标记。对于TER提取，我们在与给定头实体有关系的所有尾实体的开始和结束位置标注关系类型。为了增强边界位置之间的关联，我们提出了一个分层的边界标记器，它将起始点和结束点标记出来。总的来说，对于一个有m个头实体的句子的抽取任务会被分解为2+2m个序列子任务，前2个用于HE标注，<strong>同时标注</strong>m个头实体的Starts Tag和Ends Tag；其他2m用于TER标注，对于m个头实体<strong>分别标注</strong>对应三元组的尾实体的Starts Tag和Ends Tag。</p><p><a href="https://imgtu.com/i/hCs3If"><img src="https://z3.ax1x.com/2021/08/23/hCs3If.jpg" alt="标记策略"></a></p><h2 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h2><hr><h3 id="2-1-标记方案"><a href="#2-1-标记方案" class="headerlink" title="2.1 标记方案"></a>2.1 标记方案</h3><p>&#8195;&#8195;对于一次HE任务可以分解为两个子任务，第一个子任务主要关注与识别头实体的start position，对于每一个word若是start position word将其标记为对应的实体类型，否则为其分配标记“O”；第二个子任务则标记相应的end position。</p><p>&#8195;&#8195;对于每一个以识别的头实体，TER一样被分解为两个序列标记子任务，抽取头实体对应尾实体的start position和end posotion，迭代m次。</p><br><p><a href="https://imgtu.com/i/hCyNtK"><img src="https://z3.ax1x.com/2021/08/23/hCyNtK.jpg" alt="模型框架"></a></p><h3 id="2-2-分层的边界标记器"><a href="#2-2-分层的边界标记器" class="headerlink" title="2.2 分层的边界标记器"></a>2.2 分层的边界标记器</h3><p>&#8195;&#8195;根据2.1的标记方案，我们使用一个统一的架构（HBT）来提取HE和TER。在句子$S$中一个目标实体$t$被标记为类型$l$的概率为：<br>$$<br>p(t,l|S)\ =\ p(s_t^l|S)p(e_t^l|s_t^l,S) \tag{1}<br>$$<br>&#8195;&#8195;其中$s_t^l$是带l标签的实体t的start index，$e_t^l$是end index。这种分解方式存在start和end索引的抽取顺序，结合start index的信息能更准确地抽取end index，这也是设计成分层结构的原因。在Figure 2中，我们把低层tagging结果和隐藏状态作为高层的输入，在这个工作中我们使用BiLSTM作为基础的encoder。具体的，预测实体$x_i$的start position的计算过程为：<br>$$<br>h_i^{sta}=BiLSTM_{sta}([h_i；a_i])\tag{2}<br>$$</p><p>$$<br>P(y_i^{sta})=Softmax(W^{sta}·h_i^{sta}+b^{sta})\tag{3}<br>$$</p><p>$$<br>sta\underline{\ }tag(x_i)=argmax_kP(y_i^{sta}=k)\tag{4}<br>$$</p><p>&#8195;&#8195;$h_i$代表所有单词表征，$a_i$是辅助向量。对于HE任务，$a_i$是整个句子的全局表征，而对于TER任务，$a_i$除了句子的全局表征，还包含已经tagging头实体的语义和位置信息嵌入。$x_i$的end tag计算过程如下：<br>$$<br>h_i^{end}=BiLSTM_{end}([h_i^{sta}；a_i；p_i^{se}])\tag{5}<br>$$</p><p>$$<br>P(y_i^{end})=Softmax(W^{end}·h_i^{end}+b^{end})\tag{6}<br>$$</p><p>$$<br>end\underline{\ }tag(x_i)=argmax_kP(y_i^{end}=k)\tag{7}<br>$$</p><p>&#8195;&#8195;相比于start tag的计算，end tag的计算中有一个额外的位置嵌入$p_i^{se}$作为输入。$p_i^{se}$是一个可训练的位置嵌入，它的表达式为：<br>$$<br>p_i^{se}=<br>\begin{cases}<br>i-s^x,&amp; if\ s^x\ exists\\<br>C,&amp; otherwise<br>\end{cases}<br>\tag{8}<br>$$<br>其中$s^*$代表在目前位置前面标有start tag的最近位置索引，如果$x_i$位置前面没有$s^*$，则值为常数C，C设置为句子的最大长度。通过这种方式限制了提取实体的长度，并且告诉模型结束位置不可能在开始位置之前。HBT的损失函数定义如下：<br>$$<br>L_{HBT}=-\frac{1}{n}\sum^n_{i=1}(logP(y_i^{sta}=\widehat{y}_i^{sta})+logP(y_i^{end}=\widehat{y}_i^{end}))\tag{9}<br>$$<br>n表示输入句子的长度，$\widehat{y}_i^{sta}和\widehat{y}_i^{end}$表示第i个word的正确start tag和end tag。以下是抽取实体的算法过程：</p><p><img src="pic3.png" alt="实体抽取过程"></p><h3 id="2-3抽取系统"><a href="#2-3抽取系统" class="headerlink" title="2.3抽取系统"></a>2.3抽取系统</h3><h4 id="2-3-1-共享的encoder"><a href="#2-3-1-共享的encoder" class="headerlink" title="2.3.1 共享的encoder"></a>2.3.1 共享的encoder</h4><p>&#8195;&#8195;给定一个句子S = {$x_1,…,x_n$}，我们使用BiLSTM层整合前后方向的信息：<br>$$<br>h_i\ =\ BiLSTM_{sha}(X_i)\tag{10}<br>$$<br>&#8195;&#8195;其中$h_i$是位置i处的hidden state，$X_i$包含$x_i$的预训练嵌入和运行于CNN中单词的字符序列的词嵌入。同时还使用了POS$($part-of-speech$)$嵌入来丰富$X_i$。</p><h4 id="2-3-2-HE-Extractor"><a href="#2-3-2-HE-Extractor" class="headerlink" title="2.3.2 HE Extractor"></a>2.3.2 HE Extractor</h4><p>&#8195;&#8195;提取器的目的是区分候选头实体，排除不相关的头实体。</p><p><a href="https://zhuanlan.zhihu.com/p/267260713">https://zhuanlan.zhihu.com/p/267260713</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文 </tag>
            
            <tag> Relation Extraction </tag>
            
            <tag> Joint Extraction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces-round711-div2</title>
      <link href="2021/03/30/codeforces-round711-div2/"/>
      <url>2021/03/30/codeforces-round711-div2/</url>
      
        <content type="html"><![CDATA[<h1 id="codeforces-711-div2-题解"><a href="#codeforces-711-div2-题解" class="headerlink" title="codeforces 711 div2 题解"></a>codeforces 711 div2 题解</h1><h2 id="题目链接：http-codeforces-com-contest-1498"><a href="#题目链接：http-codeforces-com-contest-1498" class="headerlink" title="题目链接：http://codeforces.com/contest/1498"></a>题目链接：<a href="http://codeforces.com/contest/1498">http://codeforces.com/contest/1498</a></h2><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a><font color='red' style='font-weight:bold'>A题</font></h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a><font style="font-weight:bold;">题面</font></h3><center style="font-weight:bold;font-size:28px">A. GCD Sum</center><center>time limit per test: 1 second</center><center>memory limit per test: 256 megabytes</center><br><p>The gcdSum of a positive integer is the gcd of that integer with its sum of digits. Formally, $𝑔𝑐𝑑𝑆𝑢𝑚(𝑥)=𝑔𝑐𝑑(𝑥,\ sum\ of\ digits\ of\ 𝑥)$ for a positive integer $x$. $gcd(a,b)$ denotes the greatest common divisor of 𝑎 and b — the largest integer $d$ such that both integers 𝑎 and 𝑏 are divisible by d.</p><p>For example: $𝑔𝑐𝑑𝑆𝑢𝑚(762)=𝑔𝑐𝑑(762,7+6+2)=𝑔𝑐𝑑(762,15)=3.$</p><p>Given an integer $n$, find the smallest integer $𝑥 \geq 𝑛$ such that $𝑔𝑐𝑑𝑆𝑢𝑚(𝑥)\gt1$.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line of input contains one integer $t (1 \leq t \leq 10^4)$ — the number of test cases.</p><p>Then $t$ lines follow, each containing a single integer $n \  (1 \leq 𝑛 \leq10^{18})$.</p><p>All test cases in one test are different.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>Output $t$ lines, where the 𝑖-th line is a single integer containing the answer to the $i$-th test case.</p><br><p><font style="font-weight:bold;font-size:22px;" > Example</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">11</span><span class="token number">31</span><span class="token number">75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">12</span><span class="token number">33</span><span class="token number">75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p><font style="font-weight:bold;font-size:22px;" > Note</font></p><p>Let us explain the three test cases in the sample.</p><p><strong>Test case 1:</strong> 𝑛=11:</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(11)=𝑔𝑐𝑑(11,1+1)=𝑔𝑐𝑑(11, 2)=11.$</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(12)=𝑔𝑐𝑑(12,1+2)=𝑔𝑐𝑑(12, 3)=3.$</p><p>So the smallest number $\geq 11$ whose gcdSum $\gt1$ is 12.</p><p><strong>Test case 2:</strong> 𝑛=31:</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(31)=𝑔𝑐𝑑(31,3+1)=𝑔𝑐𝑑(31, 4)=1.$</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(32)=𝑔𝑐𝑑(32,3+2)=𝑔𝑐𝑑(32, 5)=1.$</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(33)=𝑔𝑐𝑑(33,3+3)=𝑔𝑐𝑑(33, 6)=3.$</p><p>So the smallest number $\geq 3$ whose 𝑔𝑐𝑑𝑆𝑢𝑚 $\gt1$ is 33.</p><p><strong>Test case 3:</strong> 𝑛=75 :</p><p>$𝑔𝑐𝑑𝑆𝑢𝑚(75)=𝑔𝑐𝑑(75,7+5)=𝑔𝑐𝑑(75, 12)=3.$</p><p>The gcdSum of 75 is already $\gt1$. Hence, it is the answer.</p><br><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a><font style="font-weight:bold;">题意</font></h3><p>&#8195;&#8195;定义$gcdSum(N) = gcd(N, N的数位和)$，求<em><strong>最小</strong></em>的$x$，要求 $x \geq N$并且$gcdSum(x) \gt 1$</p><br><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>b<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">getNum</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll temp <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        temp<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll N<span class="token punctuation">;</span>    cin<span class="token operator">>></span>N<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>N<span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getNum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a><font color='red' style='font-weight:bold'>B题</font></h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a><strong>题面</strong></h3><center style="font-weight:bold;font-size:28px">B. Box Fitting</center><center>time limit per test: 1 second</center><center>memory limit per test: 256 megabytes</center><br><p>You are given n rectangles, each of height 1. Each rectangle’s width is a power of 2$ ($i. e. it can be represented as $2^x$ for some non-negative integer $x)$.</p><p>You are also given a two-dimensional box of width $W$. Note that $W$ may or may not be a power of 2. Moreover, $W$ is at least as large as the width of the largest rectangle.</p><p>You have to find the smallest height of this box, such that it is able to fit all the given rectangles. It is allowed to have some empty space left in this box after fitting all the rectangles.</p><p>You cannot rotate the given rectangles to make them fit into the box. Moreover, any two distinct rectangles must not overlap, i. e., any two distinct rectangles must have zero intersection area.</p><p>See notes for visual explanation of sample input.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line of input contains one integer $t\ (1 \leq t \leq 5·10^3)$— the number of test cases. Each test case consists of two lines.</p><p>For each test case:</p><ul><li>the first line contains two integers $n\ (1 \leq 𝑛 \leq 10^5)$ and $W (1 \leq W \leq 10^9);$</li><li>the second line contains $n$ integers $w_1, w_2, …, w_n (1 \leq w_i \leq 10^6)$ , where $w_i$ is the width of the i-th rectangle. Each $w_i$ is a power of $2$;</li><li>additionally, $\max_{i=1}^n w_i\leq W$.</li></ul><p>The sum of $n$ over all test cases does not exceed $10^5$.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>Output $t$ integers. The i-th integer should be equal to the answer to the i-th test case — the smallest height of the box.</p><br><p><font style="font-weight:bold;font-size:22px;" > Example</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">5</span> <span class="token number">16</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">8</span><span class="token number">6</span> <span class="token number">10</span><span class="token number">2</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p><font style="font-weight:bold;font-size:22px;" > Note</font></p><p>For the first test case in the sample input, the following figure shows one way to fit the given five rectangles into the 2D box with minimum height:</p><img src="pic3.png" /><p>In the figure above, the number inside each rectangle is its width. The width of the 2D box is 16 $(indicated\ with\ arrow\ below)$. The minimum height required for the 2D box in this case is 22 $(indicated\ on\ the\ left)$.</p><p>In the second test case, you can have a minimum height of three by keeping two blocks $(one\ each\ of\ widths\ eight\ and\ two)$ on each of the three levels.</p><br><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a><strong>题意</strong></h3><p>&#8195;&#8195;给n个高度为1，长度为2的幂的木板，以及一个宽度为W的箱子，请问至少箱子的高度为多少时可以装下所有的木板。<strong>木板的长度之间相差2的倍数，所以可以使用贪心算法，先使用长的木板一定是最优解，因为使用短木板接在一起长度超过长木板其实是等价于直接使用这个长木板的</strong></p><br><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1048580</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> num<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> use <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">[</span>width<span class="token punctuation">]</span> <span class="token operator">||</span> use<span class="token operator">+</span>width<span class="token operator">></span>M<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            use <span class="token operator">+</span><span class="token operator">=</span> width<span class="token punctuation">;</span>            num<span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// cout&lt;&lt;"第"&lt;&lt;ans&lt;&lt;"层使用"&lt;&lt;width&lt;&lt;endl;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">++</span><span class="token punctuation">;</span>            use <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            N<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a><font color='red' style='font-weight:bold'>C题</font></h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a><strong>题面</strong></h3><center style="font-weight:bold;font-size:28px">C. Planar Reflections</center><center>time limit per test: 1 second</center><center>memory limit per test: 256 megabytes</center><br><p>Gaurang has grown up in a mystical universe. He is faced by 𝑛 consecutive 2D planes. He shoots a particle of decay age 𝑘 at the planes.</p><p>A particle can pass through a plane directly, however, every plane produces an identical copy of the particle going in the opposite direction with a decay age 𝑘−1. If a particle has decay age equal to 1, it will NOT produce a copy.</p><p>For example, if there are two planes and a particle is shot with decay age 3 $(towards\ the\ right)$, the process is as follows: $(here,\ 𝐷(𝑥)\ refers\ to\  a\ single\ particle\ with\ decay\ age\ 𝑥)$</p><ol><li>the first plane produces a 𝐷(2) to the left and lets 𝐷(3) continue on to the right;</li><li>the second plane produces a 𝐷(2) to the left and lets 𝐷(3) continue on to the right;</li><li>the first plane lets 𝐷(2) continue on to the left and produces a 𝐷(1) to the right;</li><li>the second plane lets 𝐷(1)continue on to the right $(𝐷(1)\ cannot\  produce\ any\ copies)$.</li></ol><p>In total, the final multiset 𝑆 of particles is ${𝐷(3),𝐷(2),𝐷(2),𝐷(1)}. ($See notes for visual explanation of this test case.$)$</p><p>Gaurang is unable to cope up with the complexity of this situation when the number of planes is too large. Help Gaurang find the size of the multiset 𝑆, given 𝑛 and 𝑘.</p><p>Since the size of the multiset can be very large, you have to output it modulo $10^9+7$.</p><p>Note: Particles can go back and forth between the planes without colliding with each other.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line of the input contains the number of test cases $𝑡\ (1\leq\ 𝑡\leq \ 100)$. Then, 𝑡 lines follow, each containing two integers 𝑛 and 𝑘 $(1\leq𝑛,𝑘\leq1000)$.</p><p>Additionally, the sum of 𝑛 over all test cases will not exceed 1000, and the sum of 𝑘 over all test cases will not exceed 1000. All test cases in one test are different.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>Output 𝑡 integers. The 𝑖-th of them should be equal to the answer to the 𝑖-th test case.</p><br><p><font style="font-weight:bold;font-size:22px;" >Examples</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">2</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">3</span><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">500</span><span class="token number">500</span> <span class="token number">250</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token number">2</span><span class="token number">257950823</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a><strong>题意</strong></h3><p>&#8195;&#8195;背景：一个具有 <strong>t 生命值</strong>的粒子只能向左或者向右移动，当它碰到一个平面后会在该碰撞面复制出一个与该粒子移动方向相反的粒子，并且复制出来的粒子<strong>生命值为t-1</strong>。</p><p>&#8195;&#8195;当一个生命值为1的粒子碰到平面后便不会复制出新的粒子。并且所有的粒子之间不会碰撞产生影响。</p><p>&#8195;&#8195;现在有一个初始生命值为k的粒子往右边移动，且该粒子左边没有平面，右边有n个平面，最终会产生多少个粒子？</p><br><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;可以定义  <strong>$dp[current][delayAge][dirction]$</strong>  状态，它表示在第current位置，生命值为delayAge并且方向为direction$(left:0, right:1)$的粒子会产生多少个粒子数量。</p><p>&#8195;&#8195;结合<strong>记忆化搜索</strong>保存已经计算出来的状态，在下次搜到已计算过的状态直接返回该值。</p><p>&#8195;&#8195;<strong>叶子结点</strong>为生命值为1的粒子，因为它不会产生复制粒子，所以值为1。</p><p>&#8195;&#8195;而<strong>非叶子状态</strong>初始会在下一个碰撞平面上产生两个粒子，因此初始化为2。还需要判断该状态分解成的两个状态是否会遇到平面。<strong>需要注意ans加完分解后的状态需要减一，因为分解的状态其实已经包含该粒子了</strong></p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span>ll mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tim<span class="token punctuation">;</span>ll <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// me and relection</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// toward to right</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// go ahead to the right</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// there is a relection to the left</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//toward to left</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// go ahead to the left</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// there is a relection to the right</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tim<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a><font color='red' style='font-weight:bold'>D题</font></h2><h3 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a><strong>题面</strong></h3><center style="font-weight:bold;font-size:28px">D. Bananas in a Microwave</center><center>time limit per test: 3 second</center><center>memory limit per test: 256 megabytes</center><br><p>You have a malfunctioning microwave in which you want to put some bananas. You have 𝑛 time-steps before the microwave stops working completely. At each time-step, it displays a new operation.</p><p>Let 𝑘 be the number of bananas in the microwave currently. Initially, 𝑘=0 In the 𝑖-th operation, you are given three parameters $𝑡_𝑖,\ 𝑥_𝑖,\ 𝑦_𝑖$ in the input. Based on the value of $t_i$, you must do one of the following:</p><p><strong>Type 1</strong>: $(𝑡_𝑖=1,\ 𝑥_𝑖,\ 𝑦_𝑖)$ — pick an $𝑎_𝑖$, such that $0\leq𝑎𝑖\leq𝑦𝑖$, and perform the following update $𝑎_𝑖$ times: $𝑘:=⌈(𝑘+𝑥_𝑖)⌉$.</p><p><strong>Type 2</strong>: $(𝑡_𝑖=2,\ 𝑥_𝑖,\ 𝑦_𝑖)$ — pick an $𝑎_𝑖$, such that $0\leq𝑎_𝑖\leq𝑦_𝑖$, and perform the following update 𝑎𝑖 times: $𝑘:=⌈(𝑘⋅𝑥_𝑖)⌉$.</p><p>Note that <strong>𝑥𝑖 can be a fractional value</strong>. See input format for more details. Also, $⌈𝑥⌉$ is the smallest integer $\geq𝑥$.</p><p>At the 𝑖i-th time-step, you must apply the 𝑖i-th operation exactly once.</p><p>For each 𝑗 such that $1\leq𝑗\leq𝑚$, output the earliest time-step at which you can create <strong>exactly</strong> 𝑗 bananas. If you cannot create <strong>exactly</strong> 𝑗 bananas, output −1.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line contains two space-separated integers 𝑛 $(1\leq𝑛\leq200)$ and 𝑚 $(2\leq𝑚\leq10^5)$.</p><p>Then, 𝑛 lines follow, where the 𝑖-th line denotes the operation for the 𝑖-th timestep. Each such line contains three space-separated integers $t_i$, $𝑥′_𝑖$ and $𝑦_i (1\leq𝑡_𝑖\leq2, 1\leq𝑦_𝑖\leq𝑚)$.</p><p>Note that you are given $𝑥′_𝑖$, which is $10^5⋅𝑥_𝑖$. Thus, to obtain $𝑥_𝑖$, use the formula $𝑥_𝑖={𝑥′_𝑖 \over 10^5}$.</p><p>For <strong>type 1</strong> operations, $1\leq𝑥′_𝑖\leq10^5⋅𝑚$, and for <strong>type 2</strong> operations, $10^5&lt;𝑥′_𝑖≤10^5⋅𝑚$.</p><br><p><font style="font-weight:bold;font-size:22px;" > Output</font></p><p>Print 𝑚 integers, where the 𝑖-th integer is the earliest time-step when you can obtain <strong>exactly</strong> 𝑖 bananas $(or\ −1\ if\ it\ is\ impossible)$.</p><br><p><font style="font-weight:bold;font-size:22px;" >Examples</font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">20</span><span class="token number">1</span> <span class="token number">300000</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">400000</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">1000000</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">20</span><span class="token number">1</span> <span class="token number">399999</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">412345</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">1000001</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a><strong>题意</strong></h3><p>&#8195;&#8195;现在你的微波炉在n时间以后就会报废，在每一个时间节点你都可以进行往微波炉内放香蕉的操作。具体操作为三个参数$𝑡_𝑖,\ 𝑥_𝑖,\ 𝑦_𝑖$，假设此时微波炉有k根香蕉，t为1时可以进行$𝑘:=⌈(𝑘+𝑥_𝑖)⌉$的操作0至y次；t为2时可以进行$𝑘:=⌈(𝑘·𝑥_𝑖)⌉$的操作0至y次。请问微波炉内香蕉数量可以达到[0, 1, 2, …, M]的最早时刻是多少？若无法到达该数量则输出-1。</p><br><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;此题非常容易想到使用暴力的方式，即在每个时刻都计算出微波炉内香蕉的可能个数，该算法的时间复杂度是$O(N·M^2)$，很显然会TLE。下一步需要思考怎么找到停止查询的条件，即如何优化暴力方法的细节。不难发现在遍历到一个$ans[i]\neq-1$的情况时其实就可以跳出后续的遍历了，因为该数量一定会作为本次遍历的一个起点。</p><p>&#8195;&#8195;本题还有bfs写法，思路和暴力的大致一样，但是它可以过滤一些非起点的判断</p><br><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a><strong>收获</strong></h3><p>三元组的使用：</p><ul><li>声明：vector&lt;tuple&lt;int, ll, int&gt; &gt; data;</li><li>插入：data.emplace_back$(x,\ y,\ z)$;</li><li>取值：x = get&lt;0&gt;$(data[index])$;</li></ul><p>lambda式的写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> oper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">lceil</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> DIV<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> <span class="token function">lceil</span><span class="token punctuation">(</span>val <span class="token operator">*</span> x<span class="token punctuation">,</span> DIV<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span><span class="token keyword">const</span> ll DIV <span class="token operator">=</span> <span class="token number">1e5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// the long version of ceil</span><span class="token keyword">inline</span> ll <span class="token function">lceil</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> ll<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> data<span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t1<span class="token punctuation">,</span> y1<span class="token punctuation">;</span>    ll x1<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %lld %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// pair记录（当前时间， 微波炉的香蕉个数）</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> ll<span class="token operator">></span> <span class="token operator">></span> que<span class="token punctuation">;</span>    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> <span class="token punctuation">[</span>now<span class="token punctuation">,</span> num<span class="token punctuation">]</span> <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("当前第%d步操作,有%d根香蕉\n", now, num);</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        now<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">></span> N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> get<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll x <span class="token operator">=</span> get<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> oper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                val <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">lceil</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> DIV<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                val <span class="token operator">=</span> <span class="token function">lceil</span><span class="token punctuation">(</span>val <span class="token operator">*</span> x<span class="token punctuation">,</span> DIV<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>now<span class="token punctuation">,</span> num<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">oper</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span>M<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// the key to AC!</span>            ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>now<span class="token punctuation">,</span> num<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a><font color='red' style='font-weight:bold'>E题</font></h2><h3 id="题面-4"><a href="#题面-4" class="headerlink" title="题面"></a><strong>题面</strong></h3><center style="font-weight:bold;font-size:28px">E. Two Houses</center><center>time limit per test: 3.5 second</center><center>memory limit per test: 256 megabytes</center><br><p><strong>This is an interactive problem. Remember to flush your output while communicating with the testing program.</strong> You may use fflush$(stdout)$ in C++, system.out.flush$()$ in Java, stdout.flush$()$ in Python or flush$(output)$ in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: <a href="https://codeforces.com/blog/entry/45307">https://codeforces.com/blog/entry/45307</a>.</p><p>There is a city in which Dixit lives. In the city, there are 𝑛n houses. There is <strong>exactly one directed road between every pair of houses.</strong> For example, consider two houses A and B, then there is a directed road either from A to B or from B to A but not both. The number of roads leading to the 𝑖i-th house is 𝑘𝑖ki.</p><p>Two houses A and B are <em>bi-reachable</em> if A is reachable from B <strong>and</strong> B is reachable from A. We say that house B is reachable from house A when there is a path from house A to house B.</p><p>Dixit wants to buy two houses in the city, that is, one for living and one for studying. Of course, he would like to travel from one house to another. So, he wants to find a pair of bi-reachable houses A and B. Among all such pairs, he wants to choose one with the maximum value of $|𝑘_𝐴−𝑘_𝐵|$, where 𝑘𝑖ki is the number of roads leading to the house 𝑖i. If more than one optimal pair exists, any of them is suitable.</p><p>Since Dixit is busy preparing CodeCraft, can you help him find the desired pair of houses, or tell him that no such houses exist?</p><p>In the problem input, you are <strong>not</strong> given the direction of each road. You are given — for each house — only the number of incoming roads to that house $(𝑘_𝑖)$.</p><p>You are allowed to ask only one type of query from the judge: give two houses A and B, and the judge answers whether B is reachable from A. There is <strong>no upper limit on the number of queries</strong>. But, <strong>you cannot ask more queries after the judge answers “Yes” to any of your queries.</strong> Also, you cannot ask the same query twice.</p><p>Once you have exhausted all your queries $($or the judge responds “Yes” to any of your queries$)$, your program must output its guess for the two houses and quit.</p><p>See the Interaction section below for more details.</p><br><p><font style="font-weight:bold;font-size:22px;" > Input</font></p><p>The first line contains a single integer 𝑛 $(3\leq𝑛\leq500)$ denoting the number of houses in the city. The next line contains 𝑛 space-separated integers $𝑘_1,𝑘_2,…,𝑘_𝑛$ $(0\leq𝑘_𝑖\leq𝑛−1)$, the 𝑖i-th ofthem represents the number of incoming roads to the 𝑖-th house.</p><br><p><font style="font-weight:bold;font-size:22px;" >Interaction</font></p><p>To ask a query, print “? A B” $(1\leq𝐴,𝐵\leq𝑁,𝐴\neq𝐵)$. The judge will respond “Yes” if house B is reachable from house A, or “No” otherwise.</p><p>To output the final answer, print “! A B”, where A and B are bi-reachable with the maximum possible value of |𝑘𝐴−𝑘𝐵|. If there does not exist such pair of houses A and B, output “! 0 0”.</p><p>After outputting the final answer, your program must terminate immediately, otherwise you will receive Wrong Answer verdict.</p><p>You cannot ask the same query twice. <strong>There is no upper limit to the number of queries you ask, but, you cannot ask more queries after the judge answers “Yes” to any of your queries.</strong> Your program must now output the final answer $(“!\ A\ B”\ or\ “!\ 0\ 0”)$ and terminate.</p><p>If you ask a query in incorrect format or repeat a previous query, you will get Wrong Answer verdict.</p><p>After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get the Idleness limit exceeded error. To do this, use:</p><ul><li>fflush$(stdout)$ or cout.flush$()$ in C++;</li><li>System.out.flush$()$ in Java;</li><li>flush$(output)$ in Pascal;</li><li>stdout.flush$()$ in Python;</li><li>see documentation for other languages.</li></ul><br><p><font style="font-weight:bold;font-size:22px;" > Examples </font></p><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">?</span> <span class="token number">1</span> <span class="token number">2</span><span class="token operator">!</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$input$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">3</span>NoNoNoNoNoNo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$output$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">?</span> <span class="token number">2</span> <span class="token number">1</span><span class="token operator">?</span> <span class="token number">1</span> <span class="token number">3</span><span class="token operator">?</span> <span class="token number">4</span> <span class="token number">1</span><span class="token operator">?</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">?</span> <span class="token number">4</span> <span class="token number">2</span><span class="token operator">?</span> <span class="token number">4</span> <span class="token number">3</span><span class="token operator">!</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a><strong>题意</strong></h3><p>&#8195;&#8195;Dixit居住的城市中有n个房子，<strong>在每两个房子之间都有确定的有向通路</strong>，有向通路对A， B两个房子有$A \rightarrow B$ or $A \leftarrow B$，而非$A \leftrightarrow B$，i号房子的入度为$k_i$。</p><p>&#8195;&#8195;如果A可以到B，B也可以到A，那么称A和B是双可达的，即A到B和B到A的有向通路。Dixit想要在这座城市中购买两个房子，一个用来居住，一个用来学习。当然这两个希望选择$|k_A\ -\ k_B|$最大的两间，$k_i$为房子的入度。如果存在多个理想的选择，它们都应该作为备选方案。</p><p>&#8195;&#8195;因为Dixit现在要准备CodeCraft，你能够帮助他找出符合条件的一对房间吗？或者告诉他没有符合条件的选择。</p><p>&#8195;&#8195;在问题的输入中，没有给出边的指向，而给出每个房子的入度。</p><p>&#8195;&#8195;你可以使用 ‘? A B’的方式对系统进行询问A到B是否有通路，如果有系统返回’Yes’，否则’No’<strong>没有对询问次数上限的限制，但是不能反复询问一个问题两次</strong>。在系统返回Yes的时候程序必须立即返回答案并退出。答案的格式为! A B，若不存在则输出! 0 0</p><br><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>&#8195;&#8195;首先让我们思考一下如何找到一对双可达的节点，因为在询问A和B之间是否有指向边时若系统返回Yes则不能继续问更多的问题了，因此在询问A到B时需要保证B到A是可达的，所以怎么保证这一点呢？</p><p>&#8195;&#8195;该题可以看成强连通图，把强连通分量看作一个点，然后拓扑排序后排序在前的节点的入度一定是小于排在后面的。</p><br><h3 id="code-4"><a href="#code-4" class="headerlink" title="code"></a><strong>code</strong></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">indegree</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> indegree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> indegree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>indegree<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>j<span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">,</span> b <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"? "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string str<span class="token punctuation">;</span>        cin <span class="token operator">>></span> str<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"! "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"! 0 0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> codeforces </tag>
            
            <tag> div2 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
