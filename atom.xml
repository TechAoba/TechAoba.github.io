<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TechAoba的博客</title>
  
  <subtitle>Welcome to techaoba&#39;s blog</subtitle>
  <link href="http://techaoba.github.io/atom.xml" rel="self"/>
  
  <link href="http://techaoba.github.io/"/>
  <updated>2022-03-10T08:28:33.118Z</updated>
  <id>http://techaoba.github.io/</id>
  
  <author>
    <name>TechAoba</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面经整理</title>
    <link href="http://techaoba.github.io/2022/03/09/mian-jing-zheng-li/"/>
    <id>http://techaoba.github.io/2022/03/09/mian-jing-zheng-li/</id>
    <published>2022-03-09T09:27:14.000Z</published>
    <updated>2022-03-10T08:28:33.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot启动流程"><a href="#springboot启动流程" class="headerlink" title="springboot启动流程"></a>springboot启动流程</h1><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h2><p>其实就是问问你消息队列都有哪些使用场景，然后你项目里具体是什么场景，说说你在这个场景里用消息队列是什么？</p><p>面试官问你这个问题，<strong>期望的一个回答</strong>是说，你们公司有个什么<strong>业务场景</strong>，这个业务场景有个什么技术挑战，如果不用 MQ 可能会很麻烦，但是你现在用了 MQ 之后带给了你很多的好处。</p><p>先说一下消息队列常见的使用场景吧，其实场景有很多，但是比较核心的有 3 个：<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-1.png" alt="mq-1"></p><p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-2.png" alt="mq-2"></p><p><strong>总结</strong>：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><p><strong>面试技巧</strong>：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-3.png" alt="mq-3"></p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。</p><p>如果<strong>使用 MQ</strong>，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-4.png" alt="mq-4"></p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p><p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-5.png" alt="mq-5"></p><p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-6.png" alt="mq-6"></p><p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h3 id="消息队列有什么优缺点"><a href="#消息队列有什么优缺点" class="headerlink" title="消息队列有什么优缺点"></a>消息队列有什么优缺点</h3><p>优点上面已经说了，就是<strong>在特殊场景下有其对应的好处</strong>，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><p>缺点有以下几个：</p><ul><li><p>系统可用性降低</p><p>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，ABCD 四个系统还好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整？MQ 一挂，整套系统崩溃，你不就完了？<strong>如何保证消息队列的高可用</strong>。</p></li><li><p>系统复杂度提高</p><p>硬生生加个 MQ 进来，你怎么<strong>保证消息没有重复消费</strong>？怎么<strong>处理消息丢失的情况</strong>？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p></li><li><p>一致性问题</p><p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。</p></li></ul><h2 id="如何保证消息队列的高可用？"><a href="#如何保证消息队列的高可用？" class="headerlink" title="如何保证消息队列的高可用？"></a>如何保证消息队列的高可用？</h2><h3 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h3><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p><p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的，没人生产用单机模式。</p><h4 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h4><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每台机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-7.png" alt="mq-7"></p><p>这种方式确实很麻烦，也不怎么好，<strong>没做到所谓的分布式</strong>，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有<strong>数据拉取的开销</strong>，后者导致<strong>单实例性能瓶颈</strong>。</p><p>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p><p>所以这个事儿就比较尴尬了，这就<strong>没有什么所谓的高可用性</strong>，<strong>这方案主要是提高吞吐量的</strong>，就是说让集群中多个节点来服务某个 queue 的读写操作。</p><h4 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h4><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论是元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-8.png" alt="mq-8"></p><p>那么<strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><h3 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h3><p>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p><p>这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</p><p>实际上 RabbitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，因为无论怎么玩儿，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放这个 queue 的完整数据。</p><p>Kafka 0.8 以前，是没有 HA 机制的，就是任何一个 broker 宕机了，那个 broker 上的 partition 就废了，没法写也没法读，没有什么高可用性可言。</p><p>比如说，我们假设创建了一个 topic，指定其 partition 数量是 3 个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个 topic 的 1/3 的数据就丢了，因此这个是做不到高可用的。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/kafka-before.png" alt="kafka-before"></p><p>Kafka 0.8 以后，提供了 HA 机制，就是 replica（复制品） 副本机制。每个 partition 的数据都会同步到其它机器上，形成自己的多个 replica 副本。所有 replica 会选举一个 leader 出来，那么生产和消费都跟这个 leader 打交道，然后其他 replica 就是 follower。写的时候，leader 会负责把数据同步到所有 follower 上去，读的时候就直接读 leader 上的数据即可。只能读写 leader？很简单，<strong>要是你可以随意读写每个 follower，那么就要 care 数据一致性的问题</strong>，系统复杂度太高，很容易出问题。Kafka 会均匀地将一个 partition 的所有 replica 分布在不同的机器上，这样才可以提高容错性。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/kafka-after.png" alt="kafka-after"></p><p>这么搞，就有所谓的<strong>高可用性</strong>了，因为如果某个 broker 宕机了，没事儿，那个 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面有某个 partition 的 leader，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，大家继续读写那个新的 leader 即可。这就有所谓的高可用性了。</p><p><strong>写数据</strong>的时候，生产者就写 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以适当调整这个行为）</p><p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p><h3 id="如何保证消息不被重复消费？"><a href="#如何保证消息不被重复消费？" class="headerlink" title="如何保证消息不被重复消费？"></a>如何保证消息不被重复消费？</h3><p>回答这个问题，首先你别听到重复消息这个事儿，就一无所知吧，你<strong>先大概说一说可能会有哪些重复消费的问题</strong>。</p><p>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开发来保证的。挑一个 Kafka 来举个例子，说说怎么重复消费吧。</p><p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，<strong>每隔一段时间</strong>（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p><p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p><p>举个栗子。</p><p>有这么个场景。数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152/153/154。消费者从 Kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 <code>offset=153</code> 的这条数据，刚准备去提交 offset 到 Zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1/2 的 offset 并没有提交，Kafka 也就不知道你已经消费了 <code>offset=153</code> 这条数据。那么重启之后，消费者会找 Kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1/2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。</p><p>注意：新版的 Kafka 已经将 offset 的存储从 Zookeeper 转移至 Kafka brokers，并使用内部位移主题 <code>__consumer_offsets</code> 进行存储。</p><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-10.png" alt="mq-10"></p><p>如果消费者干的事儿是拿一条数据就往数据库里写一条，会导致说，你可能就把数据 1/2 在数据库里插入了 2 次，那么数据就错啦。</p><p>其实重复消费不可怕，可怕的是你没考虑到重复消费之后，<strong>怎么保证幂等性</strong>。</p><p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p><p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p><p>所以第二个问题来了，怎么保证消息队列消费的幂等性？</p><p>其实还是得结合业务来思考，我这里给几个思路：</p><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul><p><img src="../images/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/mq-11.png" alt="mq-11"></p><p>当然，如何保证 MQ 的消费是幂等性的，在实际应用中需要结合具体的业务来看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot启动流程&quot;&gt;&lt;a href=&quot;#springboot启动流程&quot; class=&quot;headerlink&quot; title=&quot;springboot启动流程&quot;&gt;&lt;/a&gt;springboot启动流程&lt;/h1&gt;&lt;h1 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消</summary>
      
    
    
    
    <category term="面经" scheme="http://techaoba.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://techaoba.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>nlp demo练习</title>
    <link href="http://techaoba.github.io/2022/03/03/nlp-demo-lian-xi/"/>
    <id>http://techaoba.github.io/2022/03/03/nlp-demo-lian-xi/</id>
    <published>2022-03-03T07:45:56.000Z</published>
    <updated>2022-03-03T07:59:53.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h1><p>TF-IDF可以用来提取文章中的关键词，TF（Term Frequency，词频）有两种计算方法：</p><ul><li>文章中单词出现次数/文章的总词数</li><li>文章中单词出现次数/该文出现次数最多的词出现的次数</li></ul><p>词频作为文章关键词提取的特征很容易理解，那什么是IDF（Inverse Document Frequency）呢？在自然语言表达中许多语气词，代词等：“是”，“的”，“这个”，而这些词作为文章关键词肯定是不合适的，因此我们需要使用IDF调低它们的权重</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TF-IDF&quot;&gt;&lt;a href=&quot;#TF-IDF&quot; class=&quot;headerlink&quot; title=&quot;TF-IDF&quot;&gt;&lt;/a&gt;TF-IDF&lt;/h1&gt;&lt;p&gt;TF-IDF可以用来提取文章中的关键词，TF（Term Frequency，词频）有两种计算方法：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="nlp" scheme="http://techaoba.github.io/categories/nlp/"/>
    
    
    <category term="机器学习" scheme="http://techaoba.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nlp" scheme="http://techaoba.github.io/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://techaoba.github.io/2022/02/28/pa-chong-ru-men/"/>
    <id>http://techaoba.github.io/2022/02/28/pa-chong-ru-men/</id>
    <published>2022-02-28T08:26:37.000Z</published>
    <updated>2022-03-01T09:38:28.898Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mofanpy.com/tutorials/data-manipulation/scraping/">莫烦教程原文链接</a></p><h1 id="用python登陆网页"><a href="#用python登陆网页" class="headerlink" title="用python登陆网页"></a>用python登陆网页</h1><p>使用<code>urllib.request.urlopen</code>库登陆网页，读取网页源码，并打印在终端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token comment" spellcheck="true"># if has Chinese, apply decide()</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>    <span class="token string">"https://mofanpy.com/static/scraping/basic-structure.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Scraping tutorial 1 | 莫烦Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/static/img/description/tab_icon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>爬虫测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      这是一个在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>莫烦Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/tutorials/scraping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爬虫教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 中的简单测试.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用正则化表达式匹配来获取有用的信息，如现在希望获取网页title标签里的信息：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;title>(.+?)&lt;/title>"</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPage title is: "</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Page title is:  Scraping tutorial 1 | 莫烦Python</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要获取的信息包含多行，即包含’\n’字符，需要加上<code>re.DOTALL</code>属性，因为正则表达式中的dot(.)不能匹配换行符。</p><pre class="line-numbers language-python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;p>(.*?)&lt;/p>"</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPage Paragraph is: "</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Page Paragraph is:   这是一个在 &lt;a href="/">莫烦Python&lt;/a> &lt;a href="/tutorials/data-manipulation/scraping/">爬虫教程&lt;/a> 中的简单测试. </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后来找一找该网页中所有的链接信息吧！</p><pre class="line-numbers language-python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'href="(.*?)"'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"All links: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># All links:  ['https://mofanpy.com/static/img/description/tab_icon.png', 'https://mofanpy.com/', 'https://mofanpy.com/tutorials/scraping']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup解析网页"><a href="#BeautifulSoup解析网页" class="headerlink" title="BeautifulSoup解析网页"></a>BeautifulSoup解析网页</h1><p>虽然使用正则表达式regex很灵活，也是python自带的功能。但是有时提取的信息并不纯粹，如提起p标签内容时会发现里面包括链接信息。</p><p>使用BeautifulSoup便可以处理这些问题。</p><p>Beautiful <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">英文官网</a>，<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">中文官网</a></p><p>安装：</p><ul><li><code>pip3 install beautifulsoup4</code></li><li><code>pip3 install lxml</code></li></ul><p>使用BeautifulSoup可以轻松获取标签信息：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenhtml <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/static/scraping/basic-structure.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>h1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;h1>爬虫测试1&lt;/h1></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果网页中有多个同样的 tag, 比如链接 <code>&lt;a&gt;</code>, 我们可以使用 <code>find_all()</code> 来找到所有的选项. 因为我们真正的 link 不是在 <code>&lt;a&gt;</code> 中间 <code>&lt;/a&gt;</code>, 而是在 <code>&lt;a href=&quot;link&quot;&gt;</code> 里面, 也可以看做是 <code>&lt;a&gt;</code> 的一个属性. 我们能用像 Python 字典的形式, 用 key 来读取 <code>l[&quot;href&quot;]</code>.</p><pre class="line-numbers language-python"><code class="language-python">all_href <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取所有a标签中的链接</span>all_href <span class="token operator">=</span> <span class="token punctuation">[</span>l<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> all_href<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> all_href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;a href="https://mofanpy.com/">莫烦Python&lt;/a>, &lt;a href="https://mofanpy.com/tutorials/scraping">爬虫教程&lt;/a>]</span> <span class="token comment" spellcheck="true">#['https://mofanpy.com/', 'https://mofanpy.com/tutorials/scraping']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup解析网页CSS"><a href="#BeautifulSoup解析网页CSS" class="headerlink" title="BeautifulSoup解析网页CSS"></a>BeautifulSoup解析网页CSS</h1><p>这一节将使用css的class选择内容。</p><p>网页源码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>爬虫练习 列表 class | 莫烦 Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.jan</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.feb</span> </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.month</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>列表 爬虫练习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>莫烦 Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tutorials/data-manipulation/scraping/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爬虫教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 里无敌简单的网页, 所有的 code        让你一目了然, 清晰无比.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月一号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月二号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一月三号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feb month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>五月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们希望找<code>jan</code>下面的这些<code>&lt;li&gt;</code>，BeautifulSoup可以通过<code>class=&quot;jan&quot;</code>找到它们。<code>soup.findAll(&quot;li&quot;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</code>会做一次筛选，只会选择月份相关的li标签。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token comment" spellcheck="true"># if has Chinese, apply decode()</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/static/scraping/list.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>months <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"month"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> month <span class="token keyword">in</span> months<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>month<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""一月二月三月四月五月[&lt;li class="month">一月&lt;/li>, &lt;li class="feb month">二月&lt;/li>, &lt;li class="month">三月&lt;/li>, &lt;li class="month">四月&lt;/li>, &lt;li class="month">五月&lt;/li>]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到一月份的三个li:</p><pre class="line-numbers language-python"><code class="language-python">jan <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"jan"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>d_jan <span class="token operator">=</span> jan<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token keyword">for</span> d <span class="token keyword">in</span> d_jan<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""一月一号一月二号一月三号"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeautifulSoup结合正则表达式"><a href="#BeautifulSoup结合正则表达式" class="headerlink" title="BeautifulSoup结合正则表达式"></a>BeautifulSoup结合正则表达式</h1><p>本节采用bs结合regex获取源码中更有难度的信息。</p><p>网页中的图片都藏在这样一个tag中：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://mofanpy.com/static/img/course_cover/tf.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以, 我们可以用 <code>soup</code> 将这些 <code>&lt;img&gt;</code> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同. 或者每一个图片有的可能是 jpg 有的是 png, 如果我们只想挑选 jpg 形式的图片, 我们就可以用这样一个正则 <code>r&#39;.*?\.jpg&#39;</code> 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>img_links <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"src"</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'.*?\.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> link <span class="token keyword">in</span> img_links<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""https://static.mofanpy.com/static/img/icon/keras_icon.jpghttps://static.mofanpy.com/static/img/description/404-Page.jpg"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小练习：爬取百度百科"><a href="#小练习：爬取百度百科" class="headerlink" title="小练习：爬取百度百科"></a>小练习：爬取百度百科</h1><p>爬虫的原理是在爬取网页源码后，遍历找到网页中的外部链接，接着爬取该链接的源码，进而删选有用的信息。就像一堆虫子一样爬遍植物的所有分支。</p><p>我们以百度百科-网络爬虫词条作为网络爬虫的入口。打印该页面源码我们会发现一些链接，指向百度百科另一些词条，如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E8%9C%98%E8%9B%9B/8135707<span class="token punctuation">"</span></span> <span class="token attr-name">data-lemmaid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8135707<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>蜘蛛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E8%A0%95%E8%99%AB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>蠕虫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/%E9%80%9A%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通用搜索引擎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过观察, 我们发现, 链接有些共通之处. 它们都是 <code>/item/</code> 开头, 夹杂着一些 <code>%E9</code> 这样的东西. 但是仔细搜索一下, 发现还有一些以 <code>/item/</code> 开头的, 却不是词条. 比如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/item/史记·2016?fr<span class="token punctuation">=</span>navbar<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>史记·2016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此我们需要对这些链接做一些筛选，之前提到的用 BeautifulSoup 和 正则表达式来筛选应该用得上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">import</span> re<span class="token keyword">import</span> randombase_url <span class="token operator">=</span> <span class="token string">"https://baike.baidu.com"</span>his <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 随便找一个url完成下一层的爬取</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> base_url <span class="token operator">+</span> his<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'    url: '</span><span class="token punctuation">,</span> his<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># find valid urls</span>    sub_urls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"_blank"</span><span class="token punctuation">,</span> <span class="token string">"href"</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/item/(%.{2})+$"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sub_urls<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        his<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>sub_urls<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># no valid sub link found</span>        his<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0 网络爬虫     url:  /item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/51627111 矩阵     url:  /item/%E7%9F%A9%E9%98%B52 特征向量     url:  /item/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F3 图论     url:  /item/%E5%9B%BE%E8%AE%BA4 特征向量     url:  /item/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F5 范数     url:  /item/%E8%8C%83%E6%95%B06 算子     url:  /item/%E7%AE%97%E5%AD%907 拉普拉斯算子     url:  /item/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%908 坐标系     url:  /item/%E5%9D%90%E6%A0%87%E7%B3%BB9 坐标转换     url:  /item/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A210 右手系     url:  /item/%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB11 三维空间     url:  /item/%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B412 宇宙飞船     url:  /item/%E5%AE%87%E5%AE%99%E9%A3%9E%E8%88%B913 自动检测系统     url:  /item/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F14 宇宙飞船     url:  /item/%E5%AE%87%E5%AE%99%E9%A3%9E%E8%88%B915 阿波罗飞船     url:  /item/%E2%80%9C%E9%98%BF%E6%B3%A2%E7%BD%97%E2%80%9D%E5%8F%B7%E9%A3%9E%E8%88%B916 登陆月球     url:  /item/%E7%99%BB%E6%9C%8817 东方红三号卫星     url:  /item/%E4%B8%9C%E6%96%B9%E7%BA%A2%E4%B8%89%E5%8F%B7%E5%8D%AB%E6%98%9F18 通信卫星     url:  /item/%E9%80%9A%E4%BF%A1%E5%8D%AB%E6%98%9F19 国际通信卫星     url:  /item/%E5%9B%BD%E9%99%85%E9%80%9A%E4%BF%A1%E5%8D%AB%E6%98%"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多功能的Requests"><a href="#多功能的Requests" class="headerlink" title="多功能的Requests"></a>多功能的Requests</h1><p>我们通常使用 Python 的自带模块 urllib, 来提交网页请求. 这个模块能满足我们大部分的需求, 但是为了满足你日益膨胀的其他需求, 比如向网页发送信息, 上传图片等等, 我们还有一个伟大的 Python 外部模块 requests, 来有效的处理这些问题.</p><p>安装环境：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mofanpy.com/tutorials/data-manipulation/scraping/&quot;&gt;莫烦教程原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;用python登陆网页&quot;&gt;&lt;a href=&quot;#用python登陆网页&quot; class=&quot;h</summary>
      
    
    
    
    <category term="爬虫" scheme="http://techaoba.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="http://techaoba.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="http://techaoba.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式python</title>
    <link href="http://techaoba.github.io/2022/02/28/zheng-ze-biao-da-shi-python/"/>
    <id>http://techaoba.github.io/2022/02/28/zheng-ze-biao-da-shi-python/</id>
    <published>2022-02-28T04:59:52.000Z</published>
    <updated>2022-03-01T07:17:22.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h1><p>以下为python的普通字符串匹配：</p><pre class="line-numbers language-python"><code class="language-python">pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>pattern2 <span class="token operator">=</span> <span class="token string">"bird"</span>string <span class="token operator">=</span> <span class="token string">"dog runs to cat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern1 <span class="token keyword">in</span> string<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern2 <span class="token keyword">in</span> string<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的例子，我们使用regex库实现匹配功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                <span class="token comment" spellcheck="true"># regex包</span>pattern1 <span class="token operator">=</span> <span class="token string">"cat"</span>pattern2 <span class="token operator">=</span> <span class="token string">"bird"</span>string <span class="token operator">=</span> <span class="token string">"dog runs to cat"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(12, 15), match='cat'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符正则化"><a href="#字符正则化" class="headerlink" title="字符正则化"></a>字符正则化</h1><ul><li><p>中括号选择形式</p><p>正则匹配串的形式为 <code>r&quot;regexStr&quot;</code>，即<font color='red'>字符串前加r</font>。</p><p>正则化完成单字符的多模式匹配。<code>r&quot;r[au]n&quot;</code>，可匹配ran或者run：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># multiple patterns("run" or "ran")</span>ptn <span class="token operator">=</span> r<span class="token string">"r[au]n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>ptn<span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>中括号范围形式</p><p>当希望匹配更多情况时，上面的方式未免太麻烦了。其实中括号匹配还提供了字符范围的表示方法，<code>r&quot;r[A-Z]n&quot;</code>，这样就可以把括号内的字符替换为A到Z的任意字符啦！[0-9a-z]既可以匹配数字也可以匹配字母</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[A-Z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[a-z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat, and cat ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9]n"</span><span class="token punctuation">,</span> <span class="token string">"dog r2ns to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r2n'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r[0-9a-z]n"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>\表示转译，因此要匹配反斜杠需要使用<code>\\</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \\ : match \</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"runs\\"</span><span class="token punctuation">,</span> <span class="token string">"runs\ to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 5), match='runs\\'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>.</code>可以匹配除\n以外的任意字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># . : match anything (except \n)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r.n"</span><span class="token punctuation">,</span> <span class="token string">"r[ns to me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r[n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="预定义字符集"><a href="#预定义字符集" class="headerlink" title="预定义字符集"></a>预定义字符集</h1><ul><li><p>数字，通配符：<code>\d</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \d : decimal digit</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>非数字字符，通配符：<code>\D</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \D : any non-decimal character</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Dn"</span><span class="token punctuation">,</span> <span class="token string">"run r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='run'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匹配空白键，<code>\s</code>可以匹配tab、空行等:[\t \n \r \f \v]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \s : any white space [\t \n \r \f \v] </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\sn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r\nn'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匹配分空白键的字符，<code>\S</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \S : opposite to \s, any non-white character</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Sn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color='red'>所有字母、数字和’_’</font>，<code>\w</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \w : [a-zA-Z0-9]</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='r4n'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>\W</code>与<code>\w</code>相反：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \W : opposite to \w</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"r\Wn"</span><span class="token punctuation">,</span> <span class="token string">"r\nn r4n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='r\nn'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h1><ul><li> <code>\b</code>表示空白字符，但只能放在头和尾。\b代表单词之间看不见的转移字符，如here is a word，这句中有好几个\b，每个单词前后都有一个\b。因此\b适合用在匹配整个单词的时候，如果只是单词中的一部分则匹配不了：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\bruns\b"</span><span class="token punctuation">,</span> <span class="token string">"dogs runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(5, 9), match='runs'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\br\buns"</span><span class="token punctuation">,</span> <span class="token string">"dogs r unsto cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\bruns"</span><span class="token punctuation">,</span> <span class="token string">"dogs runsto cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(5, 9), match='runs'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>\B</code>就是反过来，代表非单词间：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\Bruns\B"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"\Bo\B"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(1, 2), match='o'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>^</code>匹配字符串头:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ^ : match line beginning</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^dog"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='dog'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>^</code>和<code>flags=re.MULTILINE</code>完成多行头匹配</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># multi-line</span>string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""dog runs to cat.I run to dog."""</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"^I"</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(18, 19), match='I'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>$</code>匹配字符串尾：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># $ : match line ending</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"cat$"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(12, 15), match='cat'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h1><ul><li><p><code>*</code>：0次或者无限次</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># * : occur 0 or more times</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 1), match='a'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab*"</span><span class="token punctuation">,</span> <span class="token string">"abbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 5), match='abbbb'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>+</code>：1次或者无限次</p></li><li><p><code>&#123;m&#125;</code>:匹配前一个字符m次，也可以匹配字符串</p></li><li><p><code>&#123;n,m&#125;</code> ： 出现n到m次。注意里面不能有空格!</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># {n,m} : occure n to m times</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"ab{2,10}"</span><span class="token punctuation">,</span> <span class="token string">"abbbbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 8), match='abbbbbbb'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"a(bc){2,5}d"</span><span class="token punctuation">,</span> <span class="token string">"abcbcbcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 8), match='abcbcbcd'></span><span class="token comment" spellcheck="true"># 匹配字符串bc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>?</code>0次或者1次，(str)?，比如面对一些简称时可能有字符串的一段也可能没有：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ? : may or may not occur</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 6), match='Monday'></span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"Mon(day)?"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='Mon'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="逻辑、分组"><a href="#逻辑、分组" class="headerlink" title="逻辑、分组"></a>逻辑、分组</h1><ul><li><p>group组可以把匹配字符串的部分信息进行分组：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># group</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(\d+), Date: (.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Date: Feb/12/2021"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 021523, Date: Feb/12/2021</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 021523</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># Feb/12/2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当组数量非常大时，使用<code>?P&lt;groupName&gt;</code>对组进行命名是非常有必要的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># use ?P&lt;groupName> named group</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"(?P&lt;id>\d+), Date: (?P&lt;date>.+)"</span><span class="token punctuation">,</span> <span class="token string">"ID: 021523, Date: Feb/12/2021"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 021523, Date: Feb/12/2021</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 021523</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># Feb/12/2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>|</code> ： 表示逻辑或</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"(ran|run)"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['run', 'ran']</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"r(a|u)n"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># ['u', 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h1><ul><li><p>使用findall寻找所有匹配</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"r[au]n"</span><span class="token punctuation">,</span> <span class="token string">"run ren ran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># ['run', 'ran']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>替换<code>re.sub() replace</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"r[au]ns"</span><span class="token punctuation">,</span> <span class="token string">"catches"</span><span class="token punctuation">,</span> <span class="token string">"dog runs to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># dog catches to cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color='red'>分裂</font>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># re.split()</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">"[,;\.]"</span><span class="token punctuation">,</span> <span class="token string">"a;b,c.d;e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd', 'e']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color='red'>编译</font>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># compile</span>compile_re <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"r[au]n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>compile_re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"dog ran to cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;re.Match object; span=(4, 7), match='ran'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初见&quot;&gt;&lt;a href=&quot;#初见&quot; class=&quot;headerlink&quot; title=&quot;初见&quot;&gt;&lt;/a&gt;初见&lt;/h1&gt;&lt;p&gt;以下为python的普通字符串匹配：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot;&gt;&lt;code</summary>
      
    
    
    
    <category term="python" scheme="http://techaoba.github.io/categories/python/"/>
    
    
    <category term="正则表达式" scheme="http://techaoba.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="http://techaoba.github.io/2022/02/23/git-cao-zuo/"/>
    <id>http://techaoba.github.io/2022/02/23/git-cao-zuo/</id>
    <published>2022-02-23T07:47:18.000Z</published>
    <updated>2022-03-09T15:04:11.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="创建并初始化："><a href="#创建并初始化：" class="headerlink" title="创建并初始化："></a>创建并初始化：</h3><p><code>mkdir dir</code>—<code>cd dir</code>—<code>git init</code></p><p>会在目录下生成隐藏文件夹.git</p><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><ul><li>形式：<ul><li>用户名：tom</li><li>Email：<a href="mailto:&#x67;&#111;&#111;&#100;&#x4d;&#x6f;&#114;&#110;&#105;&#110;&#103;&#x40;&#102;&#x66;&#102;&#x2e;&#x63;&#111;&#109;">&#x67;&#111;&#111;&#100;&#x4d;&#x6f;&#114;&#110;&#105;&#110;&#103;&#x40;&#102;&#x66;&#102;&#x2e;&#x63;&#111;&#109;</a></li></ul></li><li>作用：区分不用开发人员身份</li><li>辨析：这里设置的签名和登陆远程库（代码托管中心）的账号、密码没有任何关系。</li><li>命令<ul><li>项目级别/仓库级别：仅在当前本地库范围内有效<ul><li><code>git config user.name tom_pro</code></li><li><code>git config user.email goodMorning_pro@fff.com</code></li></ul></li><li>系统用户级别：登陆当前操作系统的用户范围(参数 – global)<ul><li><code>git config --global user.name tom</code></li><li><code>git config --global user.email good@fff.com</code></li></ul></li><li>级别优先级：项目级别优先于系统用户级别。不允许二者都没有。</li></ul></li><li><code>cat .git/config</code>查看项目用户信息。</li><li><code>cat ~/.gitconfig</code>查看全局用户信息。</li></ul><h2 id="使用与管理"><a href="#使用与管理" class="headerlink" title="使用与管理"></a>使用与管理</h2><h3 id="添加提交及查看状态操作"><a href="#添加提交及查看状态操作" class="headerlink" title="添加提交及查看状态操作"></a>添加提交及查看状态操作</h3><p>将工作区“新建/修改”添加到缓存区<code>git add fileName</code></p><p>查看工作区、缓存区状态<code>git status</code></p><p>删除缓存文件<code>git rm --cached fileName</code></p><p>提交到本地仓库<code>git commit -m &#39;修改说明&#39; [fileName]</code></p><h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><p>查看提交记录：</p><ul><li>显示详情：<code>git log</code></li><li>显示一行：<code>git log --pretty=oneline</code></li><li><code>git log --oneline</code></li><li><code>git reflog</code></li></ul><p>基于索引值前进/后退 版本（<strong>推荐</strong>）：</p><ul><li><p><code>git reset --hard fd83eb9.....</code></p></li><li><p>索引值只要一部分，便可唯一确定版本</p></li></ul><p>前进后退版本的其他方式：</p><ul><li><code>git reset --hard HEAD^^^^</code></li><li>几个异或符号就是往前退几个版本</li><li><code>git reset --hard HEAD~3</code></li><li>波浪线后面接的数字表示后退的次数</li></ul><p>hard、soft、mixed参数对比：</p><ul><li>–soft参数<ul><li>仅仅在本地库移动HEAD指针</li></ul></li><li>–mixed参数<ul><li>在本地库移动HEAD指针</li><li>重制缓存区</li></ul></li><li>–hard参数<ul><li>在本地库移动HEAD指针</li><li>重制缓存区</li><li>重制工作区</li></ul></li></ul><p>git reset –hard HEAD等于清空缓存区add的操作。</p><h3 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h3><p>把工作区和缓存区的文件内容进行比较：<code>git diff fileName</code></p><p>工作区和本地库进行比较：<code>git diff HEAD fileName</code></p><p>工作区和本地历史记录进行比较：<code>git diff historyId fileName</code></p><p>不带文件名，比较多个文件：<code>git diff HEAD</code></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="分支概述"><a href="#分支概述" class="headerlink" title="分支概述"></a>分支概述</h3><ul><li>分支可以同时并行推进多个功能的开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除，重新开始即可。</li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li>创建分支：<code>git branch [分支名]</code></li><li>查看分支：<code>git branch -v</code></li><li>切换分支：<code>git checkout [分支名]</code></li><li>合并分支<ul><li>第一步：切换到接受修改的分支上（被合并，增加新内容）</li><li><code>git checkout [被合并分支名]</code></li><li>第二步：执行<code>git merge [合并进来的分支]</code></li></ul></li><li>解决合并冲突<ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：git add[文件名]</li><li>第四步：git commit -m ‘日志信息’  (注意：此时commit一定不能带具体文件名)</li></ul></li></ul><h2 id="Git一点原理"><a href="#Git一点原理" class="headerlink" title="Git一点原理"></a>Git一点原理</h2><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>git版本号使用SHA1算法，是一种hash算法。</p><ul><li>不管输入数据的数据量是多大，输入同一个hash算法，得到的加密结果长度固定。</li><li>hash算法确定，输入数据确定，输出数据能够保持不变。</li><li>hash算法确定，输入数据稍有变化，输出通常变化很大。</li><li>hash算法不可逆。</li></ul><h3 id="Git数据管理机制"><a href="#Git数据管理机制" class="headerlink" title="Git数据管理机制"></a>Git数据管理机制</h3><p><img src="../images/git%E6%93%8D%E4%BD%9C/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE2Nzc3ODUx,size_16,color_FFFFFF,t_70-20220223181330212.png" alt="img"></p><p>Git是把数据看作是对小型文件系统的一组快照。 每次提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="远程仓库修改的拉取"><a href="#远程仓库修改的拉取" class="headerlink" title="远程仓库修改的拉取"></a>远程仓库修改的拉取</h3><ul><li>pull = fetch + merge</li><li>git fetch origin master</li><li>git merge origin/master</li></ul><h3 id="协同开发时冲突的解决"><a href="#协同开发时冲突的解决" class="headerlink" title="协同开发时冲突的解决"></a>协同开发时冲突的解决</h3><ul><li>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取。</li><li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”即可。</li></ul><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><strong>fork + pull request</strong></p><ul><li>外部团队的人点击项目的Fork按钮</li><li>本地修改，推送到远程Fork仓库</li><li>点击 “Pull requests”-&gt;“New pull request” -&gt; “Create pull request”</li><li>项目拥有者审核后点击“Merge pull request”合并代码</li><li>将远程库修改拉取到本地</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git基本操作&quot;&gt;&lt;a href=&quot;#git基本操作&quot; class=&quot;headerlink&quot; title=&quot;git基本操作&quot;&gt;&lt;/a&gt;git基本操作&lt;/h1&gt;&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环</summary>
      
    
    
    
    <category term="git" scheme="http://techaoba.github.io/categories/git/"/>
    
    
    <category term="git" scheme="http://techaoba.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="http://techaoba.github.io/2021/12/20/springboot-xue-xi-bi-ji/"/>
    <id>http://techaoba.github.io/2021/12/20/springboot-xue-xi-bi-ji/</id>
    <published>2021-12-20T05:43:26.000Z</published>
    <updated>2022-01-03T05:15:26.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h1><h2 id="1、第一个SpringBoot程序"><a href="#1、第一个SpringBoot程序" class="headerlink" title="1、第一个SpringBoot程序"></a>1、第一个SpringBoot程序</h2><h3 id="1-1-环境需求"><a href="#1-1-环境需求" class="headerlink" title="1.1 环境需求"></a>1.1 环境需求</h3><ul><li>jdk1.8</li><li>Maven 3.6.3</li><li>springboot最新版</li><li>IDEA</li></ul><h3 id="1-2-HelloWorld"><a href="#1-2-HelloWorld" class="headerlink" title="1.2 HelloWorld"></a>1.2 HelloWorld</h3><p>使用Spring Initializr创建名为在helloworld的含SpringWeb的项目，在HelloworldApplication文件的同一级目录下创建controller package，在package里新建HelloController类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello, world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@RestController返回实体对象</li><li>@Controller返回页面，在@Controller类里面如果有方法需要返回实体，需加上@ResponseBody</li></ul><p>启动项目，访问localhost:8080/api/hello。</p><h2 id="2-配置文件yaml"><a href="#2-配置文件yaml" class="headerlink" title="2. 配置文件yaml"></a>2. 配置文件yaml</h2><h3 id="2-1-yaml的格式"><a href="#2-1-yaml的格式" class="headerlink" title="2.1 yaml的格式"></a>2.1 yaml的格式</h3><p>yaml和properties配置文件的功能一致，但properties只能以键值对的形式编写，yaml格式更加简单，推荐使用yaml(对空格的要求十分高！)。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true"># 对象</span><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> techaoba  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/03/28  <span class="token comment" spellcheck="true"># 行内写法</span>  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span> <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 数组</span>  <span class="token key atrule">lists</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> code    <span class="token punctuation">-</span> music    <span class="token punctuation">-</span> gril  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 边境牧羊犬    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-yaml给实体类赋值"><a href="#2-2-yaml给实体类赋值" class="headerlink" title="2.2 yaml给实体类赋值"></a>2.2 yaml给实体类赋值</h3><p>person类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-json"><code class="language-json">Person(name=techaoba<span class="token punctuation">,</span> age=<span class="token number">16</span><span class="token punctuation">,</span> happy=<span class="token boolean">false</span><span class="token punctuation">,</span> birth=Tue Mar <span class="token number">28</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2000</span><span class="token punctuation">,</span> maps=<span class="token punctuation">{</span>k1=v1<span class="token punctuation">,</span> k2=v2<span class="token punctuation">}</span><span class="token punctuation">,</span> lists=<span class="token punctuation">[</span>code<span class="token punctuation">,</span> music<span class="token punctuation">,</span> gril<span class="token punctuation">]</span><span class="token punctuation">,</span> dog=Dog(name=边境牧羊犬<span class="token punctuation">,</span> age=<span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-JSR303校验"><a href="#3-JSR303校验" class="headerlink" title="3. JSR303校验"></a>3. JSR303校验</h2><p>pom中加入校验依赖包：</p><pre class="line-numbers language-pom"><code class="language-pom"><dependency>  <groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-validation</artifactId></dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给学生的name加入@Email校验功能：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">// 数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-error"><code class="language-error">Property: person.nameValue: aobaOrigin: class path resource [application.yaml] - 2:9Reason: 邮箱格式错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DFEC5506-76D2-43CA-970D-CFAEF09423D4-0942010.png" alt="简单介绍"></p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ0MDY0Mg==,size_16,color_FFFFFF,t_70-20211231171447115.png" alt="补充"></p><p>其他例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UmsAdminParam</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规定长度</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度是6-18位"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能是空的</span>    <span class="token annotation punctuation">@NotEmpty</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户头像"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String icon<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"邮箱"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户昵称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String nickName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-多环境配置及配置文件位置"><a href="#4-多环境配置及配置文件位置" class="headerlink" title="4. 多环境配置及配置文件位置"></a>4. 多环境配置及配置文件位置</h2><h3 id="4-1-配置文件位置优先级"><a href="#4-1-配置文件位置优先级" class="headerlink" title="4.1 配置文件位置优先级"></a>4.1 配置文件位置优先级</h3><p>配置文件的默认位置有四个，优先级由高到低如下：</p><ul><li>file: ./config</li><li>file: ./</li><li>classpath: /config/</li><li>classpath: /</li></ul><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211231174255610.png" alt="配置文件优先级"></p><h3 id="4-2-多环境配置文件"><a href="#4-2-多环境配置文件" class="headerlink" title="4.2 多环境配置文件"></a>4.2 多环境配置文件</h3><p>项目当中会有测试环境和生产环境等，可以使用配置文件进行多环境的切换。</p><p>前缀都写application-，spring.profiles.active只用写减号-后的后缀。如下选择test环境便是8082端口：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># application-dev.yaml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>  <span class="token comment" spellcheck="true"># application-test.yaml</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>  <span class="token comment" spellcheck="true"># application.yaml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-静态资源"><a href="#5-静态资源" class="headerlink" title="5. 静态资源"></a>5. 静态资源</h2><h3 id="5-1-静态资源位置优先级"><a href="#5-1-静态资源位置优先级" class="headerlink" title="5.1 静态资源位置优先级"></a>5.1 静态资源位置优先级</h3><p>静态资源的位置有三个，优先级由高到低如下：</p><ul><li>classpath: /resources/</li><li>classpath: /static/</li><li>classpath: /public/      </li></ul><p>public里面放一些公共的资源，比如js文件；</p><p>static放静态资源，比如图片；</p><p>resources可放一些上传的文件等；</p><p>静态资源都可以通过<code>localhost:8080/资源名</code>来访问。</p><h3 id="5-2-thymeleaf模板引擎"><a href="#5-2-thymeleaf模板引擎" class="headerlink" title="5.2 thymeleaf模板引擎"></a>5.2 thymeleaf模板引擎</h3><p>首页默认为静态资源中的index.html，通过<code>localhost:8080</code>即可访问。</p><h4 id="5-2-1-thymeleaf配置和Controller页面跳转"><a href="#5-2-1-thymeleaf配置和Controller页面跳转" class="headerlink" title="5.2.1 thymeleaf配置和Controller页面跳转"></a>5.2.1 thymeleaf配置和Controller页面跳转</h4><p>模板引擎的作用就是把动态页面（即存在动态值）和传入的数据进行组装再渲染到页面上。</p><p>导入thymeleaf依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Thymeleaf --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>thymeleaf通过controller跳转访问templates目录下的test.html：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在templates目录下的所有页面，只能通过controller来跳转</span><span class="token comment" spellcheck="true">// 需要模板引擎的支持，如thymeleaf</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2-thymeleaf动态页面"><a href="#5-2-2-thymeleaf动态页面" class="headerlink" title="5.2.2 thymeleaf动态页面"></a>5.2.2 thymeleaf动态页面</h4><p>test静态页面：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 所有的html元素都可以被thymeleaf替换接管： th:元素名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller通过Model进行传值：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello, ECNU!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-thymeleaf语法"><a href="#5-2-3-thymeleaf语法" class="headerlink" title="5.2.3 thymeleaf语法"></a>5.2.3 thymeleaf语法</h4><ul><li><p>变量表达式：<code>$&#123;...&#125;</code></p></li><li><p>选择变量表达式：<code>*&#123;...&#125;</code></p></li><li><p>消息表达式：<code>#&#123;...&#125;</code></p></li><li><p>URL链接表达式：<code>@&#123;...&#125;</code></p></li><li><p>片段表达式：<code>~&#123;...&#125;</code></p></li></ul><p>其他例子：</p><p><code>th:utext=&quot;$&#123;msg&#125;&quot;</code>: 会进行转译，<code>th:text=&quot;$&#123;msg&#125;&quot;</code>：不会转译。</p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211231203141937.png" alt="th:text和th:utext的区别"></p><p><code>th:each</code> 遍历</p><p>Model中加入数组：</p><pre class="line-numbers language-java"><code class="language-java">model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"cities"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两种等价遍历写法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city:${cities}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city:${cities}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[ ${city} ]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-扩展SpringMVC"><a href="#6-扩展SpringMVC" class="headerlink" title="6. 扩展SpringMVC"></a>6. 扩展SpringMVC</h2><p>自定义视图解析器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扩展 springmvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ViewResolver 实现了视图解析器接口的类，我们就可以把它看做视图解析器</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ViewResolver <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义了一个自己的视图解析器MyViewResolver</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加视图跳转(/aoba会跳转到test页面)：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 视图跳转</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/aoba"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-员工管理系统（静态数据）"><a href="#7-员工管理系统（静态数据）" class="headerlink" title="7. 员工管理系统（静态数据）"></a>7. 员工管理系统（静态数据）</h2><h3 id="7-1-准备员工和部门静态数据和dao接口"><a href="#7-1-准备员工和部门静态数据和dao接口" class="headerlink" title="7.1 准备员工和部门静态数据和dao接口"></a>7.1 准备员工和部门静态数据和dao接口</h3><h3 id="7-2-BootStrap找系统静态资源模板导入resources"><a href="#7-2-BootStrap找系统静态资源模板导入resources" class="headerlink" title="7.2 BootStrap找系统静态资源模板导入resources"></a>7.2 BootStrap找系统静态资源模板导入resources</h3><h3 id="7-3-国际化"><a href="#7-3-国际化" class="headerlink" title="7.3 国际化"></a>7.3 国际化</h3><p>在resources中新建i18n（Internationalization）文件夹。</p><p>i18n中新建login.properties、login_en_US.properties、login_zh_CN.properties</p><p>IDEA提供了可视化内容编辑。login_en_US.properties内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">Sign in</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">Password</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">Remember me</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">Please sign in</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">Username</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>login.properties &amp;login_zh_CN.properties内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">login.btn</span><span class="token punctuation">=</span><span class="token attr-value">登陆</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住我</span><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在application.properties中配置i18n的位置：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置i18n的位置</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在国际化需要变换内容的地方使用<code>th:text=&quot;#&#123;login.tip&#125;&quot;</code>语法。</p><p>使用按钮传入语言参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自定义国际化组件并在MyMvcConfig里使用@Bean注入。</p><p>MyLocaleResolver类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 解析请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求中的语言参数</span>    String language <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果没有就使用默认的</span>    <span class="token comment" spellcheck="true">// 如果请求的链接携带了国际化的参数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// zh_CN</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> language<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 国家，地区</span>      locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>splits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> splits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> locale<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyMvcConfig类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义的国际化组件就生效了</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-登陆功能"><a href="#7-4-登陆功能" class="headerlink" title="7.4 登陆功能"></a>7.4 登陆功能</h3><p>index.html:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 表单的跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/login}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 如果msg的值为空，则不显示消息,#strings为工具类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过表单的name值取值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller实现跳转:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                      Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"dashboard"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-登陆拦截器"><a href="#7-5-登陆拦截器" class="headerlink" title="7.5 登陆拦截器"></a>7.5 登陆拦截器</h3><p>在Controller中加入HttpSession，如果通过登陆跳转到主页可以拿到session信息，否则通过拦截器拦截服务请求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                    HttpSession session<span class="token punctuation">,</span>                    Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/main.html"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义登陆拦截器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandleInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 登陆成功后有用户的session；</span>    Object loginUser <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 没有登陆</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写WebMvcConfigurer的addInterceptors方法，放行登陆页面和静态资源文件的请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandleInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/user/login"</span>                <span class="token punctuation">,</span> <span class="token string">"/css/**"</span><span class="token punctuation">,</span> <span class="token string">"/js/**"</span><span class="token punctuation">,</span> <span class="token string">"/img/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-展示员工列表"><a href="#7-6-展示员工列表" class="headerlink" title="7.6 展示员工列表"></a>7.6 展示员工列表</h3><p>提取公共页面</p><ul><li><code>th:fragment=&quot;sidebar&quot;</code></li><li><code>th:replace=&quot;~&#123;commons/commons::sidebar&#125;&quot;</code></li><li>如果要传递参数，可以直接使用()传参，接收判断即可</li></ul><p>员工信息展示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp:${emps}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getLastName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getEmail()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>0?<span class="token punctuation">'</span>女<span class="token punctuation">'</span>:<span class="token punctuation">'</span>男<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.getDepartment().getDepartmentName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(emp.getBirth(),<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toUpdate/}+${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/delemp/}+${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>```### 7.7 添加员工list.html中的添加按钮，跳转到添加页面，Get请求：```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加员工<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>```add.html的表单，传递员工信息并路由到/emp，Post请求``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123@qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>男      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>女      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getDepartmentName()}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2022-12-01 21:19<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>```Controller代码：``` java@GetMapping("/emp")public String toAddpage(Model model) {  // 查出所有部门的信息  Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Department</span><span class="token punctuation">></span></span> departments = departmentDao.getDepartments();  model.addAttribute("departments", departments);  return "emp/add";}@PostMapping("/emp")public String addEmp(Employee employee) {  // 添加  System.out.println(employee);  employeeDao.save(employee);  return "redirect:/emps";}```### 7.8 修改员工注意所有数据的日期格式需要统一（前后端也要统一），如在配置文件中加入以下配置：``` properties# 时间日期格式化spring.mvc.format.date=yyyy-MM-dd HH:mm```编辑按钮：``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/emp/<span class="token punctuation">'</span>+${emp.getId()}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>update.html表单，put请求需要过滤器处理，我不会，所以用post：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/updateEmp}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getLastName()}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getEmail()}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234567456@qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>1}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>男      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender()<span class="token punctuation">=</span><span class="token punctuation">=</span>0}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>女      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>部门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getDepartment().getId()<span class="token punctuation">=</span><span class="token punctuation">=</span>dept.getId()}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getDepartmentName()}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(employee.getBirth(),<span class="token punctuation">'</span>yyyy-MM-dd HH:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000/11/11<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>```Controller代码：```java// 去员工的修改页面@GetMapping("/emp/{id}")public String toUpdateEmp(@PathVariable("id") Integer id, Model model) {  // 查出原来的数据  Employee employee = employeeDao.getEmployeeById(id);  model.addAttribute("employee", employee);  // 查出所有部门的信息  Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Department</span><span class="token punctuation">></span></span> departments = departmentDao.getDepartments();  model.addAttribute("departments", departments);  return "emp/update";}@PostMapping("/updateEmp")public String updateEmp(Employee employee) {  employeeDao.update(employee);  return "redirect:/emps";}```### 7.9 删除员工删除按钮：``` html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/delemp/<span class="token punctuation">'</span>+${emp.getId()}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除员工</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delemp/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  employeeDao<span class="token punctuation">.</span><span class="token function">deleteEmployee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/emps"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-10-404页面"><a href="#7-10-404页面" class="headerlink" title="7.10 404页面"></a>7.10 404页面</h3><p>在静态资源中新建error文件夹，放入404.html文件。找不到资源，报404错误时便会跳转到该页面。同样也可以放入500.html等。</p><h3 id="7-11-注销"><a href="#7-11-注销" class="headerlink" title="7.11 注销"></a>7.11 注销</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LoginController中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>  session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/index.html"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-整合JDBC使用"><a href="#8-整合JDBC使用" class="headerlink" title="8. 整合JDBC使用"></a>8. 整合JDBC使用</h2><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220101223802789.png" alt="勾选JDBC相关依赖"></p><p>pom会自动导入两个依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- JDBC --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- MySQL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token comment" spellcheck="true">#    driver-class-name: com.mysql.jdbc.Driver</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JDCBController实现CRUD：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 查询数据库的所有信息</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM user"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maps<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 添加用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">addList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO user(`id`, `name`, `pwd`) values (8, 'bibilili', 'privilege')"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"save-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 修改用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"UPDATE user SET `name` = ?, pwd = ? WHERE id = "</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ECNU"</span><span class="token punctuation">;</span>    objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zzzz"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"update-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查询用户</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM user WHERE id = ?"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"delete-ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-切换Druid数据源"><a href="#9-切换Druid数据源" class="headerlink" title="9. 切换Druid数据源"></a>9. 切换Druid数据源</h2><p>pom依赖：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token comment" spellcheck="true">#    driver-class-name: com.mysql.jdbc.Driver</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment" spellcheck="true"># SpringBoot默认是不注入这些的，需要自己绑定</span>    <span class="token comment" spellcheck="true"># druid数据源专有配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span>    <span class="token comment" spellcheck="true">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span>    <span class="token comment" spellcheck="true">#则导入log4j 依赖就行</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionoProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写Druid配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后台监控功能</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServletRegistrationBean<span class="token operator">&lt;</span>StatViewServlet<span class="token operator">></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台需要登陆，账号密码配置</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加配置</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 登陆key，是固定的loginUsername和loginPassword</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 允许谁可以访问</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 禁止谁能防伪访问</span>    <span class="token comment" spellcheck="true">//        initParameters.put("techaoba", "192.168.xx.xx");</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置初始化参数</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 过滤器</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以设置过滤请求</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这些东西不进行过滤</span>    initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问localhost:8080/druid输入账号密码即可进入druid监控后台：</p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220102195046961.png" alt="druid后台"></p><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220102194806830.png" alt="调用一次查询接口"></p><h2 id="10-整合MyBatis"><a href="#10-整合MyBatis" class="headerlink" title="10. 整合MyBatis"></a>10. 整合MyBatis</h2><p>整合包：mybatis-spring-boot-start</p><p>pom:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- mybatis依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yaml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true"># 整合mybatis</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.techaoba.pojo  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写UserMapper接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @Mapper表示这是一个mybatis的mapper类</span><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resources/mybatis/mapper下编写UserMapper.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM `user`  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM `user` WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO user(`id`, `name`, `pwd`) values (#{id}, #{name}, #{pwd})  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    UPDATE user SET `name` = ?, pwd = ? WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    DELETE FROM user WHERE id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller中便可调用接口中的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>      <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUserList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-SpringSecurity（安全）"><a href="#11-SpringSecurity（安全）" class="headerlink" title="11. SpringSecurity（安全）"></a>11. SpringSecurity（安全）</h2><p>在web开发中，安全第一位！</p><p>安全应该在设计之初。</p><p>权限分为：</p><ul><li>功能权限</li><li>访问权限</li><li>菜单权限</li></ul><p>之前使用拦截器和过滤器控制权限，需要大量原生代码～冗余。</p><h3 id="11-1-简介"><a href="#11-1-简介" class="headerlink" title="11.1 简介"></a>11.1 简介</h3><p>Spring Security时针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，它可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-sercurity模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>webSecurity ConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是“认证”和“授权”（访问控制）。</p><p>“认证”（Authentication）</p><p>“授权”（Authorization）</p><p>这个概念是通用的，并不是只在Spring Security中存在。</p><h3 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h3><p>pom:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>认证和授权配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 授权</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首页所有人可以访问，但是里面的功能页只有对应有权限的人才能访问</span>    <span class="token comment" spellcheck="true">// 请求授权的规则</span>    <span class="token comment" spellcheck="true">// 链式编程</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有权限默认会到登陆页面</span>    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 认证</span>  <span class="token comment" spellcheck="true">// 密码编码：PasswordEncoder</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在内存中虚拟一个数据，为不同用户设置不同身份</span>    auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"techaoba"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Component注解的范围最广，所有类都可以注解，但是@Configuration注解一般注解在这样的类上：这个类里面有@Value注解的成员变量和@Bean注解的方法，就是一个配置类。</p><ul><li>@configuration和@component相同点是都是注解在类上的注解。</li><li>Spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用 @Repository、@Service 和 @Controller 对分层中的类进行注释，而用 @Component 对那些比较中立的类进行注释。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot学习笔记&quot;&gt;&lt;a href=&quot;#SpringBoot学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot学习笔记&quot;&gt;&lt;/a&gt;SpringBoot学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1、第一个SpringBoot程序</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="SpringBoot" scheme="http://techaoba.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>KMP专题</title>
    <link href="http://techaoba.github.io/2021/11/30/kmp-zhuan-ti/"/>
    <id>http://techaoba.github.io/2021/11/30/kmp-zhuan-ti/</id>
    <published>2021-11-30T14:58:55.000Z</published>
    <updated>2021-11-30T17:24:01.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、-KMP基本原理"><a href="#1、-KMP基本原理" class="headerlink" title="1、 KMP基本原理"></a>1、 KMP基本原理</h2><h3 id="1-1-匹配过程"><a href="#1-1-匹配过程" class="headerlink" title="1.1 匹配过程"></a>1.1 匹配过程</h3><p>KMP是一种时间复杂度达到O(M+N)的字符匹配算法，难点在于前缀数组prefix table的计算。步骤如下：</p><ul><li>计算匹配字符串每个前缀子串的<strong>最长相同前后缀长度</strong>。</li><li>在上一步计算的长度数组前加入-1，再整体后移一位得到prefix table。</li><li>进行字符串匹配，匹配失败把匹配串P的对应prefix位置拉到匹配失败的位置继续匹配，直到P匹配完毕。</li></ul><h3 id="1-2-prefix-table计算技巧"><a href="#1-2-prefix-table计算技巧" class="headerlink" title="1.2 prefix table计算技巧"></a>1.2 prefix table计算技巧</h3><p>现在再来看一个匹配串例子：</p><p>我们可以发现prefix table可以使用dp进行计算。对于匹配串P在第i+1次计算prefix值时判断字符P[i+1]和P[prefix[i] + 1]是否相等：</p><ul><li>相等 -&gt; prefix[i + 1] = prefix[i] + 1</li></ul><h3 id="1-3-代码"><a href="#1-3-代码" class="headerlink" title="1.3 代码"></a>1.3 代码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、-KMP基本原理&quot;&gt;&lt;a href=&quot;#1、-KMP基本原理&quot; class=&quot;headerlink&quot; title=&quot;1、 KMP基本原理&quot;&gt;&lt;/a&gt;1、 KMP基本原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-匹配过程&quot;&gt;&lt;a href=&quot;#1-1-匹配过程&quot; cla</summary>
      
    
    
    
    <category term="OJ" scheme="http://techaoba.github.io/categories/OJ/"/>
    
    
    <category term="OJ" scheme="http://techaoba.github.io/tags/OJ/"/>
    
    <category term="KMP算法" scheme="http://techaoba.github.io/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://techaoba.github.io/2021/09/10/linux-chang-yong-ming-ling/"/>
    <id>http://techaoba.github.io/2021/09/10/linux-chang-yong-ming-ling/</id>
    <published>2021-09-10T05:10:03.000Z</published>
    <updated>2022-03-04T08:07:34.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><p>创建用户 <code>sudo useradd -m username</code> # 会自动创建用户的家目录</p><p>设定用户密码<code>sudo passwd xiaoming</code>  </p><p>解决新建用户无法使用tab键无法补全代码的问题：</p><p><code>vi /etc/passwd</code>；然后在相应用户后的/bin/sh改为/bin/bash，如</p><p><strong>/home/username:/bin/bash</strong>。</p><p>给予用于root权限:</p><ul><li>修改文件：<code>vim /etc/sudoers</code></li><li>添加权限：<code>root ALL=(ALL) ALL      username ALL=(ALL) ALL </code></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="解压操作"><a href="#解压操作" class="headerlink" title="解压操作"></a>解压操作</h3><p><strong>tar -xvf **.tar //解压tar包</strong></p><p><strong>tar -xzvf **.tar.gz // 解压tar.gz</strong></p><p><strong>tar -xjvf **.tar.bz2 //解压 tar.bz2</strong></p><p><strong>tar -xZvf **.tar.Z // 解压tar.Z</strong></p><p><strong>unrar **.rar //解压rar</strong></p><p><strong>unzip **.zip //解压zip</strong></p><p><strong>gunzip **.gz //解压gz</strong></p><p>tar命令参数bai解释：<br>-z参数：表示解压的是dutar.gz文件（如果是tar.bz2就是-j）<br>-x参数：表示是执行解压缩操作而不是打包操作<br>-v参数：表示列出解压时的详细消息<br>-f参数：指定要解压的文件名</p><h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><p>打包成tar.gz格式压缩包</p><pre><code># tar -zcvf renwolesshel.tar.gz /renwolesshel</code></pre><p>打包成tar.bz2格式压缩包</p><pre><code># tar -jcvf renwolesshel.tar.bz2 /renwolesshel</code></pre><p>压缩成zip格式</p><pre><code># zip -q -r renwolesshel.zip renwolesshel/</code></pre><h3 id="删除操作-rm"><a href="#删除操作-rm" class="headerlink" title="删除操作 rm"></a>删除操作 rm</h3><p>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思</p><blockquote><p>删除文件夹实例：<br>rm -rf /var/log/httpd/access<br>将会删除/var/log/httpd/access目录以及其下所有文件、文件夹</p></blockquote><blockquote><p>删除文件使用实例：<br>rm -f /var/log/httpd/access.log<br>将会强制删除/var/log/httpd/access.log这个文件</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;&lt;h2 id=&quot;用户相关&quot;&gt;&lt;a href=&quot;#用户相关&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://techaoba.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://techaoba.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://techaoba.github.io/2021/09/10/mongodb-xue-xi-bi-ji/"/>
    <id>http://techaoba.github.io/2021/09/10/mongodb-xue-xi-bi-ji/</id>
    <published>2021-09-10T04:23:12.000Z</published>
    <updated>2021-09-10T08:52:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB学习笔记"><a href="#MongoDB学习笔记" class="headerlink" title="MongoDB学习笔记"></a>MongoDB学习笔记</h1><h2 id="1-Linux环境配置MongoDB"><a href="#1-Linux环境配置MongoDB" class="headerlink" title="1. Linux环境配置MongoDB"></a>1. Linux环境配置MongoDB</h2><h3 id="1-1-下载和安装"><a href="#1-1-下载和安装" class="headerlink" title="1.1 下载和安装"></a>1.1 下载和安装</h3><p>在<a href="https://www.mongodb.com/try/download/community">MongoDB官网下载</a>tgz文件，注意Version的格式x.y.z中y应选择偶数（稳定版）。上传文件至服务器。</p><p>解压文件<code>tar -zxvf mongodb-linux-x86_64-ubuntu1804-5.0.2.tgz</code></p><p>移动文件夹<code>mv mongodb-linux-x86_64-ubuntu1804-5.0.2 /usr/local/mongodb</code></p><p>新建几个目录，分别用来存储数据和日志、配置</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /usr/local/mongodb/datamkdir -p /usr/local/mongodb/logmkdir -p /usr/local/mongodb/conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建并修改配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/local/mongodb/conf/mongod.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：</p><pre><code>systemLog:  #MongoDB发送所有日志输出的目标指定为文件  destination: file  path: &quot;/usr/local/mongodb/log/mongod.log&quot;  logAppend: truestorage:  #mongod实例存储其数据的目录  dbPath: &quot;/usr/local/mongodb/data&quot;  journal:    #启用或禁用持久性日志以确保数据文件保持有效和可恢复。     enabled: trueprocessManagement:    #启用在后台运行mongos或mongod进程的守护进程模式。    fork: truenet:   #服务实例绑定的IP，默认是localhost    bindIp: 0.0.0.0   port: 27017</code></pre><h3 id="1-2-启动MongoDB服务"><a href="#1-2-启动MongoDB服务" class="headerlink" title="1.2 启动MongoDB服务"></a>1.2 启动MongoDB服务</h3><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/local/mongodb/bin/mongod -f conf/mongod.conf# 启动失败试试这条bin/mongod -f conf/mongod.conf --repair<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果启动后不是 successfully ，则是启动失败了。原因基本上就是配置文件有问题</p><p>使用navicat连接MongoDB：</p><p>若连接不上则关闭服务器的防火墙</p><pre><code># 安装防火墙(bushi)# apt install firewalld firewall-config# 查看防火墙状态systemctl status firewalld# 临时关闭防火墙systemctl stop firewalld# 开机禁止启动防火墙systemctl disable firewalld</code></pre><h3 id="1-3-关闭MongoDB服务"><a href="#1-3-关闭MongoDB服务" class="headerlink" title="1.3 关闭MongoDB服务"></a>1.3 关闭MongoDB服务</h3><pre class="line-numbers language-shell"><code class="language-shell">mongo --port 27017 # 切换到admin库 use admin # 关闭服务 db.shutdownServer()##### 或者直接killps -ef|grep mongokill -s 9 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-数据修复"><a href="#1-4-数据修复" class="headerlink" title="1.4 数据修复"></a>1.4 数据修复</h3><p>一旦数据损坏，则需要进行如下操作</p><h4 id="删除lock文件"><a href="#删除lock文件" class="headerlink" title="删除lock文件"></a>删除lock文件</h4><pre><code>rm -f  /usr/local/mongodb/data/*.lock</code></pre><h4 id="修复数据"><a href="#修复数据" class="headerlink" title="修复数据"></a>修复数据</h4><pre><code>/usr/local/mongdb/bin/mongod --repair --dbpath=/usr/local/mongodb/data</code></pre><h2 id="2-数据库的创建和删除"><a href="#2-数据库的创建和删除" class="headerlink" title="2. 数据库的创建和删除"></a>2. 数据库的创建和删除</h2><p>命令行进入mongodb,远程服务器键入<code>mongo</code></p><p>查看当前数据库信息：</p><p><code>show dbs</code> -&gt;admin   0.000GB  config  0.000GB  local   0.000GB（默认三个）</p><p>新建数据库:</p><p><code>use articledb</code> -&gt; 直接使用use创建新数据库</p><p>查看正在使用的数据库:</p><p><code>db</code></p><p>MongoDB 删除数据库：</p><pre><code>db.dropDatabase()</code></pre><p>提示：主要用来删除已经持久化的数据库</p><h2 id="3-集合的创建和删除"><a href="#3-集合的创建和删除" class="headerlink" title="3. 集合的创建和删除"></a>3. 集合的创建和删除</h2><p>集合，类似关系型数据库中的表。 可以显示的创建，也可以隐式的创建</p><h4 id="显式创建"><a href="#显式创建" class="headerlink" title="显式创建"></a>显式创建</h4><pre><code>db.createCollection(&quot;myCollection&quot;) </code></pre><h4 id="隐式创建"><a href="#隐式创建" class="headerlink" title="隐式创建"></a>隐式创建</h4><p>当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合,通常我们使用隐式创建文档即可</p><h5 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h5><pre><code>show collections 或show tables</code></pre><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><pre><code>db.集合名称.drop()</code></pre><p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p><h2 id="4-文档基本CRUD"><a href="#4-文档基本CRUD" class="headerlink" title="4. 文档基本CRUD"></a>4. 文档基本CRUD</h2><p>文档（document）的数据结构和 JSON 基本一样。 所有存储在集合中的数据都是 BSON 格式。和mysql一样可以单条插入也可以多条插入。</p><p><strong>单条插入</strong></p><p>使用insert() 或 save() 方法向集合中插入文档</p><pre><code>db.collection.insert(     &lt;document or array of documents&gt;,     &#123;         writeConcern: &lt;document&gt;,         ordered: &lt;boolean&gt;     &#125;)</code></pre><p>示例【隐式创建】：</p><pre><code>db.comment.insert(&#123;    &quot;articleid&quot;: &quot;100000&quot;,    &quot;content&quot;: &quot;今天天气真好，阳光明 媚&quot;,    &quot;userid&quot;: &quot;1001&quot;,    &quot;nickname&quot;: &quot;Rose&quot;,    &quot;createdatetime&quot;: new Date(),    &quot;likenum&quot;: NumberInt(10),    &quot;state&quot;: null&#125;)</code></pre><p>查询刚才插入的数据：</p><p><code>db.comment.find()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MongoDB学习笔记&quot;&gt;&lt;a href=&quot;#MongoDB学习笔记&quot; class=&quot;headerlink&quot; title=&quot;MongoDB学习笔记&quot;&gt;&lt;/a&gt;MongoDB学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1-Linux环境配置MongoDB&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MongoDB" scheme="http://techaoba.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>hugging face的Transformer使用笔记</title>
    <link href="http://techaoba.github.io/2021/09/07/hugging-face-de-transformer-shi-yong-bi-ji/"/>
    <id>http://techaoba.github.io/2021/09/07/hugging-face-de-transformer-shi-yong-bi-ji/</id>
    <published>2021-09-07T05:35:06.000Z</published>
    <updated>2021-09-08T08:49:47.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="huggingface的Transformer学习笔记"><a href="#huggingface的Transformer学习笔记" class="headerlink" title="huggingface的Transformer学习笔记"></a>huggingface的Transformer学习笔记</h1><h2 id="1-快速入门之pipeline"><a href="#1-快速入门之pipeline" class="headerlink" title="1. 快速入门之pipeline"></a>1. 快速入门之pipeline</h2><p>首先需要在conda环境中安装最新版的transformers包<code>pip install -U transformers</code>。</p><h3 id="1-1-快速情感分析"><a href="#1-1-快速情感分析" class="headerlink" title="1.1 快速情感分析"></a>1.1 快速情感分析</h3><p>现在我们开始使用transformers中的pipeline完成情感分析任务吧！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipelineclassifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">)</span>results <span class="token operator">=</span> classifier<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"We are very sad to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"label: {result['label']}, with score: {round(result['score'], 4)}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># No model was supplied, defaulted to distilbert-base-uncased-finetuned-sst-2-english</span><span class="token comment" spellcheck="true"># label: NEGATIVE, with score: 0.9985</span><span class="token comment" spellcheck="true"># label: NEGATIVE, with score: 0.5309</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，huggingface的API使用起来还是非常方便的。在pipeline中指定任务类型是”sentiment-analysis”，在分类器中输入分类的句子便可以得到分类结果。</p><p>但这种方式会通过网络缓存情感分析任务的默认模型，在下一次使用的时候依然可能需要重新缓存，非常不方便。</p><h3 id="1-2-调用本地模型"><a href="#1-2-调用本地模型" class="headerlink" title="1.2 调用本地模型"></a>1.2 调用本地模型</h3><p>可以在<a href="https://huggingface.co/models">huggingface模型仓库</a>中选择合适的模型进行相关的任务。比如情感分析的默认模型distilbert-base-uncased-finetuned-sst-2-english，或者bert-base-multilingual-uncased-sentiment模型也可用于情感分析任务。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意lfs一定要安装，安装后才能使用git下载大文件</span>$ <span class="token function">git</span> lfs <span class="token function">install</span>$ <span class="token function">git</span> clone https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english<span class="token comment" spellcheck="true"># 或者安装bert-base-multilingual-uncased-sentiment模型</span>$ <span class="token function">git</span> clone https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里在本地使用git下载了模型。下面是调用本地模型的写法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token punctuation">,</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassification<span class="token comment" spellcheck="true"># 模型的地址</span>model_dir <span class="token operator">=</span> <span class="token string">"../BERT_DIR/bert-base-multilingual-uncased-sentiment"</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model_dir<span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span>results <span class="token operator">=</span> classifier<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"label: {result['label']}, with score: {round(result['score'], 4)}"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># label: 5 stars, with score: 0.7496</span><span class="token comment" spellcheck="true"># label: 5 stars, with score: 0.2365</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现两个模型虽然都是用于情感分类，但是output所呈现的格式有所不同。</p><p>上一个分类的label为POSITIVE和NEGATIVE，score是对应的置信度。而第二个分为了五个级别，星级越高表示越乐观。</p><p>huggingface中除了用于情感分类任务的模型外还有其他有趣的模型，比如Zero-Shot Classification模型对于用于自定义的labels进行分类预测，这里下载模型<code>git clone https://huggingface.co/typeform/distilbert-base-uncased-mnli</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token punctuation">,</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassificationmodel_dir <span class="token operator">=</span> <span class="token string">"../BERT_DIR/distilbert-base-uncased-mnli"</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"zero-shot-classification"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">"Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app."</span><span class="token punctuation">,</span>           candidate_labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"mobile"</span><span class="token punctuation">,</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token string">"billing"</span><span class="token punctuation">,</span> <span class="token string">"account access"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'sequence': 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.', </span><span class="token comment" spellcheck="true"># 'labels': ['mobile', 'billing', 'account access', 'website'], </span><span class="token comment" spellcheck="true"># 'scores': [0.6334261298179626, 0.13391011953353882, 0.12124086916446686, 0.1114228144288063]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>huggingface中对于一种预训练任务有多种模型，模型大小也在一定程度上决定了模型的性能。</p><h3 id="1-3-Tokenizer的使用"><a href="#1-3-Tokenizer的使用" class="headerlink" title="1.3 Tokenizer的使用"></a>1.3 Tokenizer的使用</h3><p>Tokenizer实际上是单词token和序号之间的映射字典。</p><pre class="line-numbers language-python"><code class="language-python">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'input_ids': [101, 1284, 1132, 1304, 2816, 1106, 1437, 1128, 1103, 25267, 3340, 119, 102],</span><span class="token comment" spellcheck="true"># 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],</span><span class="token comment" spellcheck="true"># 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际使用中会出现一次输入一个batch数据的情况。这时候我们希望batch中句子的长度保持一致（使用padding）；同时希望能尽量少的padding，达到batch中的最大长度以及不超过bert模型所能够支持的最大长度512。</p><pre class="line-numbers language-python"><code class="language-python">pt_batch <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">"We are very happy to show you the Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    max_length<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>    return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> pt_batch<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{key}: {value.numpy().tolist()}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_ids: [[101, 1284, 1132, 1304, 2816, 1106, 1437, 1128, 1103, 25267, 3340, 119, 102], [101, 1284, 2810, 1128, 1274, 112, 189, 4819, 1122, 119, 102, 0, 0]]</span><span class="token comment" spellcheck="true"># token_type_ids: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</span><span class="token comment" spellcheck="true"># attention_mask: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-model的使用"><a href="#1-4-model的使用" class="headerlink" title="1.4 model的使用"></a>1.4 model的使用</h3><p>在对句子进行tokenizer预处理以后，则可以把值传给model了。</p><pre class="line-numbers language-python"><code class="language-python">pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>pt_outputs <span class="token operator">=</span> pt_model<span class="token punctuation">(</span><span class="token operator">**</span>pt_batch<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_outputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SequenceClassifierOutput(loss=None, logits=tensor([[-2.6407, -2.7451, -0.8407,  2.0394,  3.2070],</span><span class="token comment" spellcheck="true">#         [ 0.0064, -0.1258, -0.0503, -0.1655,  0.1329]],</span><span class="token comment" spellcheck="true">#        grad_fn=&lt;AddmmBackward>), hidden_states=None, attentions=None)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意现在还是logits数据，我们需要最后的激活函数，如SoftMax：</p><pre class="line-numbers language-python"><code class="language-python">pt_predictions <span class="token operator">=</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>pt_outputs<span class="token punctuation">.</span>logits<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_predictions<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[0.0022, 0.0019, 0.0131, 0.2332, 0.7496],</span><span class="token comment" spellcheck="true">#         [0.2084, 0.1826, 0.1969, 0.1755, 0.2365]], grad_fn=&lt;SoftmaxBackward>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现0.7496和0.2365即之前score的数值。</p><p>如果在模型输入的同时输入目标标签，输出会包含一个loss值：</p><pre class="line-numbers language-python"><code class="language-python">pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>pt_outputs <span class="token operator">=</span> pt_model<span class="token punctuation">(</span><span class="token operator">**</span>pt_batch<span class="token punctuation">,</span> labels<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_outputs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SequenceClassifierOutput(loss=tensor(0.8650, grad_fn=&lt;NllLossBackward>), logits=tensor([[-2.6407, -2.7451, -0.8407,  2.0394,  3.2070],</span><span class="token comment" spellcheck="true">#         [ 0.0064, -0.1258, -0.0503, -0.1655,  0.1329]],</span><span class="token comment" spellcheck="true">#        grad_fn=&lt;AddmmBackward>), hidden_states=None, attentions=None)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦模型微调好，可以使用一下方式保存模型：</p><pre class="line-numbers language-python"><code class="language-python">tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>save_directory<span class="token punctuation">)</span>model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>save_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-术语"><a href="#2-术语" class="headerlink" title="2. 术语"></a>2. 术语</h2><h3 id="2-1-模型输入"><a href="#2-1-模型输入" class="headerlink" title="2.1 模型输入"></a>2.1 模型输入</h3><p>通常情况下模型只需要ids作为输入参数。ids是token的序号，换句话说是序列的数字表征。每个模型的tokenizer工作不同但是底层的机制是一模一样的，下面是BERT模型的tokenizer，可以用来分词：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertTokenizertokenizer <span class="token operator">=</span> BertTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"../BERT_DIR/bert-base-cased"</span><span class="token punctuation">)</span>sequence <span class="token operator">=</span> <span class="token string">"A Titan RTX has 24GB of VRAM"</span>tokenized_sequence <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokenized_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['A', 'Titan', 'R', '##T', '##X', 'has', '24', '##GB', 'of', 'V', '##RA', '##M']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tokenizer负责将序列划分为词汇表中可用的token。划分为的token要么为单词，要么为子词。比如VRAM将被划分为”V”, “RA”和”M”，但为了区分单词和子词，子词前加了双#前缀。这些token之后会以模型的规则转化为IDs。</p><p>而实际上这两步可以化作一步，直接喂入句子序列完成序列和ids的转化。</p><p><code>inputs = tokenizer(sequence)</code></p><pre class="line-numbers language-python"><code class="language-python">inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span>encoded_sequence <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [101, 138, 18696, 155, 1942, 3190, 1144, 1572, 13745, 1104, 159, 9664, 2107, 102]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在编码序列中自动加入了special token，如101表示分类器[CLS]，102表示分隔符[SEP]。</p><p>现在对encode序列进行解码：</p><pre class="line-numbers language-python"><code class="language-python">decoded_sequence <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_sequence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoded_sequence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [CLS] A Titan RTX has 24GB of VRAM [SEP]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Attention-mask"><a href="#2-2-Attention-mask" class="headerlink" title="2.2 Attention mask"></a>2.2 Attention mask</h3><p>注意力掩码是在序列进行批处理时的一个可选参数。该参数表明了模型中哪些参数将会参与运算。现在考虑一下两个序列：</p><pre class="line-numbers language-python"><code class="language-python">sequence_a <span class="token operator">=</span> <span class="token string">"This is a short sequence."</span>sequence_b <span class="token operator">=</span> <span class="token string">"This is a rather long sequence. It is at least longer than the sequence A."</span>encoded_sequence_a <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span>encoded_sequence_b <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>encoded_sequence_a<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>encoded_sequence_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8 19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现两个序列的长度不一致，因此它们并不能放在同一个tensor当中。第一个序列需要扩充到与第二和序列长度为止，或者反过来对第二个序列进行截取。</p><p>在tokenizer中设置padding为True即可对序列进行填充：</p><pre class="line-numbers language-python"><code class="language-python">encoded_sequence_padding <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token punctuation">[</span>sequence_a<span class="token punctuation">,</span> sequence_b<span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_sequence_padding<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> encoded_sequence_padding<span class="token punctuation">[</span><span class="token string">"attention_mask"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[101, 1188, 1110, 170, 1603, 4954, 119, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], </span><span class="token comment" spellcheck="true"># [101, 1188, 1110, 170, 1897, 1263, 4954, 119, 1135, 1110, 1120, 1655, 2039, 1190, 1103, 4954, 138, 119, 102]]</span><span class="token comment" spellcheck="true"># [[1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], </span><span class="token comment" spellcheck="true"># [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Token-Type-IDs"><a href="#2-3-Token-Type-IDs" class="headerlink" title="2.3 Token Type IDs"></a>2.3 Token Type IDs</h3><p>有些模型会在一对句子上做分类任务，或者做问答任务时把文本和问题拼凑在一起。这时需要两个序列都会加入一个“input_ids”当中，而此时需要special token，CLS和SEP对句子进行划分。把两个序列作两个参数喂入tokenizer中（而不是list的方式）如下：</p><pre class="line-numbers language-python"><code class="language-python">sequence_a <span class="token operator">=</span> <span class="token string">"HuggingFace is based in NYC"</span>sequence_b <span class="token operator">=</span> <span class="token string">"Where is HuggingFace based?"</span>encoded_dict <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sequence_a<span class="token punctuation">,</span> sequence_b<span class="token punctuation">)</span>decoded <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">"input_ids"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [CLS] HuggingFace is based in NYC [SEP] Where is HuggingFace based? [SEP]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样模型便知道序列的开始和结束位置。然而，有些模型（如bert）依然会使用token_type_ids来对两个不同的序列进行mask。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;huggingface的Transformer学习笔记&quot;&gt;&lt;a href=&quot;#huggingface的Transformer学习笔记&quot; class=&quot;headerlink&quot; title=&quot;huggingface的Transformer学习笔记&quot;&gt;&lt;/a&gt;huggi</summary>
      
    
    
    
    <category term="算法" scheme="http://techaoba.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="学习笔记" scheme="http://techaoba.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="huggingface" scheme="http://techaoba.github.io/tags/huggingface/"/>
    
    <category term="Transformer" scheme="http://techaoba.github.io/tags/Transformer/"/>
    
    <category term="算法API" scheme="http://techaoba.github.io/tags/%E7%AE%97%E6%B3%95API/"/>
    
  </entry>
  
  <entry>
    <title>搭建实验室远程机器学习环境</title>
    <link href="http://techaoba.github.io/2021/08/24/da-jian-shi-yan-shi-yuan-cheng-ji-qi-xue-xi-huan-jing/"/>
    <id>http://techaoba.github.io/2021/08/24/da-jian-shi-yan-shi-yuan-cheng-ji-qi-xue-xi-huan-jing/</id>
    <published>2021-08-24T05:23:45.000Z</published>
    <updated>2021-08-29T09:20:46.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建实验室远程机器学习环境"><a href="#搭建实验室远程机器学习环境" class="headerlink" title="搭建实验室远程机器学习环境"></a>搭建实验室远程机器学习环境</h1><h2 id="1-使用VPN加入实验室局域网"><a href="#1-使用VPN加入实验室局域网" class="headerlink" title="1. 使用VPN加入实验室局域网"></a>1. 使用VPN加入实验室局域网</h2><p>如果本身连接的网络就是学校的网络，可以省略这一步。</p><h2 id="2-使用FTP和SHELL工具"><a href="#2-使用FTP和SHELL工具" class="headerlink" title="2. 使用FTP和SHELL工具"></a>2. 使用FTP和SHELL工具</h2><h3 id="2-1-下载链接"><a href="#2-1-下载链接" class="headerlink" title="2.1 下载链接"></a>2.1 下载链接</h3><p>如果是windows用户可以使用官方免费的XFTP和XSHELL工具。</p><p><a href="https://www.netsarang.com/zh/free-for-home-school/">XTFP免费下载链接</a></p><p><a href="https://imgtu.com/i/hF6Ywj"><img src="https://z3.ax1x.com/2021/08/24/hF6Ywj.jpg" alt="远程工具"></a></p><p>填写姓名和邮箱选择两者，点击下载就会收到工具下载链接的邮件。</p><h3 id="2-2-XFTP使用方法"><a href="#2-2-XFTP使用方法" class="headerlink" title="2.2 XFTP使用方法"></a>2.2 XFTP使用方法</h3><p><a href="https://imgtu.com/i/hFRT2t"><img src="https://z3.ax1x.com/2021/08/24/hFRT2t.png" alt="XFTP链接配置"></a></p><p><strong>FTP工具主要用于FTP文件传输协议的工作，操作方便快捷，可以使用节点的文件拖拉即可实现文件在本地和远程服务器之间的上传下载。</strong></p><p><a href="https://imgtu.com/i/hFWLS1"><img src="https://z3.ax1x.com/2021/08/24/hFWLS1.png" alt="XFTP界面"></a></p><h3 id="2-3-XSHELL使用方法"><a href="#2-3-XSHELL使用方法" class="headerlink" title="2.3 XSHELL使用方法"></a>2.3 XSHELL使用方法</h3><p><a href="https://imgtu.com/i/hFoOld"><img src="https://z3.ax1x.com/2021/08/24/hFoOld.png" alt="XSHELL终端界面"></a></p><p>XSHELL就是一个远程终端，在自己电脑终端上也可以执行 <code>ssh username@ip</code> 完成远程终端操作。而是用XSHELL相对来说更好管理ssh资源。</p><h2 id="3-Anaconda环境的配置"><a href="#3-Anaconda环境的配置" class="headerlink" title="3. Anaconda环境的配置"></a>3. Anaconda环境的配置</h2><p>安装好XSHELL工具后连接自己的账号。</p><p>在<a href="https://www.anaconda.com/products/individual#Downloads">Anaconda官网下载</a>相应的安装包，下载适合服务器的版本，如Linux x86，在自己环境中Anaconda。</p><p>Anaconda环境的搭建：</p><ul><li>conda create -n myCondaEnv python=x.x         # 创建conda环境</li><li>conda info -e     # 查看所有conda环境</li><li>conda activate condaEnv      # 切换conda环境</li><li>conda list     # 查看conda环境中安转的包信息</li><li>conda install xxx=3.1.x || pip install  xxx==3.1.x      # 安装工具包以及对应版本</li><li>conda deactivate    # 退出conda环境</li><li>conda remove -n condaEnv –all      # 删除conda环境</li></ul><h2 id="4-PyCharm远程环境的搭建"><a href="#4-PyCharm远程环境的搭建" class="headerlink" title="4. PyCharm远程环境的搭建"></a>4. PyCharm远程环境的搭建</h2><p>诸如PyCharm，Idea，Clion的JetBrain全家桶都可以使用学生邮箱申请免费使用的，一次申请就是一年，因为可以免费使用直接就下载<strong>Ultimate</strong>或者<strong>Professional</strong>版本。</p><h3 id="4-1-配置PyCharm工程路径"><a href="#4-1-配置PyCharm工程路径" class="headerlink" title="4.1 配置PyCharm工程路径"></a>4.1 配置PyCharm工程路径</h3><p>选择Tools -&gt; Deployment -&gt; Configuration</p><p><a href="https://imgtu.com/i/hnb3Ue"><img src="https://z3.ax1x.com/2021/08/26/hnb3Ue.jpg" alt="路径配置1"></a></p><p>Connection连接配置</p><p><a href="https://imgtu.com/i/hnLr1s"><img src="https://z3.ax1x.com/2021/08/26/hnLr1s.jpg" alt="路径配置2"></a></p><p>Mappings映射配置</p><p><a href="https://imgtu.com/i/hnORKI"><img src="https://z3.ax1x.com/2021/08/26/hnORKI.jpg" alt="路径配置3"></a></p><h3 id="4-2-配置Python解析器"><a href="#4-2-配置Python解析器" class="headerlink" title="4.2 配置Python解析器"></a>4.2 配置Python解析器</h3><p>在File-&gt;Setting中找到Python Interpreter.</p><p><a href="https://imgtu.com/i/hnXhl9"><img src="https://z3.ax1x.com/2021/08/26/hnXhl9.jpg" alt="Python解析器"></a></p><p>SSH Interpreter 配置</p><p><a href="https://imgtu.com/i/hnv5a6"><img src="https://z3.ax1x.com/2021/08/26/hnv5a6.jpg" alt="SSH Interpreter配置1"></a></p><p><a href="https://imgtu.com/i/hnxhlQ"><img src="https://z3.ax1x.com/2021/08/26/hnxhlQ.jpg" alt="SSH Interpreter配置2"></a></p><p>配置完后，本地添加的代码会自动同步到服务器上，可以直接在服务器上执行项目代码啦～～</p><h2 id="5-PyCharm远程debug"><a href="#5-PyCharm远程debug" class="headerlink" title="5. PyCharm远程debug"></a>5. PyCharm远程debug</h2><p>在Pycharm中配置run的参数。选择Run-&gt;Edit Configuration</p><p><a href="https://imgtu.com/i/hG1uRA"><img src="https://z3.ax1x.com/2021/08/29/hG1uRA.jpg" alt="配置run参数1"></a></p><p><a href="https://imgtu.com/i/hG3r6I"><img src="https://z3.ax1x.com/2021/08/29/hG3r6I.jpg" alt="配置run参数2"></a></p><p>在程序中打断电，debug。查看各参数的状态值。</p><p><a href="https://imgtu.com/i/hG3Wtg"><img src="https://z3.ax1x.com/2021/08/29/hG3Wtg.jpg" alt="debug"></a></p><h2 id="6-tmux的使用"><a href="#6-tmux的使用" class="headerlink" title="6. tmux的使用"></a>6. tmux的使用</h2><p>打开一个远程窗口跑模型。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p><p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。<strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p><p>使用命令：</p><p><code>tmux</code>  # 新建tmux会话（编号）</p><p><code>tmux new -s &lt;session-name&gt;</code>   # 新建会话并起名字（推荐）</p><p><code>tmux ls</code>    # 查看当前所有的 tmux 会话</p><p><code>tmux attach -t 0</code>   #   使用会话编号连入会话</p><p><code>tmux attach -t &lt;session-name&gt;</code>  # 使用会话名称连入会话</p><p><code>tmux kill-session -t 0</code>   # 使用会话编号杀死会话</p><p><code>tmux kill-session -t &lt;session-name&gt;</code>   # 使用会话名称杀死会话</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建实验室远程机器学习环境&quot;&gt;&lt;a href=&quot;#搭建实验室远程机器学习环境&quot; class=&quot;headerlink&quot; title=&quot;搭建实验室远程机器学习环境&quot;&gt;&lt;/a&gt;搭建实验室远程机器学习环境&lt;/h1&gt;&lt;h2 id=&quot;1-使用VPN加入实验室局域网&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="服务器环境" scheme="http://techaoba.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="服务器环境" scheme="http://techaoba.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/"/>
    
    <category term="机器学习环境" scheme="http://techaoba.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>pytorch学习</title>
    <link href="http://techaoba.github.io/2021/08/20/pytorch-xue-xi/"/>
    <id>http://techaoba.github.io/2021/08/20/pytorch-xue-xi/</id>
    <published>2021-08-20T08:56:44.000Z</published>
    <updated>2022-03-02T06:56:47.642Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mofanpy.com/tutorials/machine-learning/torch/">莫烦教程原文链接</a></p><h1 id="Numpy-amp-Torch"><a href="#Numpy-amp-Torch" class="headerlink" title="Numpy &amp; Torch"></a>Numpy &amp; Torch</h1><p>Torch可以将tensor放在GPU中加速运算，就像Numpy会把array放在CPU中加速运算。不过两者之间可以很好的兼容，以下上二者之间的转化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp_data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>torch_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np_data<span class="token punctuation">)</span>tensor2array <span class="token operator">=</span> torch_data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nnumpy array:'</span><span class="token punctuation">,</span> np_data<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># numpy array: [[0 1 2] \n [3 4 5]]</span>    <span class="token string">'\ntorch tensor:'</span><span class="token punctuation">,</span> torch_data<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># torch tensor: tensor([[0, 1, 2], [3, 4, 5]])</span>    <span class="token string">'\ntensor to array:'</span><span class="token punctuation">,</span> tensor2array<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># tensor to array: [[0 1 2] \n [3 4 5]]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而其实两者中的很多运算操作都如出一辙：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># abs 绝对值计算</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换成32位浮点 tensor</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nabs'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># [1 2 1 2]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># tensor([1., 2., 1., 2.])</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sin   三角函数 sin</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nsin'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># [-0.84147098 -0.90929743  0.84147098  0.90929743]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># tensor([-0.8415, -0.9093,  0.8415,  0.9093])</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># mean  均值</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nmean'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 0.0</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># tensor(0.)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵乘法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># matrix multiplication 矩阵点乘</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换成32位浮点 tensor</span><span class="token comment" spellcheck="true"># correct method</span><span class="token keyword">print</span><span class="token punctuation">(</span>    <span class="token string">'\nmatrix multiplication (matmul)'</span><span class="token punctuation">,</span>    <span class="token string">'\nnumpy: '</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># [[7, 10], [15, 22]]</span>    <span class="token string">'\ntorch: '</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># torch:  tensor([[ 7., 10.], [15., 22.]])</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h1><p><code>from torch.autograd import Variable</code></p><p>Variable是一个可以参与模型计算反向传递过程的参数类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable     <span class="token comment" spellcheck="true"># torch 中 Variable模块</span>tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把tensor张量放入Variable参与梯度计算,requires_grad是参不参与误差反向传播, 要不要计算梯度</span>variable <span class="token operator">=</span> Variable<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]], requires_grad=True)</span>t_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tensor <span class="token operator">*</span> tensor<span class="token punctuation">)</span>v_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>variable <span class="token operator">*</span> variable<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t_out<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># tensor(7.5000)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v_out<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># tensor(7.5000, grad_fn=&lt;MeanBackward0>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到目前为止, 我们看不出什么不同, <strong>但是时刻记住, Variable 计算时, 它在背景幕布后面一步步默默地搭建着一个庞大的系统, 叫做计算图, computational graph. 这个图是用来干嘛的? 原来是将所有的计算步骤 (节点) 都连接起来, 最后进行误差反向传递的时候, 一次性将所有 variable 里面的修改幅度 (梯度) 都计算出来, 而 tensor 就没有这个能力啦.</strong></p><p><code>v_out = torch.mean(variable*variable)</code> 就是在计算图中添加的一个计算步骤, 计算误差反向传递的时候有他一份功劳, 我们就来举个例子:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># v_out = 1/4 * sum(variable*variable) 这是计算图中的 v_out 计算步骤</span><span class="token comment" spellcheck="true"># 针对于 v_out 的梯度就是, d(v_out)/d(variable) = 1/4*2*variable = variable/2</span>v_out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[0.5000, 1.0000],</span><span class="token comment" spellcheck="true">#         [1.5000, 2.0000]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取 Variable 里面的数据</strong></p><p>直接<code>print(variable)</code>只会输出 Variable 形式的数据, 在很多时候是用不了的(比如想要用 plt 画图), 所以我们要转换一下, 将它变成 tensor 形式.</p><p>variable -&gt; Variable形式</p><p>variable.data -&gt; tensor形式</p><p>variable.data.numpy() -&gt; numpy形式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Variable形式</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]], requires_grad=True)</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tensor 形式</span><span class="token comment" spellcheck="true"># tensor([[1., 2.],</span><span class="token comment" spellcheck="true">#         [3., 4.]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># numpy 形式</span><span class="token comment" spellcheck="true"># [[1. 2.]</span><span class="token comment" spellcheck="true">#  [3. 4.]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Torch的激活函数"><a href="#Torch的激活函数" class="headerlink" title="Torch的激活函数"></a>Torch的激活函数</h1><p>relu, sigmoid, tanh, softplus</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F     <span class="token comment" spellcheck="true"># 激活函数都在这</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>x <span class="token operator">=</span> Variable<span class="token punctuation">(</span>x<span class="token punctuation">)</span>x_np <span class="token operator">=</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 换成 numpy array，出图时使用</span><span class="token comment" spellcheck="true"># 激活函数</span>y_relu <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_sigmoid <span class="token operator">=</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_tanh <span class="token operator">=</span> F<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>y_softplus <span class="token operator">=</span> F<span class="token punctuation">.</span>softplus<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_relu<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_sigmoid<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_tanh<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'tanh'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_np<span class="token punctuation">,</span> y_softplus<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'softplus'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fXvxsK"><img src="https://z3.ax1x.com/2021/08/20/fXvxsK.jpg" alt="激活函数"></a></p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F     <span class="token comment" spellcheck="true"># 激励函数都在这</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x data (tensor), shape = (100, 1)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画图</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy())</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 继承torch的Module</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 继承 __init__ 功能</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 隐藏层线性输出</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出层线性输出</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span>n_feature<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_hidden<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> n_output<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(net)</span><span class="token triple-quoted-string string">"""Net(  (hidden): Linear(in_features=1, out_features=10, bias=True)  (predict): Linear(in_features=10, out_features=1, bias=True))"""</span><span class="token comment" spellcheck="true"># optimizer 是训练工具</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># SGD随机梯度下降</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># 预测值和真实值的误差计算公式（均方差）</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 画图</span>net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prediction <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 预测值</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>y<span class="token punctuation">,</span> prediction<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 误差</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 清空上一步的残余更新参数值</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 误差反向传播，计算参数更新值</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 将参数更新值施加到net的parameters上</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">2000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},loss:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># plot and show learning process</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Loss=%.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fvY9Vx"><img src="https://z3.ax1x.com/2021/08/21/fvY9Vx.jpg" alt="回归例子"></a></p><h1 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 假数据</span>n_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 100个数据，每个数据两个坐标</span>x0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 类型0 x data（tensor），shape=（100, 2）。正态分布，标准差std=1</span>y0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 类型0 y data（tensor），shape=（100,）</span>x1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 类型1 x data（tensor），shape=（100, 2）。正态分布，标准差std=1</span>y1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 类型1 y data（tensor），shape=（100,）</span><span class="token comment" spellcheck="true"># 注意x, y数据形式一定要像下面一样  torch.cat((a, b), dim) 按照dim维度把a和b拼接起来</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># FloatTensor = 32-bit floating</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># LongTensor = 64-bit integer</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy())</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=y.data.numpy(), s=100, lw=0, cmap='RdYlGn')</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span> n_hidden<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_hidden<span class="token punctuation">,</span> n_output<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment" spellcheck="true"># 输入（x，y），输出[0, 1]表示标签1，输出[1, 0]表示标签0，即二分类</span>net <span class="token operator">=</span> Net<span class="token punctuation">(</span>n_feature<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_hidden<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> n_output<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 交互模式</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>out<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        pred_y <span class="token operator">=</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        target_y <span class="token operator">=</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>pred_y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdYlGn'</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> target_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true"># 预测中有多少和真实值一样</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Accuracy=%.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 停止画图</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220225194859916.png" alt="image-20220225194859916"></p><h1 id="使用nn-Sequential快速搭建神经网络"><a href="#使用nn-Sequential快速搭建神经网络" class="headerlink" title="使用nn.Sequential快速搭建神经网络"></a>使用nn.Sequential快速搭建神经网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltn_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>x0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> n_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">)</span>net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>out<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        pred_y <span class="token operator">=</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        target_y <span class="token operator">=</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>pred_y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdYlGn'</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> target_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true"># 预测中有多少和真实值一样</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Accuracy=%.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 停止画图</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="保存和提取网络"><a href="#保存和提取网络" class="headerlink" title="保存和提取网络"></a>保存和提取网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># fake data</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># x data(tensor), shape=(100, 1)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># noisy y data(tensor), shape=(100, 1)</span><span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># save net1</span>    net1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prediction <span class="token operator">=</span> net1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>y<span class="token punctuation">,</span> prediction<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot result</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2 ways to save the net</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> <span class="token string">'net.pkl'</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># save the entire net</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'net_params.pkl'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># save only the parameters</span><span class="token keyword">def</span> <span class="token function">restore_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'net.pkl'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot net2 result</span>    prediction <span class="token operator">=</span> net2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">restore_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net3 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    net3<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'net_params.pkl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plot net3 result</span>    prediction <span class="token operator">=</span> net3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Net1'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save net1 net2_params</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># restore entire net(may slow)</span>restore_net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># restore only the net parameters</span>restore_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220225194951449.png" alt="image-20220225194951449"></p><h1 id="批训练"><a href="#批训练" class="headerlink" title="批训练"></a>批训练</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> DataBATCH_SIZE <span class="token operator">=</span> <span class="token number">5</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 1 2 3 4...</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 10 9 8 7...</span>torch_dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    dataset<span class="token operator">=</span>torch_dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>batch_x<span class="token punctuation">,</span> batch_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># train your data...</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| Step: '</span><span class="token punctuation">,</span> step<span class="token punctuation">,</span> <span class="token string">'| batch x: '</span><span class="token punctuation">,</span>                  batch_x<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'| batch y: '</span><span class="token punctuation">,</span> batch_y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    show_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""Epoch:  0 | Step:  0 | batch x:  [ 6. 10.  5.  8.  3.] | batch y:  [5. 1. 6. 3. 8.]Epoch:  0 | Step:  1 | batch x:  [1. 4. 7. 9. 2.] | batch y:  [10.  7.  4.  2.  9.]Epoch:  1 | Step:  0 | batch x:  [2. 8. 4. 9. 3.] | batch y:  [9. 3. 7. 2. 8.]Epoch:  1 | Step:  1 | batch x:  [ 5. 10.  1.  7.  6.] | batch y:  [ 6.  1. 10.  4.  5.]Epoch:  2 | Step:  0 | batch x:  [10.  5.  4.  1.  3.] | batch y:  [ 1.  6.  7. 10.  8.]Epoch:  2 | Step:  1 | batch x:  [9. 6. 8. 7. 2.] | batch y:  [2. 5. 3. 4. 9.]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Optimizer优化器"><a href="#Optimizer优化器" class="headerlink" title="Optimizer优化器"></a>Optimizer优化器</h1><p>可视化’SGD’, ‘Momentum’, ‘RMSProp’, ‘Adam’四种优化器随步数的优化效果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># hyper parameters</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>EPOCH <span class="token operator">=</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># fake dataset</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># torch.Size([1000, 1])</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot dataset</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># DataLoader</span>torch_dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    dataset<span class="token operator">=</span>torch_dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>net_SGD         <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_Momentum    <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_RMSprop     <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>net_Adam        <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>nets <span class="token operator">=</span> <span class="token punctuation">[</span>net_SGD<span class="token punctuation">,</span> net_Momentum<span class="token punctuation">,</span> net_RMSprop<span class="token punctuation">,</span> net_Adam<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># different optimizers</span>opt_SGD         <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net_SGD<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>opt_Momentum    <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net_Momentum<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>opt_RMSprop     <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>net_RMSprop<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>opt_Adam         <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_Adam<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizers <span class="token operator">=</span> <span class="token punctuation">[</span>opt_SGD<span class="token punctuation">,</span> opt_Momentum<span class="token punctuation">,</span> opt_RMSprop<span class="token punctuation">,</span> opt_Adam<span class="token punctuation">]</span>loss_func <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>losses_his <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 记录training时不同神经网络的loss</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 对每个优化器，优化属于它的神经网络</span>        <span class="token keyword">for</span> net<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> l_his <span class="token keyword">in</span> zip<span class="token punctuation">(</span>nets<span class="token punctuation">,</span> optimizers<span class="token punctuation">,</span> losses_his<span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> net<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># get output for every net</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># compute loss for every net</span>            opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># clear gradients for next train</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># backpropagation, compute gradients</span>            opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># apply gradients</span>            l_his<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SGD'</span><span class="token punctuation">,</span> <span class="token string">'Momentum'</span><span class="token punctuation">,</span> <span class="token string">'RMSProp'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> l_his <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>losses_his<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>l_his<span class="token punctuation">,</span> label<span class="token operator">=</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Steps'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220226134502901.png" alt="image-20220226134502901"></p><h1 id="CNN网络"><a href="#CNN网络" class="headerlink" title="CNN网络"></a>CNN网络</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torchvision          <span class="token comment" spellcheck="true"># 数据库模块</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># reproducible</span><span class="token comment" spellcheck="true"># Hyper Parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">5</span>                   <span class="token comment" spellcheck="true"># 训练整批数据多少次</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">50</span>LR <span class="token operator">=</span> <span class="token number">0.001</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>       <span class="token comment" spellcheck="true"># 如果已经下载了mnist就改为False</span>MNIST_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span><span class="token comment" spellcheck="true"># Mnist 手写数字 训练数据</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 保存或者提取的路径</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># this is training data</span>    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 把PIL.Image or numpy.ndarray转换成</span>                                                    <span class="token comment" spellcheck="true"># torch.FloatTensor(C x H x W),训练的时候normalize成[0, 1]区间</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 没下载就下载，下载了就不用再下载了</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot one example</span><span class="token comment" spellcheck="true"># print(train_data.data.size())           # torch.Size([60000, 28, 28])</span><span class="token comment" spellcheck="true"># print(train_data.targets.size())        # torch.Size([60000])</span><span class="token comment" spellcheck="true"># plt.imshow(train_data.data[0].numpy(), cmap='gray')</span><span class="token comment" spellcheck="true"># plt.title('%i' % train_data.targets[0])</span><span class="token comment" spellcheck="true"># plt.show()</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>     <span class="token comment" spellcheck="true"># input shape(1, 28, 28)</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>                in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># input height(图片的厚度，RGB为3，此处为灰度)</span>                out_channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 使用卷积核的数量，16表示用16个卷积核分别对图片进行卷积，输出16通道的数据</span>                kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># 卷积核的尺寸为5x5，结合out_channels可知filter维数是5x5x16</span>                stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true"># 每次卷级跳动的步长</span>                padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true"># 边缘填充的像素个数，当stride=1时，想要con2d出来的图片长宽没有变化</span>                                            <span class="token comment" spellcheck="true"># ，padding=(kernel_size - 1) / 2</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token comment" spellcheck="true"># -> (16, 28, 28)</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token comment" spellcheck="true"># activation</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 在 2x2空间里向下采样  ->(16, 14, 14)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>         <span class="token comment" spellcheck="true"># input shape(16, 14, 14)</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># output shape(32, 14, 14)</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true"># output shape(32, 7, 7)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># -> (batch, 32, 7, 7)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># -> (batch, 32 * 7 * 7)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> outputcnn <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>cnn<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cnn<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""CNN(  (conv1): Sequential(    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))    (1): ReLU()    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)  )  (conv2): Sequential(    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))    (1): ReLU()    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)  )  (out): Linear(in_features=1568, out_features=10, bias=True))"""</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0, 1)</span>    test_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>test_data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">.</span>    test_y <span class="token operator">=</span> test_data<span class="token punctuation">.</span>targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span>    test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>cnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># training and testing</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x<span class="token punctuation">,</span> b_y <span class="token operator">=</span> b_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> b_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># cnn output</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># cross entropy loss</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                test_output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>                pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>                accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> test_y<span class="token punctuation">)</span> <span class="token operator">/</span> test_y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'| test accuracy: %.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print 10 predictions from test data</span>    test_output <span class="token operator">=</span> cnn<span class="token punctuation">(</span>test_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pred_y<span class="token punctuation">,</span> <span class="token string">'prediction number'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'real number'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220226155530433.png" alt="image-20220226155530433"></p><h1 id="RNN网络"><a href="#RNN网络" class="headerlink" title="RNN网络"></a>RNN网络</h1><h2 id="RNN做分类问题"><a href="#RNN做分类问题" class="headerlink" title="RNN做分类问题"></a>RNN做分类问题</h2><p>torch.nn.LSTM()中的参数：</p><ul><li>input_size: 输入数据的特征维数，通常是embedding_dim(词向量维度)</li><li>hidden_size：LSTM中隐层的维度</li><li>num_layers：循环神经网络的层数</li><li>batch_first：一定设置为True，保证输入数据shape=(batch_size, seq_length, embedding_dim)不会出错。否则需要将batch_size和seq_length这两个维度进行调换</li><li>bidirectional：默认是False，代表不用双向LSTM</li></ul><p>输入数据包括：</p><ul><li>input就是shape=(seq_length, batch_size, input_size)的张量</li><li>h_0是shape=(num_layers*num_directions,batch_size,hidden_size)的张量，它包含了在当前这个batch_size中每个句子的初始隐藏状态。其中num_layers就是LSTM的层数。如果bidirectional=True,num_directions=2,否则就是１，表示只有一个方向。</li><li>c_0和h_0的形状相同，它包含的是在当前这个batch_size中的每个句子的初始细胞状态。h_0,c_0如果不提供，那么默认是0。</li></ul><p>输出数据包括：</p><ul><li>output的shape=(seq_length,batch_size,num_directions*hidden_size),<br>它包含的是LSTM的最后一时间步的输出特征(h_t),ｔ是batch_size中每个句子的长度。</li><li>h_n.shape==(num_directions * num_layers,batch,hidden_size)</li><li>c_n.shape==h_n.shape</li><li>h_n包含的是句子的最后一个单词（也就是最后一个时间步）的隐藏状态，c_n包含的是句子的最后一个单词的细胞状态，所以它们都与句子的长度seq_length无关</li><li>output[-1]与h_n是相等的，因为output[-1]包含的正是batch_size个句子中每一个句子的最后一个单词的隐藏状态，注意LSTM中的隐藏状态其实就是输出，cell state细胞状态才是LSTM中一直隐藏的，记录着信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> dsets<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Datatorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># reproducible</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda:0'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hyper parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">5</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">64</span>TIME_STEP <span class="token operator">=</span> <span class="token number">28</span>                  <span class="token comment" spellcheck="true"># rnn 时间步数 / 图片高度         (height)</span>INPUT_SIZE <span class="token operator">=</span> <span class="token number">28</span>                 <span class="token comment" spellcheck="true"># rnn 每步输入值 / 图片每行像素    (width)</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>          <span class="token comment" spellcheck="true"># 如果已经下载mnist设置为False</span>DOWNLOAD_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span><span class="token comment" spellcheck="true"># Mnist 手写数字</span>train_data <span class="token operator">=</span> dsets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>DOWNLOAD_DIR<span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true"># This is training data</span>    transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 把PIL.Image or numpy.ndarray转换成</span>                                        <span class="token comment" spellcheck="true"># torch.FloatTensor(C x H x W),训练的时候normalize成[0, 1]区间</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> dsets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span>DOWNLOAD_DIR<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>            input_size<span class="token operator">=</span>INPUT_SIZE<span class="token punctuation">,</span>            hidden_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># rnn hidden unit</span>            num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># number of rnn layer</span>            batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># input &amp; output will has batch size as first dimension. </span>                                    <span class="token comment" spellcheck="true"># e.g. (batch, time_step, input_size()</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x shape (batch, time_step, input_size)</span>        <span class="token comment" spellcheck="true"># r_out shape (batch, time_step, output_size)</span>        <span class="token comment" spellcheck="true"># h_c shape (n_layers, batch, hidden_size)</span>        r_out<span class="token punctuation">,</span> <span class="token punctuation">(</span>h_n<span class="token punctuation">,</span> h_c<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># choose r_out at the last time step</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>r_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># (batch, time step, input)</span>        <span class="token keyword">return</span> outrnn <span class="token operator">=</span> RNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">)</span>rnn<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""RNN(  (rnn): LSTM(28, 64, batch_first=True)  (out): Linear(in_features=64, out_features=10, bias=True))"""</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    test_x <span class="token operator">=</span> test_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>       <span class="token comment" spellcheck="true"># shape(2000, 28, 28) value in rag=nge(0, 1)</span>    test_y <span class="token operator">=</span> test_data<span class="token punctuation">.</span>targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span>    test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># training ans testing</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>b_x<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x <span class="token operator">=</span> b_x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># reshape x to (batch, time_step, input_size)</span>            b_y <span class="token operator">=</span> b_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>output<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                test_output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>                pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>                accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>pred_y <span class="token operator">==</span> test_y<span class="token punctuation">)</span> <span class="token operator">/</span> test_y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token string">'| test accuracy: %.2f'</span> <span class="token operator">%</span> accuracy<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print 10 predictions from test data</span>        test_output <span class="token operator">=</span> rnn<span class="token punctuation">(</span>test_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pred_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pred_y<span class="token punctuation">,</span> <span class="token string">'prediction number'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>test_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'real number'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""......Epoch:  4 | train loss: 0.0176 | test accuracy: 0.97Epoch:  4 | train loss: 0.0116 | test accuracy: 0.98Epoch:  4 | train loss: 0.0938 | test accuracy: 0.97Epoch:  4 | train loss: 0.0401 | test accuracy: 0.97[7 2 1 0 4 1 4 9 5 9] prediction number[7 2 1 0 4 1 4 9 5 9] real number"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="RNN做回归问题"><a href="#RNN做回归问题" class="headerlink" title="RNN做回归问题"></a>RNN做回归问题</h2><p>任务：希望使用sin蓝色曲线拟合（预测）cos红色曲线。</p><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302104347936.png" alt="image-20220302104347936"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hyper parameters</span>TIME_STEP <span class="token operator">=</span> <span class="token number">14</span>              <span class="token comment" spellcheck="true"># rnn time step / 输入序列的数量</span>INPUT_SIZE <span class="token operator">=</span> <span class="token number">1</span>              <span class="token comment" spellcheck="true"># rnn input size / 输入序列的长度</span>LR <span class="token operator">=</span> <span class="token number">0.02</span>EPOCHS <span class="token operator">=</span> <span class="token number">1000</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># show data</span><span class="token comment" spellcheck="true"># steps = np.linspace(0, 2 * np.pi, 100, dtype=np.float)  # float for converting torch FloatTensor</span><span class="token comment" spellcheck="true"># x_np = np.sin(steps)</span><span class="token comment" spellcheck="true"># y_np = np.cos(steps)</span><span class="token comment" spellcheck="true"># plt.plot(steps, x_np, 'b-', label='input(sin)')</span><span class="token comment" spellcheck="true"># plt.plot(steps, y_np, 'r-', label='target(cos)')</span><span class="token comment" spellcheck="true"># plt.legend(loc='best')</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">RNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>            input_size<span class="token operator">=</span>INPUT_SIZE<span class="token punctuation">,</span>            hidden_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># rnn hidden unit</span>            num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># 有几层RNN layers</span>            batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x -> (batch_size, time_step, input_size)</span>        <span class="token comment" spellcheck="true"># h_state -> (n_layers, batch_size, hidden_size)</span>        <span class="token comment" spellcheck="true"># r_out -> (batch_size, time_step, hidden_size)</span>        r_out<span class="token punctuation">,</span> h_state <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span>        outs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> time_step <span class="token keyword">in</span> range<span class="token punctuation">(</span>r_out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>r_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> time_step<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>outs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h_staternn <span class="token operator">=</span> RNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>h_state <span class="token operator">=</span> None          <span class="token comment" spellcheck="true"># initial h_state as None</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCHS<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">,</span> end <span class="token operator">=</span> epoch <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi       <span class="token comment" spellcheck="true"># time steps</span>    <span class="token comment" spellcheck="true"># use sin predicts cos</span>    steps <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> TIME_STEP<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    x_np <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>    y_np <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x_np<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># shape (batch, time_step, input_size)</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>y_np<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    prediction<span class="token punctuation">,</span> h_state <span class="token operator">=</span> rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h_state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># !! next step is important !!</span>    h_state <span class="token operator">=</span> h_state<span class="token punctuation">.</span>data    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">49</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>steps<span class="token punctuation">,</span> y_np<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>steps<span class="token punctuation">,</span> prediction<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302124812724.png" alt="image-20220302124812724"></p><h1 id="AutoEncoder自编码"><a href="#AutoEncoder自编码" class="headerlink" title="AutoEncoder自编码"></a>AutoEncoder自编码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token keyword">from</span>  matplotlib <span class="token keyword">import</span>  cm<span class="token comment" spellcheck="true"># Hyper Parameters</span>EPOCH <span class="token operator">=</span> <span class="token number">10</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">64</span>LR <span class="token operator">=</span> <span class="token number">0.005</span>DOWNLOAD_MNIST <span class="token operator">=</span> <span class="token boolean">False</span>MNIST_DIR <span class="token operator">=</span> <span class="token string">'./mnist'</span>N_TEST_IMG <span class="token operator">=</span> <span class="token number">5</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span>MNIST_DIR<span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    download<span class="token operator">=</span>DOWNLOAD_MNIST<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # plot one example</span><span class="token comment" spellcheck="true"># print(train_data.data.size())               # (60000, 28, 28)</span><span class="token comment" spellcheck="true"># print(train_data.targets.size())            # (60000)</span><span class="token comment" spellcheck="true"># plt.imshow(train_data.data[2].numpy(), cmap='gray')     # 展示第3个数据</span><span class="token comment" spellcheck="true"># plt.title('%i' % train_data.targets[2])</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token keyword">class</span> <span class="token class-name">AutoEncoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AutoEncoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>encode <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># compress to 3 features which can be visualized in plt</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true"># compress to a range (0, 1)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        encoded <span class="token operator">=</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        decoded <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>encoded<span class="token punctuation">)</span>        <span class="token keyword">return</span> encoded<span class="token punctuation">,</span> decodedautoencoder <span class="token operator">=</span> AutoEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># the image batch shape will be (64, 1, 28, 28)</span>    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>autoencoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>    loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># initialize figure</span>    f<span class="token punctuation">,</span> a <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N_TEST_IMG<span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># continuously plot</span>    <span class="token comment" spellcheck="true"># original data (first row) for viewing</span>    view_data <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_data<span class="token punctuation">[</span><span class="token punctuation">:</span>N_TEST_IMG<span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N_TEST_IMG<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>view_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            b_x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># batch x, shape (batch, 28*28)</span>            b_y <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># batch y, shape (batch, 28*28)</span>            encoded<span class="token punctuation">,</span> decoded <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>decoded<span class="token punctuation">,</span> b_y<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch: '</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'| train loss: %.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># plotting decoded image (second row)</span>                _<span class="token punctuation">,</span> decoded_data <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>view_data<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N_TEST_IMG<span class="token punctuation">)</span><span class="token punctuation">:</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>decoded_data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                plt<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>                plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># visualize in 3D plot</span>    view_data <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    encoded_data<span class="token punctuation">,</span> _ <span class="token operator">=</span> autoencoder<span class="token punctuation">(</span>view_data<span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>    X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z <span class="token operator">=</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoded_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    values <span class="token operator">=</span> train_data<span class="token punctuation">.</span>train_labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s <span class="token keyword">in</span> zip<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> cm<span class="token punctuation">.</span>rainbow<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> s <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s<span class="token punctuation">,</span> backgroundcolor<span class="token operator">=</span>c<span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span>X<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span>Y<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_zlim<span class="token punctuation">(</span>Z<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Z<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302133439077.png" alt="image-20220302133439077"></p><h1 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h1><p>目标：希望在训练集（红色）上学习到的模型能够较好的拟合测试数据（蓝色）。</p><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302143159789.png" alt="image-20220302143159789"></p><p>dropout使用方法：在映射层和激活层之间加入<code>nn.dropout(alpha)</code>，alpha为dropout的占比。<font color='red'>注意，Dropout只在训练时使用，预测时需要屏蔽掉Dropout</font>。切换为预测模式<code>net_dropped.eval()</code>，预测模式下Dropout功能会被屏蔽，因此如果后面还需要训练，需要再次切换为训练模式<code>net_dropped.train()</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnN_SAMPLES <span class="token operator">=</span> <span class="token number">20</span>N_HIDDEN <span class="token operator">=</span> <span class="token number">300</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>EPOCH <span class="token operator">=</span> <span class="token number">500</span><span class="token comment" spellcheck="true"># training data</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N_SAMPLES<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># x data (tensor), shape = (100, 1)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0.3</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token operator">=</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># test data</span>test_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N_SAMPLES<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> test_x <span class="token operator">+</span> <span class="token number">0.3</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token operator">=</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>N_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># show data</span><span class="token comment" spellcheck="true"># plt.scatter(x.data.numpy(), y.data.numpy(), c='magenta', s=50, alpha=0.5, label='train')</span><span class="token comment" spellcheck="true"># plt.scatter(test_x.data.numpy(), test_y.data.numpy(), c='cyan', s=50, alpha=0.5, label='test')</span><span class="token comment" spellcheck="true"># plt.legend(loc='upper left')</span><span class="token comment" spellcheck="true"># plt.ylim((-2.5, 2.5))</span><span class="token comment" spellcheck="true"># plt.show()</span>net_overfitting <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>net_dropped <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># drop 50% of the neuron</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># drop 50% of the neuron</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>optimizer_ofit <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_overfitting<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>optimizer_drop <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net_dropped<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>    pred_ofit <span class="token operator">=</span> net_overfitting<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    pred_drop <span class="token operator">=</span> net_dropped<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    loss_ofit <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>pred_ofit<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    loss_drop <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>pred_drop<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    optimizer_drop<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_ofit<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_ofit<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_drop<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_ofit<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer_drop<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># change to eval mode in order to fix drop out effect</span>        net_overfitting<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        net_dropped<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># parameters for dropout differ from train mode</span>        <span class="token comment" spellcheck="true"># plotting</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_pred_ofit <span class="token operator">=</span> net_overfitting<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>        test_pred_drop <span class="token operator">=</span> net_dropped<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'magenta'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'cyan'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_pred_ofit<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'overfitting'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_pred_drop<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b--'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dropout(50%)'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">'overfitting loss=%.4f'</span> <span class="token operator">%</span> loss_func<span class="token punctuation">(</span>test_pred_ofit<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token string">'dropout loss=%.4f'</span> <span class="token operator">%</span> loss_func<span class="token punctuation">(</span>test_pred_drop<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># change back to train mode</span>        net_dropped<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        net_overfitting<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/pytorch%E5%AD%A6%E4%B9%A0/image-20220302145646070.png" alt="image-20220302145646070"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mofanpy.com/tutorials/machine-learning/torch/&quot;&gt;莫烦教程原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Numpy-amp-Torch&quot;&gt;&lt;a href=&quot;#Numpy-amp-Torch&quot; clas</summary>
      
    
    
    
    <category term="机器学习" scheme="http://techaoba.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://techaoba.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="pytorch" scheme="http://techaoba.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>numpy和pandas学习</title>
    <link href="http://techaoba.github.io/2021/08/10/numpy-he-pandas-xue-xi/"/>
    <id>http://techaoba.github.io/2021/08/10/numpy-he-pandas-xue-xi/</id>
    <published>2021-08-10T10:57:08.000Z</published>
    <updated>2021-08-15T05:57:50.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy和Pandas学习"><a href="#Numpy和Pandas学习" class="headerlink" title="Numpy和Pandas学习"></a>Numpy和Pandas学习</h1><p><a href="https://mofanpy.com/tutorials/data-manipulation/np-pd/">莫烦教程原文链接</a></p><h2 id="1-为什么使用Numpy和Pandas"><a href="#1-为什么使用Numpy和Pandas" class="headerlink" title="1. 为什么使用Numpy和Pandas"></a>1. 为什么使用Numpy和Pandas</h2><ul><li>运算速度快：numpy 和 pandas 都是采用 C 语言编写, pandas 又是基于 numpy, 是 numpy 的升级版本。</li><li>消耗资源少：采用的是矩阵运算，会比 python 自带的字典或者列表快好多</li></ul><h2 id="2-Numpy学习"><a href="#2-Numpy学习" class="headerlink" title="2. Numpy学习"></a>2. Numpy学习</h2><h3 id="2-1-Numpy属性"><a href="#2-1-Numpy属性" class="headerlink" title="2.1 Numpy属性"></a>2.1 Numpy属性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparray <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[1 2 3] [2 3 4]] """</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"number of dim:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 维度</span><span class="token comment" spellcheck="true"># number of dim: 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shape:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 行数和列数</span><span class="token comment" spellcheck="true"># shape : (2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>size<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 元素个数</span><span class="token comment" spellcheck="true"># size: 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-numpy创建array"><a href="#2-2-numpy创建array" class="headerlink" title="2.2 numpy创建array"></a>2.2 numpy创建array</h3><ul><li>array：创建数组</li><li>dtype：指定数据类型</li><li>zeros：创建数据全为0</li><li>ones：创建数据全为1</li><li>empty：创建数据接近0</li><li>arrange：按指定范围创建数据</li><li>linspace：创建险段</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dtype指定array数据的类型，有int16 int32 int64 float</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成4行5列全0矩阵</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成3行4列元素全为1的矩阵，并规定数据类型为float32</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据为empty。与zeros不同，empty没有将数组值设置为0，因此可能会稍微快一些。</span><span class="token comment" spellcheck="true"># 另一方面，它要求用户手动设置数组中的所有值，并且应该谨慎使用。</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[ 3.10503618e+231 -1.49166826e-154  2.23606798e+000  4.70372193e+000] [ 2.73861279e+000  2.23606798e+000  4.70372193e+000  2.73861279e+000] [ 2.23606798e+000  6.95337859e-309  4.94065646e-324  4.94065646e-324]]"""</span><span class="token comment" spellcheck="true"># 用arange查u你感觉爱你连续数组(10 - 19的数据，步长为2)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [10 12 14 16 18]</span><span class="token comment" spellcheck="true"># 使用reshape改变数据的形状</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用linspace创建险段数据</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 开始端1，结束端10，且分割成20个数据，生成线段</span><span class="token triple-quoted-string string">"""[ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105  3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632  6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158  9.52631579 10.        ]"""</span><span class="token comment" spellcheck="true"># linspace结合reshape</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[ 1.          1.47368421  1.94736842  2.42105263] [ 2.89473684  3.36842105  3.84210526  4.31578947] [ 4.78947368  5.26315789  5.73684211  6.21052632] [ 6.68421053  7.15789474  7.63157895  8.10526316] [ 8.57894737  9.05263158  9.52631579 10.        ]]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Numpy-基础运算1"><a href="#2-3-Numpy-基础运算1" class="headerlink" title="2.3 Numpy 基础运算1"></a>2.3 Numpy 基础运算1</h3><ul><li>简单一维array上的运算</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># array([10, 20, 30, 40])</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># array([0, 1, 2, 3])</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b   <span class="token comment" spellcheck="true"># [10 21 32 43]</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment" spellcheck="true"># [10 19 28 37]</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b   <span class="token comment" spellcheck="true"># [  0  20  60 120]，对应位置上的元素相乘，并非矩阵乘法</span>c <span class="token operator">=</span> b <span class="token operator">**</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># [0 1 4 9]，平方b ^ 2</span><span class="token comment" spellcheck="true"># 对矩阵中每一项元素进行sin运算</span>c <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span><span class="token comment" spellcheck="true"># 除了函数应用外，在脚本中对print函数进行一些修改可以进行逻辑判断</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ True  True  True False]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多维array上的运算</li></ul><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1 1]</span><span class="token comment" spellcheck="true">#  [0 1]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0 1]</span><span class="token comment" spellcheck="true"># [2 3]]</span>c_dot <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 矩阵相乘</span>c_dot_2 <span class="token operator">=</span> a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 两种方法等价</span><span class="token comment" spellcheck="true"># [[2 4]</span><span class="token comment" spellcheck="true">#  [2 3]]</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0.7949933  0.57852059 0.58766169 0.64314735]</span><span class="token comment" spellcheck="true">#  [0.35365446 0.34662516 0.41735909 0.64740376]]</span>sum_a <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算加和</span>min_a <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算最小值</span>max_a <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算最大值</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_a<span class="token punctuation">,</span> min_a<span class="token punctuation">,</span> max_a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4.369365406391639 0.3466251614035314 0.7949932970007613</span><span class="token comment" spellcheck="true"># 分别计算每一行或者每一列的运算，用到axis=1,0；</span><span class="token comment" spellcheck="true"># 其中0表示按列，1表示按行</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [2.60432293 1.76504248]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0.35365446 0.34662516 0.41735909 0.64314735]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0.7949933  0.64740376]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Numpy-基础运算2"><a href="#2-4-Numpy-基础运算2" class="headerlink" title="2.4 Numpy 基础运算2"></a>2.4 Numpy 基础运算2</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npA <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># array([[ 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">#        [ 6, 7, 8, 9]</span><span class="token comment" spellcheck="true">#        [10,11,12,13]])</span><span class="token comment" spellcheck="true"># 其中的 argmin() 和 argmax() 两个函数分别对应着求矩阵中最小元素和最大元素的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 11</span><span class="token comment" spellcheck="true"># 求平均值 下面四种方法等价：</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy.cumsum()累加函数,得到1*12的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [ 2  5  9 14 20 27 35 44 54 65 77 90]</span><span class="token comment" spellcheck="true"># numpy.diff()累差运算函数，得到3*3的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1 1 1]</span><span class="token comment" spellcheck="true">#  [1 1 1]</span><span class="token comment" spellcheck="true">#  [1 1 1]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找哪些位置上的元素非0，结果显示成行与列，一一对应</span><span class="token comment" spellcheck="true"># (array([0,0,0,0,1,1,1,1,2,2,2,2]),array([0,1,2,3,0,1,2,3,0,1,2,3]))</span><span class="token comment" spellcheck="true"># 矩阵的排序函数 numpy.sort()，默认行排序</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[14 13 12 11]</span><span class="token comment" spellcheck="true">#  [10  9  8  7]</span><span class="token comment" spellcheck="true">#  [ 6  5  4  3]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[11 12 13 14]</span><span class="token comment" spellcheck="true">#  [ 7  8  9 10]</span><span class="token comment" spellcheck="true">#  [ 3  4  5  6]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 列排序</span><span class="token comment" spellcheck="true"># [[ 6  5  4  3]</span><span class="token comment" spellcheck="true">#  [10  9  8  7]</span><span class="token comment" spellcheck="true">#  [14 13 12 11]]</span><span class="token comment" spellcheck="true"># 矩阵的转置有两种表示方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[14 10  6]</span><span class="token comment" spellcheck="true">#  [13  9  5]</span><span class="token comment" spellcheck="true">#  [12  8  4]</span><span class="token comment" spellcheck="true">#  [11  7  3]]</span><span class="token comment" spellcheck="true"># clip(array,a,b)函数,其中规定a&lt;b,使矩阵中&lt;a的元素全部变为a，>b的元素全部变为b</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># array([[ 9, 9, 9, 9]</span><span class="token comment" spellcheck="true">#        [ 9, 9, 8, 7]</span><span class="token comment" spellcheck="true">#        [ 6, 5, 5, 5]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Numpy和Pandas学习&quot;&gt;&lt;a href=&quot;#Numpy和Pandas学习&quot; class=&quot;headerlink&quot; title=&quot;Numpy和Pandas学习&quot;&gt;&lt;/a&gt;Numpy和Pandas学习&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mofan</summary>
      
    
    
    
    <category term="机器学习" scheme="http://techaoba.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://techaoba.github.io/2021/08/08/redis-xue-xi-bi-ji/"/>
    <id>http://techaoba.github.io/2021/08/08/redis-xue-xi-bi-ji/</id>
    <published>2021-08-08T09:30:10.000Z</published>
    <updated>2021-09-10T04:25:05.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习"><a href="#Redis学习" class="headerlink" title="Redis学习"></a>Redis学习</h1><h2 id="1-为什么用Nosql"><a href="#1-为什么用Nosql" class="headerlink" title="1. 为什么用Nosql"></a>1. 为什么用Nosql</h2><p>整个网站的瓶颈是什么？</p><ol><li>数据量如果太大，一个机器放不下</li><li>数据的索引（B+Tree），一个机器内存也放不下</li><li>访问量（读写混合），一个服务器承受不了</li></ol><p>只要开始出现以上的三种情况之一，那么就一定要晋级！</p><ul><li><strong>Memcached（缓存） + MySQL + 垂直拆分（数据库读写分离）</strong></li></ul><p>网站80%的情况都是在读，每次都要去查询数据库的话十分麻烦，所以说我们希望减轻数据的压力，可以使用缓存来保证效率！</p><p>发展过程：优化数据结构和索引–&gt;文件缓存（IO）–&gt;Memcached</p><ul><li><strong>分库分表 + 水平拆分 + MySQL集群</strong></li></ul><p>早些年MyISAM：表锁，十分影响效率，高并发下就会出现严重的锁问题</p><p>转战Innodb：行锁</p><p>慢慢的就开始使用分库分表来解决写的压力！MySQL在那个年代推出了表分区，但是现在并没有多少公司使用。</p><p>MySQL的集群，很好满足那个时代的所有需求！</p><ul><li><strong>如今的年代</strong></li></ul><p><strong>定位数据、音乐数据，热榜数据</strong>等，MySQL这样的关系性数据库就不够用了，数据量很多，变化很快！</p><p>如果使用MySQL存储一些比较大的文件，如博客和图片等等。数据量很大，效率就低了！如果有一种数据库来专门处理这种数据，MySQL的压力就变得十分小（研究如何处理这类问题）。大数据的IO压力下，表几乎没法更大！</p><ul><li>为什么要使用NoSQL</li></ul><p>用户的个人信息，社交网络，地理位置，用户自己产生的数据，用户日志等等爆发式增长！</p><p>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况</p><h2 id="2-什么是NoSQL"><a href="#2-什么是NoSQL" class="headerlink" title="2. 什么是NoSQL"></a>2. 什么是NoSQL</h2><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>泛指非关系性数据库，随着web2.0互联网的诞生！传统的关系性数据库很难应付，尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是当下必须掌握的一个技术！</p><p>如用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展了。Map&lt;String, Object&gt; 来控制的。</p><ul><li>NoSQL特点</li></ul><p>解耦！</p><ol><li>方便扩展（数据之间没有关系，很好扩展）</li><li>大数据量高性能（Redis一秒写8万次，读取11万条数据，NoSQL的缓存记录级是一种细粒度的缓存，性能会比较高！）</li><li>数据类型是多样型的！（不需要事先设计数据库！随取随用，如果是数据库量十分大的表，很多人就无法设计了）</li><li>传统RDBS和NoSQL</li></ol><pre><code>传统的RDBS（关系性数据库）- 结构化组织- SQL语言- 数据和关系都存在单独的表中 row col- 严格的一致性- 基础的事务......</code></pre><pre><code>Nosql- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文档存储，图形数据库（社交关系）- 最终一致性- CAP定理 和 BASE （异地多活）- 高性能，高可用，高可扩展性......</code></pre><ul><li>了解：3V + 3高</li></ul><p>大数据时代的3V：主要是描述问题的</p><ol><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高：主要是对程序的要求</p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS一起使用</p><ul><li>架构师：没有什么是加一层解决不了的！</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1、商品的基本信息</span>    名称、价格、商家信息：    关系性数据库就可以解决了！MySQL / Oracle（淘宝早年就去IOE了！ - 王坚：推荐文章：阿里云的这群疯子）    <span class="token comment" spellcheck="true"># 2、商品的描述、评论（文字比较多）</span>    文档型数据库中，Redis / MongoDB    <span class="token comment" spellcheck="true"># 3、图片</span>    - 分布式文件系统 FastDFS    - 淘宝的                FTPS    - Google            GFS    - Hadoop            HDFS    - 阿里云的         oss    <span class="token comment" spellcheck="true"># 4、商品的关键字（搜索）</span>    - 搜索引擎         solr elasticsearch    - ISearch 了解多隆大佬    <span class="token comment" spellcheck="true"># 5、商品热门的波段信息</span>    - 内存数据库    - Redis    Tair、Memache<span class="token punctuation">..</span>.    <span class="token comment" spellcheck="true"># 6、商品的交易，外部的支付接口</span>    - 三方应用    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大型互联网应用问题：</p><ul><li>数据类型太多了</li><li>数据源繁多，经常重构</li><li>数据大面积改造</li></ul><p>解决办法：</p><p>在应用层和数据层之间加一层统一数据服务平台！</p><h2 id="3-NoSQL的四大分类"><a href="#3-NoSQL的四大分类" class="headerlink" title="3. NoSQL的四大分类"></a>3. NoSQL的四大分类</h2><p><strong>KV键值对</strong></p><ul><li>新浪：Redis</li><li>美团：Redis + Tair</li><li>阿里，百度：Redis + memcache</li></ul><p><strong>文档型数据库（bson格式，和json一样）</strong></p><ul><li>MongoDB（一般必须要掌握）<ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写</li><li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的！</li></ul></li><li>ConthDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><ul><li>Neo4j</li><li>InfoGrid</li></ul><h2 id="4-Redis入门"><a href="#4-Redis入门" class="headerlink" title="4. Redis入门"></a>4. Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>Redis是什么？</strong></p><p>Redis（Remote Dictionary Server），即<strong>远程字典服务</strong>。是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>免费和开源！是当下最热门的NoSQL技术之一！也被人们称之为结构化数据库！</p><p><strong>Redis能干什么？</strong></p><ol><li>内存存储、持久化</li><li>效率高，用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量）</li><li>…….</li></ol><p><strong>特性</strong></p><ol><li>多样化的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ol><p><strong>学习中需要用到的东西</strong></p><ol><li>官网：<a href="https://redis.io/">https://redis.io/</a></li><li>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>下载地址：官网下载即可</li><li>Windows在Github上下载（不建议），Redis推荐在Linux服务器上搭建</li></ol><h2 id="5-Linux安装"><a href="#5-Linux安装" class="headerlink" title="5. Linux安装"></a>5. Linux安装</h2><ol><li>下载安装包：redis-6.2.5.tar.gz</li><li>解压Redis的安装包！程序解压到/opt</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> redis-6.2.5.tar.gz /opt<span class="token function">cd</span> /opt<span class="token function">sudo</span> <span class="token function">tar</span> -zxvf redis-6.2.5.tar.gz<span class="token comment" spellcheck="true"># 在解压后的文件中可以看到redis配置文件redis.conf</span><span class="token function">sudo</span> <span class="token function">install</span> gcc-c++<span class="token function">sudo</span> <span class="token function">make</span><span class="token comment" spellcheck="true"># 第一次make编译需要一段时间，第二次make就快了</span><span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fY3BPP"><img src="https://z3.ax1x.com/2021/08/10/fY3BPP.jpg" alt="make编译成功"></a></p><ol start="3"><li><p><strong>redis的默认安装路径为/usr/local/bin</strong></p></li><li><p><strong>将redis配置文件复制到我们当前目录下(之后就使用这个配置文件进行启动)</strong></p></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> tconfig<span class="token function">sudo</span> <span class="token function">cp</span> /opt/redis-6.2.5/redis.conf tconfig/<span class="token function">cd</span> tconfig/<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>redis默认不是后台启动的，修改配置文件！</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">vim redis.conf<span class="token comment" spellcheck="true"># 把daemonize从no改为yes（以后台方式启动）</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># :wq 保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>启动redis服务</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/bin<span class="token comment" spellcheck="true"># 通过指定的配置文件启动</span>redis-server tconfig/redis.conf<span class="token comment" spellcheck="true"># 使用redis-cli客户端测试连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fYtnts"><img src="https://z3.ax1x.com/2021/08/10/fYtnts.jpg" alt="测试"></a></p><ol start="7"><li><strong>查看redis的进程是否开启</strong></li></ol><p><a href="https://imgtu.com/i/fYNi59"><img src="https://z3.ax1x.com/2021/08/10/fYNi59.jpg" alt="查看redis的进程是否开启"></a></p><ol start="8"><li><strong>关闭Redis服务</strong></li></ol><p>使用shotdown或者kill</p><ol start="9"><li>后面会使用单机多Redis启动集群测试！</li></ol><h2 id="6-redis-benchmark性能测试"><a href="#6-redis-benchmark性能测试" class="headerlink" title="6. redis-benchmark性能测试"></a>6. redis-benchmark性能测试</h2><p>redis-benchmark是官方自带的性能测试工具！</p><p><a href="https://imgtu.com/i/ftPz4A"><img src="https://z3.ax1x.com/2021/08/10/ftPz4A.jpg" alt="性能测试工具可选参数"></a></p><p>简单测试下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span><span class="token function">cd</span> /usr/local/binredis-server tconfig/redis.confredis-cli -p 6379<span class="token function">ping</span><span class="token comment" spellcheck="true"># 测试：100个并发连接  100000个请求</span>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/ftA3b8"><img src="https://z3.ax1x.com/2021/08/10/ftA3b8.jpg" alt="性能测试结果"></a></p><h2 id="7-基础知识"><a href="#7-基础知识" class="headerlink" title="7. 基础知识"></a>7. 基础知识</h2><p>redis默认有16个数据库，默认使用第0个数据库（vim redis.conf）</p><p><a href="https://imgtu.com/i/ftATaD"><img src="https://z3.ax1x.com/2021/08/10/ftATaD.jpg" alt="默认有16个数据库"></a></p><p>可以使用SELECT切换数据库</p><p>DBSIZE查看当前数据库空间</p><pre class="line-numbers language-bash"><code class="language-bash">root@ecnu-lab904-server:/usr/local/bin<span class="token comment" spellcheck="true"># redis-cli -p 6379</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span>PONG127.0.0.1:6379<span class="token operator">></span> SELECT 3OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GET和SET方法</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> SET name techaobaOK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> get name<span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除当前数据库(<strong>flushdb</strong>)，清空全部数据库（<strong>flushall</strong>）</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> flushdbOK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-五大基本类型"><a href="#8-五大基本类型" class="headerlink" title="8. 五大基本类型"></a>8. 五大基本类型</h2><h3 id="8-1-Redis-Key"><a href="#8-1-Redis-Key" class="headerlink" title="8.1 Redis-Key"></a>8.1 Redis-Key</h3><ul><li>EXISTS [key]</li><li>MOVE [key] [db]</li><li>EXPIRE [key] [seconds]</li><li>TTL [key]      # 查看当前key的剩余时间</li><li>KEYS *          # 查看所有的key</li><li>TYPE [key]   # 查看当前key的类型</li><li>SET [key] [value]</li><li>GET [key]</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 判断是否存在</span>127.0.0.1:6379<span class="token operator">></span> EXISTS age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 移动数据到其他数据库</span>127.0.0.1:6379<span class="token operator">></span> MOVE name 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> KEYS *1<span class="token punctuation">)</span> <span class="token string">"age"</span>127.0.0.1:6379<span class="token operator">></span> SELECT 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> GET name<span class="token string">"techaoba"</span><span class="token comment" spellcheck="true"># 设置数据的过期时间（ttl 查看剩余时间，-2表示已过期）</span>127.0.0.1:6379<span class="token operator">></span> EXPIRE name 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> SET name techaobaOK<span class="token comment" spellcheck="true"># 查看数据类型 TYPE</span>127.0.0.1:6379<span class="token operator">></span> TYPE namestring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-String（字符串）"><a href="#8-2-String（字符串）" class="headerlink" title="8.2 String（字符串）"></a>8.2 String（字符串）</h3><ul><li>APPEND [key] [value]       # 字符串追加（如果当前key不存在就相当于set）</li><li>STRLEN [key]                     # 获取字符串长度</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET key1 v1OK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> APPEND key1 hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello"</span>127.0.0.1:6379<span class="token operator">></span> strlen key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> APPEND key1 <span class="token string">", techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 17127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello, techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>INCR [key]         # 自增1</li><li>DECR [key]        # 自减1</li><li>INCRBY [key] [10]     # 自增10</li><li>DECRBY [key] [5]      # 自减5</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0OK127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"2"</span>127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1127.0.0.1:6379<span class="token operator">></span> INCRBY views 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9127.0.0.1:6379<span class="token operator">></span> DECRBY views 5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GETRANGE [key] [startIndex] [endIndex]     # 获取字符串范围</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 <span class="token string">"hello, techaoba"</span>OK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hello, techaoba"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE key1 1 5<span class="token string">"ello,"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE key1 3 -1    <span class="token comment" spellcheck="true"># -1表示最后</span><span class="token string">"lo, techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SETRANGE [key] [startIndex] [value]        # 从startIndex开始Set</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET key2 abcdefgOK127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"abcdefg"</span>127.0.0.1:6379<span class="token operator">></span> SETRANGE key2 1 xx<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefg"</span>127.0.0.1:6379<span class="token operator">></span> SETRANGE key2 6 xxxxxx<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 12127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefxxxxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setex [key] [seconds] [value]（set with expire）       # 设置过期时间</li><li>setnx [key] [value]（set if not exist）       # 不存在设置（在分布式锁中会常常使用）</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置key3的过期时间为30秒</span>127.0.0.1:6379<span class="token operator">></span> setex key3 30 <span class="token string">"hello"</span>OK127.0.0.1:6379<span class="token operator">></span> TTL key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 24127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"mykey"</span>127.0.0.1:6379<span class="token operator">></span> TTL key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2<span class="token comment" spellcheck="true"># 由于mykey已经有值了，所以setnx mykey会设置失败</span>127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"MongoDB"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mset [key1] [value1] [key2] [value2] …    # 批量设置值</li><li>mget [key1 key2 …]    # 批量获取值</li><li>mset[key1] [value1] [key2] [value2] …    # 批量不存在设置值(具有原子性)</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 批量设置</span>127.0.0.1:6379<span class="token operator">></span> mset k1 v1 k2 v2 k3 v3OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k1"</span>2<span class="token punctuation">)</span> <span class="token string">"k3"</span>3<span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token comment" spellcheck="true"># 批量获取值</span>127.0.0.1:6379<span class="token operator">></span> mget k1 k2 k31<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token comment" spellcheck="true"># msetnx具有原子性操作，由于k1已经存在，k4也会设置失败</span>127.0.0.1:6379<span class="token operator">></span> msetnx k1 v100 k4 v4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> user:1 <span class="token punctuation">{</span>name:zhangsan,age:3<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 设置一个user:1对象 值为json字符来保存一个对象！</span>127.0.0.1:6379<span class="token operator">></span> get user:1<span class="token string">"{name:zhangsan,age:3}"</span>127.0.0.1:6379<span class="token operator">></span> mset user:2:name lisi user:2:age 2OK127.0.0.1:6379<span class="token operator">></span> mget user:2:name user:2:age1<span class="token punctuation">)</span> <span class="token string">"lisi"</span>2<span class="token punctuation">)</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getset     # 先get再set</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开始没有值，输出nil</span>127.0.0.1:6379<span class="token operator">></span> getset db redis<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"redis"</span><span class="token comment" spellcheck="true"># 开始值是redis，get完后设置为MongDB</span>127.0.0.1:6379<span class="token operator">></span> getset db MongDB<span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"MongDB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String类似的使用场景：value除了是字符串还可以是数字</p><ul><li>计数器</li><li>统计多单位数量 uid:958285378:follow 19032 (bilibili里面uid下的粉丝数量)</li></ul><h3 id="8-3-List（链表，可实现栈和队列）"><a href="#8-3-List（链表，可实现栈和队列）" class="headerlink" title="8.3 List（链表，可实现栈和队列）"></a>8.3 List（链表，可实现栈和队列）</h3><p>在Redis里面，可以把List完成栈、队列、阻塞队列</p><p><strong>所有的List命令都是用l开头的</strong></p><ul><li>LPUSH [key] [value]  # 将一个或者多个值插入到列表的头部（左）</li><li>RPUSH [key] [value]  # 将一个或者多个值插入到列表的尾部（右）</li><li>LPOP [key]     # 从左边弹出</li><li>RPOP [key]     # 从右边弹出</li><li>LRANGE [key] [startIndex] [endIndex]    # 从左边查看值</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># LPUSH 将一个或者多个值插入到列表的头部（左）</span>127.0.0.1:6379<span class="token operator">></span> LPUSH list one<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LPUSH list tuo<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LPOP list   <span class="token comment" spellcheck="true"># 从左边弹出</span><span class="token string">"tuo"</span>127.0.0.1:6379<span class="token operator">></span> LPUSH list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -1 <span class="token comment" spellcheck="true"># 从左边查看值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 1 <span class="token comment" spellcheck="true"># 从左边查看值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token comment" spellcheck="true"># 将一个或者多个值插入到列表的尾部（右）</span>127.0.0.1:6379<span class="token operator">></span> RPUSH list right<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LINDEX [key] [index]       # 通过下表获得list中的某一个值</li><li>LLEN [key]              # 获取list的长度</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list 1 <span class="token comment" spellcheck="true"># 通过下标获得list中的某一个值</span><span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list -1 <span class="token comment" spellcheck="true"># 通过下标获得list中的某一个值</span><span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LLEN list   <span class="token comment" spellcheck="true"># 获取list的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LREM [list] [count] [key]        # 移除list集合中指定个数的value，精确匹配</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> LREM list 1 one  <span class="token comment" spellcheck="true"># 从左开始移除一个one</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>4<span class="token punctuation">)</span> <span class="token string">"right"</span>127.0.0.1:6379<span class="token operator">></span> LREM list 2 three <span class="token comment" spellcheck="true"># 从左开始移除两个three</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"right"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ltrim [list] [startIndex] [endIndex] 修剪，list已经被改变了</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello3"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ltrim mylist 1 2OK127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RPOPLPUSH [sourceList] [targetList]    # 移除列表的最后一个元素，移动到新列表中 </li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> RPOPLPUSH mylist myotherlist<span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE myotherlist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LSET [list] [index] [value]    # 更新list元素</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> LPUSH list value1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"value1"</span>127.0.0.1:6379<span class="token operator">></span> LSET list 0 itemOK127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"item"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LINSERT [list] before [value] [newValue]</li><li>LINSERT [list] after [value] [newValue]</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 在world前插入other</span>127.0.0.1:6379<span class="token operator">></span> LINSERT mylist before <span class="token string">"world"</span> <span class="token string">"other"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true"># 在world后插入一个new</span>127.0.0.1:6379<span class="token operator">></span> LINSERT mylist after <span class="token string">"world"</span> <span class="token string">"new"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span>4<span class="token punctuation">)</span> <span class="token string">"new"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-Set（集合）"><a href="#8-4-Set（集合）" class="headerlink" title="8.4 Set（集合）"></a>8.4 Set（集合）</h3><p>set中的值不能重复！</p><ul><li>SADD [set] [value]     # set添加元素</li><li>SMEMBERS [set]        # 查看set成员</li><li>SISMEMBER [set] [value]    # 判断set是否有某成员</li><li>SCARD [set]    # 查看set成员个数</li><li>SREM [set] [value]    # 移除成员</li><li>SRANDMEMBER [set] [[count]]   # 随机挑选set中的一个元素，可指定个数</li><li>SPOP [set]    # 随机移除一个set元素</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"hello"</span>   <span class="token comment" spellcheck="true"># set添加元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset  <span class="token comment" spellcheck="true"># 查看set成员</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"lovetechaoba"</span>3<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SISMEMBER myset techaoba  <span class="token comment" spellcheck="true"># 判断set是否有某成员</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SISMEMBER myset techaoba0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SCARD myset   <span class="token comment" spellcheck="true"># 查看set成员个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SCARD myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"lovetechaoba2"</span>  <span class="token comment" spellcheck="true"># 插入重复成员会失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SREM myset <span class="token string">"hello"</span>   <span class="token comment" spellcheck="true"># 移除hello元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"lovetechaoba2"</span>2<span class="token punctuation">)</span> <span class="token string">"lovetechaoba"</span>3<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset    <span class="token comment" spellcheck="true"># 随机挑选set中的一个元素</span><span class="token string">"lovetechaoba2"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SRANDMEMBER myset 2  <span class="token comment" spellcheck="true"># 随机挑选set中的两个元素</span>1<span class="token punctuation">)</span> <span class="token string">"lovetechaoba2"</span>2<span class="token punctuation">)</span> <span class="token string">"techaoba"</span>127.0.0.1:6379<span class="token operator">></span> SPOP myset   <span class="token comment" spellcheck="true"># 随机移除一个set元素</span><span class="token string">"lovetechaoba2"</span>127.0.0.1:6379<span class="token operator">></span> SPOP myset<span class="token string">"lovetechaoba"</span>127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SMOVE [set] [set2] [value]</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset <span class="token string">"techaoba"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD myset2 <span class="token string">"set2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMOVE myset myset2 <span class="token string">"techaoba"</span> <span class="token comment" spellcheck="true"># 移动set元素到另一个set中</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> SMEMBERS myset21<span class="token punctuation">)</span> <span class="token string">"set2"</span>2<span class="token punctuation">)</span> <span class="token string">"techaoba"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微博和B站中有共同关注！（交集）</p><p>数字集合类：</p><ul><li>差集  SDIFF [set1] [set2] …</li><li>交集  SINTER [set1] [set2] …</li><li>并集  SUNION [set1] [set2] …</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SADD key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SDIFF key1 key2  <span class="token comment" spellcheck="true"># 差集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"a"</span>127.0.0.1:6379<span class="token operator">></span> SINTER key1 key2 <span class="token comment" spellcheck="true"># 交集</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> SUNION key1 key2 <span class="token comment" spellcheck="true"># 并集</span>1<span class="token punctuation">)</span> <span class="token string">"a"</span>2<span class="token punctuation">)</span> <span class="token string">"c"</span>3<span class="token punctuation">)</span> <span class="token string">"b"</span>4<span class="token punctuation">)</span> <span class="token string">"e"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-Hash"><a href="#8-5-Hash" class="headerlink" title="8.5 Hash"></a>8.5 Hash</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis学习&quot;&gt;&lt;a href=&quot;#Redis学习&quot; class=&quot;headerlink&quot; title=&quot;Redis学习&quot;&gt;&lt;/a&gt;Redis学习&lt;/h1&gt;&lt;h2 id=&quot;1-为什么用Nosql&quot;&gt;&lt;a href=&quot;#1-为什么用Nosql&quot; class=&quot;he</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Redis" scheme="http://techaoba.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis学习</title>
    <link href="http://techaoba.github.io/2021/07/31/mybatis-xue-xi/"/>
    <id>http://techaoba.github.io/2021/07/31/mybatis-xue-xi/</id>
    <published>2021-07-31T03:43:10.000Z</published>
    <updated>2021-09-07T05:41:31.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis学习"><a href="#MyBatis学习" class="headerlink" title="MyBatis学习"></a>MyBatis学习</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p>父工程Maven依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 父工程依赖包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mysql  驱动 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mybatis 包 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- junit --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在build中配置resources，来防止我们资源导出失败的问题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-编写mybatis的核心配置文件"><a href="#2-编写mybatis的核心配置文件" class="headerlink" title="2. 编写mybatis的核心配置文件"></a>2. 编写mybatis的核心配置文件</h2><p>首先创建一个子项目mybatis-01。</p><ul><li>在resources中新建mybatis-config.xml文件。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册！ --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/techaoba/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写mybatis工具类MyBatisUtils</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// sqlSessionFactory -> sqlSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用Mybatis第一步：获取sqlSessionFactory对象</span>      String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>      InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>  <span class="token comment" spellcheck="true">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置为true表示默认commit事务（否则需要手动commit）</span>    <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h2><ul><li>实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>techaoba<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dao接口(Interface)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>techaoba<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口实现类由原来的UserDaoImpl转变为一个Mapper.xml文件</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- namespace = 绑定一个对应的dao/mapper接口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from `mybatis`.`user`    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：org.apache.ibatis.binding.BindingException: Type interface com.techaoba.dao.UserDao is not known to the MapperRegistry.</p><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件(mybatis-config.xml)中注册mappers</p><ul><li>测试（junit）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：获得SqlSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方式一：getMapper（推荐使用第一种）</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方式二：</span>    <span class="token comment" spellcheck="true">//        List&lt;User> userList = sqlSession.selectList("com.techaoba.dao.UserDao.getUserList");</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭sqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4. CRUD"></a>4. CRUD</h2><h3 id="4-1-namespace"><a href="#4-1-namespace" class="headerlink" title="4.1 namespace"></a>4.1 namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致！</p><h3 id="4-2-基础CRUD代码"><a href="#4-2-基础CRUD代码" class="headerlink" title="4.2 基础CRUD代码"></a>4.2 基础CRUD代码</h3><p>mapper中的属性：</p><ul><li>id：就是对应的namespace中的方法名</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType：参数类型！</li></ul><p>步骤：</p><ul><li>编写接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据id查询用户</span>    User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加一个用户</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改用户</span>    <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写对应的mapper中的sql语句</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM `mybatis`.`user` WHERE `user`.`id` = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对象中的属性，可以直接取出来 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO `mybatis`.`user` (`id`, `name`, `pwd`) VALUES (#{id}, #{name}, #{pwd});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE `mybatis`.`user` SET `name` = #{name}, `pwd` = #{pwd} WHERE `id` = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 删除用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        DELETE FROM `mybatis`.`user` WHERE `id` = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"艾米莉亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"amly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"艾米莉亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"amly123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 增删改需要提交事务</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>增删改需要提交事务 ：sqlSession.commit();</li><li>增删改执行成功返回数值1。</li></ul><h3 id="4-3-万能Map"><a href="#4-3-万能Map" class="headerlink" title="4.3 万能Map"></a>4.3 万能Map</h3><p>假设，我们的实体类或者数据库中的表字段过多，我们应当考虑使用map，这样可以只操作实体中的部分属性!</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用map添加用户</span><span class="token keyword">int</span> <span class="token function">addUserByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>UserMapper.xml:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用map添加用户 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUserByMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  INSERT INTO `mybatis`.`user` (`id`, `name`, `pwd`) VALUES (#{userId}, #{userName}, #{password});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Test:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"12093884"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUserByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出key即可！【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个类型参数的情况下，可以直接在sql中取到！【parameterType=”int…”】</p><p>多个参数用Map，或者<strong>注解</strong>！</p><h3 id="4-4-模糊查询"><a href="#4-4-模糊查询" class="headerlink" title="4.4 模糊查询"></a>4.4 模糊查询</h3><ul><li>Java代码执行的时候，传递通配符% %</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%晓%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在sql拼接中使用通配符</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">"%"</span><span class="token comment" spellcheck="true">#{name}"%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-和-的区别"><a href="#4-5-和-的区别" class="headerlink" title="4.5 #{} 和 ${} 的区别"></a>4.5 #{} 和 ${} 的区别</h3><ol><li>#{}：</li></ol><ul><li>用来传入参数，sql在解析的时候会加上引号 “”，当成字符串来解析。</li><li><strong>#{} 能够跟大程度上防止sql注入。</strong></li></ul><ol start="2"><li>${}：</li></ol><ul><li><strong>使用${}时传入数据直接显示在生成的sql中，无法防止sql注入。</strong></li><li><strong>${}一般用于传入数据库对象，如表名和字段名。</strong></li><li>能用#{}尽量用#{}。</li></ul><h2 id="5-配置解析"><a href="#5-配置解析" class="headerlink" title="5. 配置解析"></a>5. 配置解析</h2><h3 id="5-1-核心配置文件"><a href="#5-1-核心配置文件" class="headerlink" title="5.1 核心配置文件"></a>5.1 核心配置文件</h3><ul><li>Mybatis-config.xml</li><li>MyBatis的配置文件中包含了回深深影响MyBatis行为的设置和属性信息。</li></ul><pre><code>configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre><h3 id="5-2-环境配置（environments）"><a href="#5-2-环境配置（environments）" class="headerlink" title="5.2 环境配置（environments）"></a>5.2 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，比如想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>在核心配置文件的<environments>中可以配置多套数据库运行环境！</p><p>Mybatis默认的事务管理器就是JDBC，连接池：POOLED。</p><h3 id="5-3-属性（properties）"><a href="#5-3-属性（properties）" class="headerlink" title="5.3 属性（properties）"></a>5.3 属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p>编写数据库配置文件【db.properties】</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">diver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在mybatis-config.xml文件中引入(注意：<strong>properties标签在最前面</strong>)：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入外部配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${diver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-类型别名（typeAliases）"><a href="#5-4-类型别名（typeAliases）" class="headerlink" title="5.4 类型别名（typeAliases）"></a>5.4 类型别名（typeAliases）</h3><ol><li>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 可以给实体类取别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当这样配置时，User可以用在任何使用com.techaoba.pojo.User的地方。</p><ol start="2"><li>也可以指定一个包名，MyBatis会在包名下面搜索需要的Java Bean，比如：</li></ol><p>扫描实体类的包， 它的默认别名就为这个类的类名，首字母小写！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--        &lt;typeAlias type="com.techaoba.pojo.User" alias="User" />--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当这样配置时，user可以用在任何使用com.techaoba.pojo.User的地方(首字母大写的User其实也可以使用)。</p><p>在扫描包的方式中可以在实体类之上加别名注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"UserAlias"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>在实体类比较少的时候，使用第一种方式。</li><li>如果实体类很多，建议使用第二种。</li><li>第一种可以DIY别名，第二种在实体类上加@Alias注解进行DIY。</li></ul><h3 id="5-5-映射器（mappers）"><a href="#5-5-映射器（mappers）" class="headerlink" title="5.5 映射器（mappers）"></a>5.5 映射器（mappers）</h3><p>MapperRegister：注册绑定我们的Mapper文件；</p><p><strong>方式一：使用相对于类路径的资源引用【推荐使用】</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 每一个Mapper.xml都需要在MyBatis核心配置文件中注册！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/techaoba/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：使用class文件绑定注册</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方式三：将包内的映射器接口实现全部注册为映射器</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式二和方式三的注意点：</p><ul><li>接口和它的Mapper配置文件必须同名！</li><li>接口和它的Mapper配置文件必须在同一个包下！</li></ul><h3 id="5-6-生命周期和作用域"><a href="#5-6-生命周期和作用域" class="headerlink" title="5.6 生命周期和作用域"></a>5.6 生命周期和作用域</h3><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的病发问题。</p><p>**SqlSessionFactoryBuilder: **</p><ul><li>一旦创建了SqlSessionFactory，就不需要它了</li><li>局部变量</li></ul><p>**SqlSessionFactory: **</p><ul><li>可以当作是：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li><li>因此SqlSessionFactory的最佳作用域是应用作用域。</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p>**SqlSession: **</p><ul><li>连接到连接池的一个请求！</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><h3 id="5-7-ResultMap"><a href="#5-7-ResultMap" class="headerlink" title="5.7 ResultMap"></a>5.7 ResultMap</h3><p>ResultMap是结果集映射</p><pre><code>id        name        pwdid        name        password</code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 结果集映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- column是数据库中的字段，property是实体类中的属性 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 同名的字段就不用映射了，只用映射不同名的字段 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;result column="id" property="id" />--></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;result column="name" property="name" />--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `mybatis`.`user` WHERE `user`.`id` = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ResultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li><code>ResultMap</code> 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</li></ul><h2 id="6-日志"><a href="#6-日志" class="headerlink" title="6. 日志"></a>6. 日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout、debug</p><p>现在：日志工厂</p><p><strong>logImpl：</strong> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li>SLF4J </li><li> LOG4J 【掌握】</li><li>LOG4J2 </li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><p>在MyBatis中，具体使用哪一个日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志(settings标签在properties和typeAliases之间)！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><a href="https://imgtu.com/i/fnkjkF"><img src="https://z3.ax1x.com/2021/08/06/fnkjkF.jpg" alt="STDOUT_LOGGING的日志输出"></a></p><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2  LOG4J"></a>6.2  LOG4J</h3><p>什么是Log4J：</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</li></ul><ol><li>先导入log4j的包</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建log4j.properties配置文件：</li></ol><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/techaoba.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置log4j为日志的实现</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 标准的日志工厂实现 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;setting name="logImpl" value="STDOUT_LOGGING"/>--></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置log4j为日志的实现 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>log4j的使用，测试运行。</li></ol><p><a href="https://imgtu.com/i/fnuaPf"><img src="https://z3.ax1x.com/2021/08/06/fnuaPf.jpg" alt="log4j的日志输出"></a></p><p><strong>简单使用</strong></p><ol><li>在要使用Log4j的类中，导入包 import org.apache.log4j.Logger;</li><li>日志对象，参数为当前类的class</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>测试打印：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLog4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>打印结果：</li></ol><pre class="line-numbers language-log"><code class="language-log">[INFO][21-08-06][com.techaoba.dao.UserMapper]info:进入了testLog4j[DEBUG][21-08-06][com.techaoba.dao.UserMapper]debug:进入了testLog4j[ERROR][21-08-06][com.techaoba.dao.UserMapper]error:进入了testLog4j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7. 分页"></a>7. 分页</h2><h3 id="7-1-mysql使用Limit进行分页语法："><a href="#7-1-mysql使用Limit进行分页语法：" class="headerlink" title="7.1 mysql使用Limit进行分页语法："></a>7.1 mysql使用Limit进行分页语法：</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 两个参数【startIndex,pageSize】从第4条数据开始查询5条数据，即【4，5，6，7，8】</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 一个参数表示从0开始查询n条数据，等价于   0, 3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Mybatis实现</p><ol><li>接口</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页查询</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 分页查询 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `user` LIMIT #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-RowBounds分类"><a href="#7-2-RowBounds分类" class="headerlink" title="7.2 RowBounds分类"></a>7.2 RowBounds分类</h3><p>不再使用SQL实现分页（使用对象实现分页，<strong>效率比前一种方法低</strong>）</p><ol><li>接口</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过RowBounds分页查询</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Mapper.xml</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通过RowBounds分页查询 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM `user`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// RowBounds实现</span>  RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过java代码层面实现分页</span>  List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.techaoba.dao.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><a href="https://pagehelper.github.io/">PageHelper</a>是一款MyBatis分页插件。了解即可。</p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><ol><li>关于接口的理解。</li></ol><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</p><p>接口的本身反映了系统设计人员对系统的抽象理解。</p><p>接口应有两类：第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；</p><p>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；</p><p>一个体有可能有多个抽象面。</p><p>抽象体与抽象面是有区别的。</p><ol start="2"><li><p>设计接口的另一个不可忽视的因素是接口所处的环境(context,environment)，系统论的观点：环境是系统要素所处的空间与外部影响因素的总和。任何接口都是在一定的环境中产生的。因此环境的定义及环境的变化对接口的影响是不容忽视的，脱离原先的环境，所有的接口将失去原有的意义。</p></li><li><p>按照组件的开发模型（3C），它们三者相辅相成，各司一面，浑然一体，缺一不可。</p></li></ol><ul><li><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法</p></li><li><p>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现</p></li><li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题</p></li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li>注解在接口上实现</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `user`"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>需要在核心配置文件中绑定接口</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 绑定接口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.dao.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本质：反射机制实现</p><p>底层：动态代理！</p><h3 id="8-3-注解CRUD"><a href="#8-3-注解CRUD" class="headerlink" title="8.3 注解CRUD"></a>8.3 注解CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务!</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置为true</span>  <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE `user` SET `name` = #{name}, `pwd` = #{pwd} WHERE `id` = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `user`(`id`,`name`,`pwd`) VALUES (#{id}, #{name}, #{pwd})"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM `user` WHERE id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意：必须要将接口注册绑定到核心配置文件中！】</p><p><strong>关于@Param()注解</strong>：</p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议都加上</li><li>在SQL中引用的就是@Param()中设定的属性名</li></ul><h2 id="9-Lombok的使用"><a href="#9-Lombok的使用" class="headerlink" title="9. Lombok的使用"></a>9. Lombok的使用</h2><p>导入Lombok依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Data: 无参构造，get，set，tostring，hashcode，equals。</p><p>@AllArgsConstructor：有参构造</p><p>@NoArgsConstructor：无参构造</p><p>@Getter，@Setter，@tostring，@hashcode……</p><h2 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10. 多对一处理"></a>10. 多对一处理</h2><h3 id="10-1-在数据库中加入教师和学生数据"><a href="#10-1-在数据库中加入教师和学生数据" class="headerlink" title="10.1 在数据库中加入教师和学生数据"></a>10.1 在数据库中加入教师和学生数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'李老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'小李'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-测试环境搭建"><a href="#10-2-测试环境搭建" class="headerlink" title="10.2 测试环境搭建"></a>10.2 <strong>测试环境搭建</strong></h3><ol><li><p>新建实体类Teacher，Student</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 学生关联一个老师</span>    <span class="token keyword">private</span> Teacher teacher<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立Mapper接口</p></li><li><p>建立Mapper.xml文件</p></li><li><p>在核心配置文件中绑定注册Mapper接口或者文件</p></li><li><p>测试查询</p></li></ol><h3 id="10-3-按照查询嵌套处理"><a href="#10-3-按照查询嵌套处理" class="headerlink" title="10.3 按照查询嵌套处理"></a>10.3 <strong>按照查询嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 思路：        1. 查询所有的学生信息        2. 根据查询出来学生的tid，寻找相应的老师--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 复杂的属性需要单独处理       对象使用：association       集合使用：collection  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM teacher WHERE id=#{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果（包含老师的全部信息）：</p><pre><code>Student(id=1, name=小明, teacher=Teacher(id=1, name=李老师))Student(id=2, name=小红, teacher=Teacher(id=1, name=李老师))Student(id=3, name=小张, teacher=Teacher(id=1, name=李老师))Student(id=4, name=小李, teacher=Teacher(id=1, name=李老师))Student(id=5, name=小王, teacher=Teacher(id=1, name=李老师))</code></pre><h3 id="10-4-按照结果嵌套处理"><a href="#10-4-按照结果嵌套处理" class="headerlink" title="10.4 按照结果嵌套处理"></a>10.4 <strong>按照结果嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 按照结果嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT s.id sid,s.name sname,t.name tname FROM student s,teacher t WHERE s.tid=t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果（只包含老师的姓名）：</p><pre><code>Student(id=1, name=小明, teacher=Teacher(id=0, name=李老师))Student(id=2, name=小红, teacher=Teacher(id=0, name=李老师))Student(id=3, name=小张, teacher=Teacher(id=0, name=李老师))Student(id=4, name=小李, teacher=Teacher(id=0, name=李老师))Student(id=5, name=小王, teacher=Teacher(id=0, name=李老师))</code></pre><h2 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11. 一对多处理"></a>11. 一对多处理</h2><p>比如：一个老师拥有多个学生。对老师而言，就是一对多的关系。</p><h3 id="11-1-测试环境搭建"><a href="#11-1-测试环境搭建" class="headerlink" title="11.1 测试环境搭建"></a>11.1 <strong>测试环境搭建</strong></h3><ol><li><p>新建实体类Teacher，Student</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一个老师拥有多个学生</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立Mapper接口</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取指定老师下的所有学生及老师的信息(按照查询嵌套处理)</span>Teacher <span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取指定老师下的所有学生及老师的信息(按照结果嵌套处理)</span>Teacher <span class="token function">getTeacher2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>建立Mapper.xml文件</li></ol><h3 id="11-2-按照结果嵌套处理"><a href="#11-2-按照结果嵌套处理" class="headerlink" title="11.2 按照结果嵌套处理"></a>11.2 <strong>按照结果嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 复杂的属性需要单独处理  对象使用：association  集合使用：collection        javaType=""  是指定的属性类型！        集合中的泛型信息，我们使用ofType获取    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 按结果嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT s.id sid, s.`name` sname, t.`name` tname, t.id tid  FROM teacher t, student s  WHERE t.id = #{tid} AND s.tid = t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-按照查询嵌套处理"><a href="#11-3-按照查询嵌套处理" class="headerlink" title="11.3 按照查询嵌套处理"></a>11.3 <strong>按照查询嵌套处理</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 按查询嵌套处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentList<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span>    <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM student WHERE tid = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM teacher WHERE id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在核心配置文件中绑定注册Mapper接口或者文件</li><li>测试查询</li></ol><p>结果：</p><pre><code>Teacher(id=1, name=李老师, studentList=[Student(id=1, name=小明, tid=1), Student(id=2, name=小红, tid=1), Student(id=3, name=小张, tid=1), Student(id=4, name=小李, tid=1), Student(id=5, name=小王, tid=1)])</code></pre><h3 id="11-4-小节"><a href="#11-4-小节" class="headerlink" title="11.4 小节"></a>11.4 小节</h3><ol><li>关联 - association 【多对一】</li><li>集合 - collection【一对多】</li><li>javaType &amp; ofType<ol><li>javaType用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性， 尽量保证通熟易懂。</li><li>注意一对多和多对一中，属性名和字段的问题。</li><li>如果问题不好排查，可以使用日志，建议使用Log4J。</li></ul><h2 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12. 动态SQL"></a>12. 动态SQL</h2><p><strong>动态SQL就是指根据不同的条件生成不同的SQL语句。</strong> </p><h3 id="12-1-搭建环境"><a href="#12-1-搭建环境" class="headerlink" title="12.1 搭建环境"></a>12.1 搭建环境</h3><p>sql创建数据表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实体类（注意Date导包是util而不是sql的）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-2-if语句"><a href="#12-2-if语句" class="headerlink" title="12.2 if语句"></a>12.2 if语句</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE 1=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND title = #{title}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND author = #{author}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-where"><a href="#12-3-where" class="headerlink" title="12.3 where"></a>12.3 where</h3><p><strong>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-4-choose-when-otherwise语句"><a href="#12-4-choose-when-otherwise语句" class="headerlink" title="12.4 choose, when, otherwise语句"></a>12.4 choose, when, otherwise语句</h3><p><strong>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{title}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND author = #{author}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>        AND views = #{views}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：when是按照顺序判断的，第一个成立就不会往后面判断了，后面也是如此。</p><h3 id="12-5-trim-set语句"><a href="#12-5-trim-set语句" class="headerlink" title="12.5 trim, set语句"></a>12.5 trim, set语句</h3><p><strong><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  UPDATE blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      title = #{title},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      author = #{author},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      views = #{views},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  WHERE id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-sql片段"><a href="#12-6-sql片段" class="headerlink" title="12.6 sql片段"></a>12.6 sql片段</h3><p>有时候，我们可能会将一些公用功能的部分抽取出来，方便复用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- sql片段 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND title = #{title}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND author = #{author}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用sql片段 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>最好基于单表来定义片段！</li><li>不要存在where标签</li></ul><h3 id="12-7-foreach语句"><a href="#12-7-foreach语句" class="headerlink" title="12.7 foreach语句"></a>12.7 foreach语句</h3><p><strong>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</strong></p><p><strong><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。</strong></p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据idList查询blog</span>List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> ids<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> views<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM blog WHERE  views > #{views}  AND id IN  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>&lt;==Row: 1, 关系抽取, tech, 2021-08-07 15:49:44.0, 234724&lt;==Row: 3, Spring, 狂神说, 2021-08-07 15:49:44.0, 9999</code></pre><h2 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13. 缓存"></a>13. 缓存</h2><pre><code>查询 ： 连接数据库，耗资源！一次查询的结果，给它暂存在一个可以直接取到的地方 --&gt;内存，缓存我们再次查询相同数据的时候没直接走缓存，就不用走数据库了</code></pre><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><ol><li>什么是缓存【cache】？<ol><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系数据库数据文件）查询，从缓存中查询，从而提升查询效率，<strong>解决了高并发系统的性能问题</strong>。</li></ol></li><li>为什么使用缓存？<ol><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ol></li><li>什么样的数据能使用缓存？<ol><li>经常查询并且不经常改变的数据。</li></ol></li></ol><h3 id="13-2-MyBatis缓存"><a href="#13-2-MyBatis缓存" class="headerlink" title="13.2 MyBatis缓存"></a>13.2 MyBatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li><strong>二级缓存需要手动开启和配置</strong>，它是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><ul><li>一级缓存也叫本地缓存：SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库。</li></ul></li></ul><p>测试步骤：</p><ol><li><p>开启日志！</p></li><li><p>测试在一个Session中查询两次相同记录</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看日志输出</p></li></ol><p><a href="https://imgtu.com/i/fleb36"><img src="https://z3.ax1x.com/2021/08/08/fleb36.jpg" alt="显然使用了缓存"></a></p><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fln6yT"><img src="https://z3.ax1x.com/2021/08/08/fln6yT.jpg" alt="增删改操作会清理缓存"></a></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 手动清理缓存</span>sqlSession<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>小节：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接的区间段。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存的作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间对应一个二级缓存</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查询的数据会放在自己对应的缓存中</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 显式的开启全局缓存 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在当前Mapper.xml中使用二级缓存 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自定义一些参数：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在当前Mapper.xml中使用二级缓存 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><p>问题：我们需要将实体类序列化！否则就会报错</p><pre class="line-numbers language-xml"><code class="language-xml">Caused by: java.io.NotSerializableException: com.techaoba.pojo.User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  SqlSession sqlSession2 <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  UserMapper mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>  sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/flQEAe"><img src="https://z3.ax1x.com/2021/08/08/flQEAe.jpg" alt="二级缓存结果"></a></p><p>小节：</p><ul><li><p>只要开启了二级缓存，在同一个Mapper下就有效</p></li><li><p>所有的数据都会先放在一级缓存中</p></li><li><p>只有当会话提交，或者关系的时候，才会提交到二级缓存中</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis学习&quot;&gt;&lt;a href=&quot;#MyBatis学习&quot; class=&quot;headerlink&quot; title=&quot;MyBatis学习&quot;&gt;&lt;/a&gt;MyBatis学习&lt;/h1&gt;&lt;h2 id=&quot;1-环境搭建&quot;&gt;&lt;a href=&quot;#1-环境搭建&quot; class=&quot;head</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MyBatis" scheme="http://techaoba.github.io/tags/MyBatis/"/>
    
    <category term="学习笔记" scheme="http://techaoba.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>spring学习笔记</title>
    <link href="http://techaoba.github.io/2021/07/17/spring-xue-xi-bi-ji/"/>
    <id>http://techaoba.github.io/2021/07/17/spring-xue-xi-bi-ji/</id>
    <published>2021-07-17T03:30:02.000Z</published>
    <updated>2021-08-17T11:22:35.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="x-使用Spring实现Aop"><a href="#x-使用Spring实现Aop" class="headerlink" title="x. 使用Spring实现Aop"></a>x. 使用Spring实现Aop</h2><p>使用AOP植入，需要导入一个依赖包：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下三种实现方式：</p><h3 id="x-1-方式一-使用Spring的API接口【主要SpringAPI接口实现】"><a href="#x-1-方式一-使用Spring的API接口【主要SpringAPI接口实现】" class="headerlink" title="x.1 方式一 使用Spring的API接口【主要SpringAPI接口实现】"></a>x.1 方式一 <strong>使用Spring的API接口</strong>【主要SpringAPI接口实现】</h3><p>用户接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切入类定义(通过SpringAPI接口实现)：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// method：要执行的目标对象的方法</span>    <span class="token comment" spellcheck="true">// args：参数</span>    <span class="token comment" spellcheck="true">// object：目标对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// returnValue；返回值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>Object returnValue<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法，返回结果为："</span> <span class="token operator">+</span> returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicationContext.xml：</p><p>​    其中execution表达式的<strong>第一个星号表示任意返回值类型</strong>，第二个参数为用户实现类的所有方法。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注册bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.service.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.log.Log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.log.AfterLog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式一：使用原生Spring API接口 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop:需要导入aop的约束 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 方式一：使用原生Spring API接口 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop:需要导入aop的约束 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 切入点(pointcut) expression:表达式,execution(要执行的位置) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.techaoba.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 执行环绕增加！ --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理代理的是接口</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-2-方式二-自定义来实现AOP【主要面向切面定义】"><a href="#x-2-方式二-自定义来实现AOP【主要面向切面定义】" class="headerlink" title="x.2 方式二 自定义来实现AOP【主要面向切面定义】"></a>x.2 方式二 <strong>自定义来实现AOP</strong>【主要面向切面定义】</h3><p>自定义类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">diyPointCut</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行前====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====方法执行后====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注册bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.service.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 方式二：自定义类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.diy.diyPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自定义切面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 切入点 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.techaoba.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-3-方式三-使用注解实现"><a href="#x-3-方式三-使用注解实现" class="headerlink" title="x.3 方式三 使用注解实现"></a>x.3 方式三 使用注解实现</h3><p>在类中直接使用注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式三：使用注解实现AOP，@Aspect标注这个类是一个切面</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationPointCut</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行前======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行后======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在环绕增强中，我们可以给定一个参数，代表我们要处理切入的点（一般不用该方法）：</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.techaoba.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroud</span><span class="token punctuation">(</span>ProceedingJoinPoint jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行方法</span>        Object proceed <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得签名</span>        Signature signature <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"signature"</span> <span class="token operator">+</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/aop           http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 方式三 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.diy.AnnotationPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启注解支持！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="y-回顾和整合Mybatis"><a href="#y-回顾和整合Mybatis" class="headerlink" title="y 回顾和整合Mybatis"></a>y 回顾和整合Mybatis</h2><h3 id="y-1-回顾Mybatis"><a href="#y-1-回顾Mybatis" class="headerlink" title="y.1 回顾Mybatis"></a>y.1 回顾Mybatis</h3><p>步骤：</p><ul><li>导入相关jar包<ul><li>junit</li><li>Mybatis</li><li>Mysql数据库</li><li>aop植入</li><li>mybatis-spring</li><li>maven静态资源过滤问题</li></ul></li><li>编写配置文件</li><li>测试</li></ul><p>导入Maven依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring操作数据库的话，还需要一个spring-jdbc --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户映射类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Mapper文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- configuration核心配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM mybatis.user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis.xml 配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- configuration核心配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resources <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream input <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="y-2-整合Mybatis方式一"><a href="#y-2-整合Mybatis方式一" class="headerlink" title="y.2 整合Mybatis方式一"></a>y.2 整合Mybatis方式一</h3><p>mybatis.xml 配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.pojo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-dao.xml 配置文件(sqlSessionFactory 和 SqlSessionTemplate)：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- DataSource: 使用Spring的数据源替换Mybatis的配置         这里我们使用Spring提供的JDBC : org.springframework.jdbc.datasource    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- sqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 绑定 Mybatis配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/techaoba/mapper/*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SqlSessionTemplate: 就是我们使用的sqlSession --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 只能使用构造器注入sqlSessionFactory，因为它没有set方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增UserMapperImpl实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们的所有操作，原来都使用sqlSession来执行，现在都使用SqlSessionTemplate！</span>    <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-dao.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper userMapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">,</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="y-2-整合Mybatis方式二-使用继承SqlSessionDaoSupport类"><a href="#y-2-整合Mybatis方式二-使用继承SqlSessionDaoSupport类" class="headerlink" title="y.2 整合Mybatis方式二(使用继承SqlSessionDaoSupport类)"></a>y.2 整合Mybatis方式二(使用继承SqlSessionDaoSupport类)</h3><p>UserMapperImpl2实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl2</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-dao.xml 添加：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.techaoba.mapper.UserMapperImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="z-事务"><a href="#z-事务" class="headerlink" title="z. 事务"></a>z. 事务</h2><h3 id="z-1-事务回顾"><a href="#z-1-事务回顾" class="headerlink" title="z.1 事务回顾"></a>z.1 事务回顾</h3><p>ACID原则：</p><ul><li>原子性（Atomicity）<ul><li>一个事务的所有系列操作步骤被看成一个动作，所有的步骤要么全部完成，要么一个也不会完成。如果在事务过程中发生错误，则会回滚到事务开始前的状态，将要被改变的数据库记录不会被改变。</li></ul></li><li>一致性（Consistency）<ul><li>事务在开始和结束时，应该始终满足一致性约束。比如系统要求A+B=100，那么事务如果改变了A的数值，则B的数值也要相应修改来满足这样一致性要求。</li></ul></li><li>隔离性（Isolation）<ul><li>如果有多个事务同时执行，彼此之间不需要知晓对方的存在，而且执行时互不影响，事务之间需要序列化执行，有时间顺序。</li></ul></li><li>持久性（Durability）<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化地写到存储器中！</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring学习笔记&quot;&gt;&lt;a href=&quot;#Spring学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Spring学习笔记&quot;&gt;&lt;/a&gt;Spring学习笔记&lt;/h1&gt;&lt;h2 id=&quot;x-使用Spring实现Aop&quot;&gt;&lt;a href=&quot;#x-使用Sp</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Spring" scheme="http://techaoba.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习笔记</title>
    <link href="http://techaoba.github.io/2021/07/16/springmvc-xue-xi-bi-ji/"/>
    <id>http://techaoba.github.io/2021/07/16/springmvc-xue-xi-bi-ji/</id>
    <published>2021-07-16T15:01:25.000Z</published>
    <updated>2021-07-16T15:41:21.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC学习笔记"><a href="#SpringMVC学习笔记" class="headerlink" title="SpringMVC学习笔记"></a>SpringMVC学习笔记</h1><h2 id="1-MVC架构"><a href="#1-MVC架构" class="headerlink" title="1. MVC架构"></a>1. MVC架构</h2><p>MVC：<strong>模型Model</strong>（Dao, Service）  <strong>视图View</strong>（jsp）  <strong>控制器Controller</strong>（Servlet）</p><h2 id="2-Servlet"><a href="#2-Servlet" class="headerlink" title="2. Servlet"></a>2. Servlet</h2><p>创建Maven项目，父pom.xml加入如下依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建springMVC-01-servlet的Maven子项目，导入如下依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键springMVC-01-servlet子项目-&gt;Add Framework Support-&gt;Web Application</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC学习笔记&quot;&gt;&lt;a href=&quot;#SpringMVC学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC学习笔记&quot;&gt;&lt;/a&gt;SpringMVC学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1-MVC架构&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="开发" scheme="http://techaoba.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://techaoba.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="http://techaoba.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="SpringMVC" scheme="http://techaoba.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>使用元学习在知识图谱中进行少样本的链接预测任务</title>
    <link href="http://techaoba.github.io/2021/06/24/shi-yong-yuan-xue-xi-zai-zhi-shi-tu-pu-zhong-jin-xing-shao-yang-ben-de-lian-jie-yu-ce-ren-wu/"/>
    <id>http://techaoba.github.io/2021/06/24/shi-yong-yuan-xue-xi-zai-zhi-shi-tu-pu-zhong-jin-xing-shao-yang-ben-de-lian-jie-yu-ce-ren-wu/</id>
    <published>2021-06-24T05:37:06.000Z</published>
    <updated>2021-06-24T13:51:39.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Meta-Relational-Learning-for-Few-Shot-Link-Prediction-in-Knowledge-Graphs"><a href="#Meta-Relational-Learning-for-Few-Shot-Link-Prediction-in-Knowledge-Graphs" class="headerlink" title="Meta Relational Learning for Few-Shot Link Prediction in Knowledge Graphs"></a>Meta Relational Learning for Few-Shot Link Prediction in Knowledge Graphs</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;链接预测是补全知识图谱的一种重要手段，虽然基于嵌入方法的链接预测是有效的方法，但是对于小样本的关系三元组来说预测的表现较差。在本篇论文中提出了一个元关系学习架构（MetaR）去完成常见并富有挑战性的少样本链接预测任务。我们通过传递特定关系元信息在小样本知识图谱关系链接上，来使模型学习最重要的知识并且学习的更快，特定关系元信息分别对应于Meta-R模型中的关系元和梯度元。模型取得了SOTA的效果。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;虽然知识图谱由大量的实体，关系和三元组组成，许多知识图谱依然是不完整的，因此知识图谱补全对于知识图谱的发展来说至关重要。一种补全的任务是链接预测，通过现有的三元组预测新的关系三元组。其中，KG的嵌入是有效的方法。他们学习连续向量空间中实体和关系的潜在表示（称为嵌入），并通过计算和嵌入来完成链接预测。</p><p>&#8195;&#8195;知识图谱嵌入方法的有效性与训练样本的数量正相关，因此当训练样本数量少时预测精度不高。然而，小样本问题确实广泛存在于KG当中的。例如，在Wiki数据中大约10%的关系对应的三元组实例不超过10个。在本篇论文中，我们致力于研究知识图谱小样本链接预测，在给予K个关于关系r的三元组后，通过头实体h和关系r预测尾实体t，通常来说K很小。图1描述了一个3样本链接预测的例子。</p><p><a href="https://imgtu.com/i/RMD9gJ"><img src="https://z3.ax1x.com/2021/06/24/RMD9gJ.jpg" alt="Figure 1"></a></p><p>对于知识图谱上的小样本的链接预测任务，其第一次提出的解决方案为GMatching，这种方法的目标是通过考虑一阶的图结构和学习编码方式来得到一个匹配矩阵。在本文中，我们采用的另外一种思路来完成知识图谱的补全任务，我们的思路为：从小样本中传递到不完整的三元组的信息，应该是在一个任务中共享的，普遍的信息。称这种信息为关系元信息，并且提出了对于解决小样本的链接预测任务的关系元学习的新的学习框架MetaR。同样利用上面的图示，框架将CEOof信息和 CountryCapital通过元关系学习框架从已经存在的小样本传递到不完整的三元组上。</p><p>我们定义的关系元信息主要从以下两个方面来帮助我们完成链接预测的任务：</p><ul><li>将普遍的关系信息从已经存在的三元组传递到不完整的三元组上。</li><li>在一个任务中通过观察小样本加速学习过程。</li></ul><p>因此，我们提出两种关系元信息：关系元信息和梯度元信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Meta-Relational-Learning-for-Few-Shot-Link-Prediction-in-Knowledge-Graphs&quot;&gt;&lt;a href=&quot;#Meta-Relational-Learning-for-Few-Shot-Link-Pred</summary>
      
    
    
    
    <category term="论文" scheme="http://techaoba.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="NLP" scheme="http://techaoba.github.io/tags/NLP/"/>
    
    <category term="论文" scheme="http://techaoba.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
    <category term="Meta Learning" scheme="http://techaoba.github.io/tags/Meta-Learning/"/>
    
  </entry>
  
  <entry>
    <title>元学习综述</title>
    <link href="http://techaoba.github.io/2021/06/15/yuan-xue-xi-zong-shu/"/>
    <id>http://techaoba.github.io/2021/06/15/yuan-xue-xi-zong-shu/</id>
    <published>2021-06-15T06:32:26.000Z</published>
    <updated>2021-06-15T13:22:24.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度元学习的综述"><a href="#深度元学习的综述" class="headerlink" title="深度元学习的综述"></a>深度元学习的综述</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><hr><p>&#8195;&#8195;深度神经网络在提供大量数据集和足够计算资源时可以表现出特别优秀的表现。然而，它们快速学习新概念的能力非常有限。元学习就是解决这个问题的一种方法，它可以使得网络学习如何去学习。那么本篇论文针对元学习目前的技术，理论基础，重要方法进行综述性的总结。此外，我们确定了主要开放的挑战，比如异构基准的性能评估以及降低元学习的计算成本。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><hr><p>&#8195;&#8195;在近些年，深度学习技术在各种任务重取得了卓越的成功，包括博弈、图片识别、机器翻译以及生物领域的自动分类。尽管如此，深度神经网络依然包含许多挑战没有得到解决，比如它需要大量的数据和训练支持其取得好的性能。而这种苛刻的要求限制了深度神经网络快速学习新概念的能力。</p><p>&#8195;&#8195;元学习可以克服上面所提出的挑战。其主要的思路是元学习智能体可以不断地提升自身的学习能力，换一种说法，就是学习如何去学习。学习过程主要关注任务和发生两种不用的层次：inner层和outer层。出现一个新的任务时，智能体会尝试在inner层快速学习来自训练观察中的相关概念。这种快速的适应能力受益于早期outer-lever任务所累积学到的知识。因此，inner层面关注的是单个任务，而outer层面关注的多个任务。</p><p>&#8195;&#8195;元学习属于应用于多个领域中。广义上，元学习利用之前学习的经验封装起来，从而可以快速学习新的任务。这种广义的概念包含更多传统算法的选择以及机器学习超参数优化的技术。而在本篇论文中，我们只关注对于神经网络中利用元学习方法学习好的归纳偏置的元学习领域子集。之后，论文中的深度元学习就对应这个子集。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深度元学习的综述&quot;&gt;&lt;a href=&quot;#深度元学习的综述&quot; class=&quot;headerlink&quot; title=&quot;深度元学习的综述&quot;&gt;&lt;/a&gt;深度元学习的综述&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="论文" scheme="http://techaoba.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="论文" scheme="http://techaoba.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
    <category term="综述" scheme="http://techaoba.github.io/tags/%E7%BB%BC%E8%BF%B0/"/>
    
    <category term="元学习" scheme="http://techaoba.github.io/tags/%E5%85%83%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据的回滚</title>
    <link href="http://techaoba.github.io/2021/06/10/mysql-shu-ju-de-hui-gun/"/>
    <id>http://techaoba.github.io/2021/06/10/mysql-shu-ju-de-hui-gun/</id>
    <published>2021-06-10T10:06:44.000Z</published>
    <updated>2021-06-10T12:06:26.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac中使用binlog2sql进行数据回滚"><a href="#Mac中使用binlog2sql进行数据回滚" class="headerlink" title="Mac中使用binlog2sql进行数据回滚"></a>Mac中使用<strong>binlog2sql</strong>进行数据回滚</h1><p>总所周知数据库的日志文件是保证数据库安全的必要手段，若没有日志文件或者备份等手段，稍不留神的误操作便会迫不得已而跑路。建议开启binlog并配置binlog2sql工具进行日志的记录以及必要时刻的回滚。</p><h2 id="1-binlog2sql的下载"><a href="#1-binlog2sql的下载" class="headerlink" title="1. binlog2sql的下载"></a>1. binlog2sql的下载</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/danfengcao/binlog2sql.git<span class="token function">cd</span> binlog2sqlpip <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-Mac中Mysql配置文件"><a href="#2-Mac中Mysql配置文件" class="headerlink" title="2. Mac中Mysql配置文件"></a>2. Mac中Mysql配置文件</h2><p>在MacBook中安装的mysql默认是没有配置文件的，下面介绍一下配置相关文件的步骤。</p><p>首先可以使用命令查看mysql指定my.cnf配置文件的路径优先级：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql --help<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'my.cnf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/2RETVP"><img src="https://z3.ax1x.com/2021/06/10/2RETVP.jpg" alt="mac中mysql的配置文件路径优先级"></a></p><p>可以看出/etc/my.cnf文件是mysql首先查找的文件，因此我们选择把配置文件放在该目录下（<a href="https://www.jianshu.com/p/55ba63012185">原文链接</a>）</p><p>这里我直接给出配置好的my.conf配置文件：</p><p>链接: <a href="https://pan.baidu.com/s/1MRuFmKZStThePgI9JcLs-Q">https://pan.baidu.com/s/1MRuFmKZStThePgI9JcLs-Q</a>  密码: jabf</p><p>注意不要使用mac自带的文本编辑器打开配置文件，这样会改变文件的编码格式，而MySQL的配置文件需要时ASNI/ASCII格式的，所以可以使用vim进行编辑。</p><p>把配置文件放入/etc/并修改文件权限为664，不然MySQL读取文件的时候权限会出错:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> ~/Desktop/my.cnf /etc/<span class="token function">cd</span> /etc<span class="token function">sudo</span> <span class="token function">chmod</span> 664 my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在改完这个配置的之后，<strong>重启MySQL服务器会启动不了</strong>。不要慌，我们只需要重启电脑就可以了。</p><h2 id="3-误删数据"><a href="#3-误删数据" class="headerlink" title="3. 误删数据"></a>3. 误删数据</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登陆数据库</span>$ mysql -u adminName -p <span class="token string">'password'</span><span class="token comment" spellcheck="true"># 选择数据库</span><span class="token operator">></span> show databases<span class="token punctuation">;</span><span class="token operator">></span> use test_database<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看数据</span><span class="token operator">></span> show tables<span class="token punctuation">;</span><span class="token operator">></span> SELECT * FROM table_name<span class="token punctuation">;</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span> upload_id <span class="token operator">|</span> user_id <span class="token operator">|</span> media_name    <span class="token operator">|</span> upload_time         <span class="token operator">|</span> media_url <span class="token operator">|</span> media_class <span class="token operator">|</span> media_module_id <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span>         1 <span class="token operator">|</span>       1 <span class="token operator">|</span> 媒体文件1     <span class="token operator">|</span> 2021-06-10 18:45:35 <span class="token operator">|</span> media1    <span class="token operator">|</span>           1 <span class="token operator">|</span>               1 <span class="token operator">|</span><span class="token operator">|</span>         2 <span class="token operator">|</span>       2 <span class="token operator">|</span> 媒体文件2     <span class="token operator">|</span> 2021-06-10 18:47:10 <span class="token operator">|</span> media2    <span class="token operator">|</span>           2 <span class="token operator">|</span>               2 <span class="token operator">|</span><span class="token operator">|</span>         3 <span class="token operator">|</span>       3 <span class="token operator">|</span> 媒体文件3     <span class="token operator">|</span> 2021-06-10 18:47:13 <span class="token operator">|</span> media3    <span class="token operator">|</span>           3 <span class="token operator">|</span>               3 <span class="token operator">|</span><span class="token operator">|</span>         4 <span class="token operator">|</span>       4 <span class="token operator">|</span> 媒体文件4     <span class="token operator">|</span> 2021-06-10 18:47:16 <span class="token operator">|</span> media4    <span class="token operator">|</span>           4 <span class="token operator">|</span>               4 <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token comment" spellcheck="true"># 假装误操作，删除数据</span><span class="token operator">></span> DELETE FROM upload_media<span class="token punctuation">;</span>Query OK, 4 rows affected <span class="token punctuation">(</span>0.03 sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看日志文件</span><span class="token operator">></span> show master logs<span class="token punctuation">;</span>+------------------+-----------+<span class="token operator">|</span> Log_name         <span class="token operator">|</span> File_size <span class="token operator">|</span>+------------------+-----------+<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>     11367 <span class="token operator">|</span>+------------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数据回滚"><a href="#4-数据回滚" class="headerlink" title="4. 数据回滚"></a>4. 数据回滚</h2><p>可以使用binlog2sql把日志文件转为sql形式的语句查看日志所记录的sql操作。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 来到binlog2sql安装目录</span>$ cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sbin<span class="token operator">/</span>binlog2sql<span class="token comment" spellcheck="true"># 执行python代码（注意sudo）</span>$ sudo python binlog2sql<span class="token operator">/</span>binlog2sql<span class="token punctuation">.</span>py <span class="token operator">-</span>h127<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>P3306 <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token string">'123456'</span> <span class="token operator">-</span>d test_user <span class="token operator">-</span>t upload_media <span class="token operator">-</span><span class="token operator">-</span>start<span class="token operator">-</span>file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:45:35'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:10'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:13'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'媒体文件4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2021-06-10 18:47:16'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'media4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据输出的start和end信息完成相应数据的回滚，以上删除的四条数据start为10916，end为11336，首先检查回滚sql是否正确</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -u root -p<span class="token string">'123456'</span> -d test_user -t upload_media --start-file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span> --start-pos<span class="token operator">=</span>10916 --end-pos<span class="token operator">=</span>11336 -B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'媒体文件4'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:16'</span><span class="token punctuation">,</span> <span class="token string">'media4'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'媒体文件3'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:13'</span><span class="token punctuation">,</span> <span class="token string">'media3'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'媒体文件2'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:47:10'</span><span class="token punctuation">,</span> <span class="token string">'media2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>upload_media<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>upload_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>upload_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_url<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_class<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>media_module_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'媒体文件1'</span><span class="token punctuation">,</span> <span class="token string">'2021-06-10 18:45:35'</span><span class="token punctuation">,</span> <span class="token string">'media1'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#start 10916 end 11336 time 2021-06-10 18:49:20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果sql语句没有错误则在上面执行语句的基础上加” | mysql -h127.0.0.1 -P3306 -uroot -p’123456’ “，执行回滚语句：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -u root -p<span class="token string">'123456'</span> -d test_user -t upload_media --start-file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span> --start-pos<span class="token operator">=</span>10916 --end-pos<span class="token operator">=</span>11336 -B <span class="token operator">|</span> mysql -h127.0.0.1 -P3306 -uroot -p<span class="token string">'123456'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数据库：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM upload_media<span class="token punctuation">;</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span> upload_id <span class="token operator">|</span> user_id <span class="token operator">|</span> media_name    <span class="token operator">|</span> upload_time         <span class="token operator">|</span> media_url <span class="token operator">|</span> media_class <span class="token operator">|</span> media_module_id <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span class="token operator">|</span>         1 <span class="token operator">|</span>       1 <span class="token operator">|</span> 媒体文件1     <span class="token operator">|</span> 2021-06-10 18:45:35 <span class="token operator">|</span> media1    <span class="token operator">|</span>           1 <span class="token operator">|</span>               1 <span class="token operator">|</span><span class="token operator">|</span>         2 <span class="token operator">|</span>       2 <span class="token operator">|</span> 媒体文件2     <span class="token operator">|</span> 2021-06-10 18:47:10 <span class="token operator">|</span> media2    <span class="token operator">|</span>           2 <span class="token operator">|</span>               2 <span class="token operator">|</span><span class="token operator">|</span>         3 <span class="token operator">|</span>       3 <span class="token operator">|</span> 媒体文件3     <span class="token operator">|</span> 2021-06-10 18:47:13 <span class="token operator">|</span> media3    <span class="token operator">|</span>           3 <span class="token operator">|</span>               3 <span class="token operator">|</span><span class="token operator">|</span>         4 <span class="token operator">|</span>       4 <span class="token operator">|</span> 媒体文件4     <span class="token operator">|</span> 2021-06-10 18:47:16 <span class="token operator">|</span> media4    <span class="token operator">|</span>           4 <span class="token operator">|</span>               4 <span class="token operator">|</span>+-----------+---------+---------------+---------------------+-----------+-------------+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，再也不用担心被公司炒鱿鱼辣！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac中使用binlog2sql进行数据回滚&quot;&gt;&lt;a href=&quot;#Mac中使用binlog2sql进行数据回滚&quot; class=&quot;headerlink&quot; title=&quot;Mac中使用binlog2sql进行数据回滚&quot;&gt;&lt;/a&gt;Mac中使用&lt;strong&gt;binlog</summary>
      
    
    
    
    <category term="mysql" scheme="http://techaoba.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://techaoba.github.io/tags/mysql/"/>
    
    <category term="数据回滚" scheme="http://techaoba.github.io/tags/%E6%95%B0%E6%8D%AE%E5%9B%9E%E6%BB%9A/"/>
    
    <category term="日志文件" scheme="http://techaoba.github.io/tags/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
</feed>
